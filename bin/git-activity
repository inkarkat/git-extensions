#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--author=<pattern>] [--committer=<pattern>] [--custom-range NAME [--custom-since=<date1>] [--custom-until=<date2>]] [<log-options>] [[--] <path>...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Prints a summary of contributions in the repository.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --author=<pattern>	    Separately tally the contributions of the matching
			    author(s) (any of the patterns are included if
			    passed several times).
    --committer=<pattern>   Separately tally the contributions of the matching
			    committer(s).
    --custom-name NAME	    Instead of summarizing the last day / week / month /
    --custom-since=<date1>  year, use the custom NAME range together with the
    --custom-until=<date2>  passed --custom-since ... / --custom-until Git
			    arguments.
EXIT STATUS
    0   Complete success.
    1   Failed to invoke Git.
    2   Bad invocation, wrong or missing command-line arguments.
    4   The passed author(s) / committer(s) have never done any contributions
	here at all.
    5   The passed author(s) / committer(s) have not done any contributions
	within the custom range.
HELPTEXT
}

typeset -a userArgs=()
customRange=
typeset -a gitCustomRangeArgs=()
typeset -a gitLogArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--author=*|--committer=*)	    userArgs+=("$1"); shift;;
	--author|--committer)		    userArgs+=("$1" "$2"); shift;;
	--custom-range)			    shift; customRange="$1"; shift;;
	--custom-since=*|--custom-until=*)  gitCustomRangeArgs+=("${1/custom-/}"); shift;;
	--custom-since|--custom-until)	    gitCustomRangeArgs+=("${1/custom-/}" "$2"); shift;;
	--)		gitLogArgs+=("$@"); shift; break;;
	*)		gitLogArgs+=("$1"); shift;;
    esac
done

readonly FULL_DATE_EXPR="+%F 03:00"
todayTimestamp="$(date "$FULL_DATE_EXPR")" || todayTimestamp='yesterday'
thisWeekTimestamp="$(date -d "last Monday" "$FULL_DATE_EXPR")"
thisMonthTimestamp="$(date -d "$(date "+%Y-%m-01")" "$FULL_DATE_EXPR")"
thisYearTimestamp="$(date -d "$(date "+%Y-01-01")" "$FULL_DATE_EXPR")"

tally()
{
    local timeRange="$1"; shift
    local timestamp="$1"; shift

    totalCommitNum=$(git-count ${timestamp:+--since="$timestamp"} "$@" "${gitLogArgs[@]}") || exit $?
    totalCommits="$totalCommitNum"
    totalCommitsPlural=s
    case "$totalCommits" in
	0)	totalCommits='no';;
	1)	totalCommitsPlural=;;
    esac
    if [ ${#userArgs[@]} -eq 0 -o $totalCommitNum -eq 0 ]; then
	printf '%s: %s commit%s' "$timeRange" "$totalCommits" "$totalCommitsPlural"
	return
    fi

    userCommitNum=$(git-count ${timestamp:+--since="$timestamp"} "${userArgs[@]}" "$@" "${gitLogArgs[@]}") || exit $?
    if [ $userCommitNum -eq 0 ]; then
	if [ "$timeRange" = 'overall' ]; then
	    exit 4
	elif [ -n "$customRange" -a "$timeRange" = "$customRange" ]; then
	    exit 5
	fi
    fi

    userCommitProportion="$((100 * userCommitNum / totalCommitNum))"
    if [ $userCommitProportion -eq 0 ]; then
	printf '%s: %s/%s commit%s' "$timeRange" "$userCommitNum" "$totalCommits" "$totalCommitsPlural"
    else
	printf '%s: %s/%s commit%s (%d%%)' "$timeRange" "$userCommitNum" "$totalCommits" "$totalCommitsPlural" "$userCommitProportion"
    fi
}

# Do one tally separately in order to be able to exit early in case of bad
# passed git log arguments.
overallTally="$(tally "overall" "")" || exit $?
if [ "$customRange" ]; then
    customTally="$(tally "$customRange" '' "${gitCustomRangeArgs[@]}")" || exit $?
    typeset -a tallies=(
	"$customTally"
	"$overallTally"
    )
else
    typeset -a tallies=(
	"$(tally "today" "$todayTimestamp")"
	"$(tally "this week" "$thisWeekTimestamp")"
	"$(tally "this month" "$thisMonthTimestamp")"
	"$(tally "this year" "$thisYearTimestamp")"
	"$overallTally"
    )
fi
joinBy '; ' "${tallies[@]}"
