#!/bin/bash

readonly scriptDir=$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)
[ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }
readonly projectDir="${scriptDir}/.."
typeset -a gitConfigs=("${projectDir}"/gitconfig*)

printUsage()
{
    cat <<HELPTEXT
List all (documented) Git aliases, command extensions, and newly defined
commands [starting with <pattern>].
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<pattern>] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()

extractAliases()
{
    # Push the current section name onto the hold space and check this for every
    # encountered config line.
    sed -n \
	-e '/^\[.\+\]/{ h; b; }' \
	-e 'x; /^\[alias\]/!{ x; b; }' \
	-e 'x
	    # Remove indent.
	    s/^[ \t]*//
	    p
	' \
	"${gitConfigs[@]}"
}

printAliases()
{
    sed -e '{
	    # Keep special comments, and break keyword and explanation into
	    # separate lines.
	    s/^;; \([^ \t]\+\):[ \t]\+\(.*\)/\1\n\t\2/

	    # Remove all other comment lines.
	    /^;/d;

	    # Break alias definition and alias comment into separate lines.
	    s/[ \t]=[ \t][^;]*[ \t];[ \t]*/\n\t/;
	    b
	}' \
	| sed -e '/^\t/!s/[^=]*/[01m&[0m/' -e '/^\t/s/^\t//'
}

printFoundAliases()
{
    local aliasName="${1:?}"
    if [[ "$aliasName" =~ ^[^-].*[[:upper:]] ]]; then
	# Translate "X" to "-x" to enable looking up aliases with uppercase letters.
	aliasName="$(echo "$aliasName" | sed -e 's/[[:upper:]]/-\l\0/g')"
    fi

    sed -n \
	-e '/^;; \('"$aliasName"'[^:]*\):[ \t]\+/{
		s/^;; \([^:]\+\):[ \t]\+\(.*\)/[01m\1[0m\n\2/p
	    }
	    /^'"$aliasName"'[^=]*=[ \t]/{
		s/[^=]*/[01m&[0m/
		s/=[ \t][^;]*[ \t];[ \t]*/\n/;
		p
	    }'
}

translateUppercaseAlias()
{
    # Translate "-x" to "X" to correctly render aliases with uppercase letters.
    sed -e 's/^\(\[01m[^ ]\+\)-\([[:lower:]]\)\(\(do\|[^[:lower:]].*\)\?\[0m\)/\1\u\2\3/'
}

extractAliases \
    | print${*+Found}Aliases "$@" \
    | eval 'translateUppercaseAlias' \
    "${pager:+|}" '"${pager[@]}"'
