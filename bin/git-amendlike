#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Amend the same files (inside <path>) as were modified in the last commit / N'th
commit / passed <commit> to the last commit (ignoring any already staged
changes).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n N|--count N|<commit>] [<commit-args> ...] [--] [<path> [...]] [-?|-h|--help]'
}

commit=
typeset -a commitArgs=()
unset files
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--count|-n)	shift
			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
			    printUsage "$0" >&2
			    exit 2
			fi
			commit="HEAD~$(($1 - 1))"
			shift
			;;
	--)		shift; typeset -a files=("$@"); break;;
	-*)		commitArgs+=("$1"); shift;;
	*)		if [ -z "$commit" ]; then
			    commit="$1"
			else
			    commitArgs+=("$1")
			fi; shift
			;;
    esac
done
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    commitArgs+=("$@")
    while [ ${#commitArgs[@]} -ne 0 ]
    do
	lastArg="${commitArgs[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	commitArgs=("${commitArgs[@]:0:${#commitArgs[@]}-1}")
    done
fi

readarray -t committedFiles < <(git-showfiles "${commit:-HEAD}" -- "${files[@]}")
[ ${#committedFiles[@]} -gt 0 ] || exit 99

exec git-wrapper commit --amend --only "${commitArgs[@]}" -- "${committedFiles[@]}"
