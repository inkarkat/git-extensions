#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Annotate FILE lines with the first tag [that matches GREP-ARGS] that the commit
that created that line is based on. git-contained-${command:-COMMAND} is invoked for that
lookup.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "${command:-COMMAND} [GREP-ARGS ...] FILE [-?|-h|--help]"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

command="${1:?}"; shift
annotationWidthVar="GIT_ANNOTATE_CONTAINED_${command^^}"
annotationWidthDefault=14; [ "$command" = 'version' ] && annotationWidthDefault=8

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

file="${!#}"
revision=
lastGrepArg=$(($#-1))
[ $lastGrepArg -gt 0 -a "${@:$lastGrepArg:1}" = '--' ] && let lastGrepArg-=1
if [ $lastGrepArg -gt 0 ] && git rev-parse --verify --quiet "${@:$lastGrepArg:1}" >/dev/null; then
    revision="${@:$lastGrepArg:1}"
    let lastGrepArg-=1
fi
quotedGrepArgs=
if [ $lastGrepArg -gt 0 ]; then
    printf -v quotedGrepArgs '%q ' "${@:1:$lastGrepArg}"
fi

annotate()
{
    git-wrapper annotate --porcelain $revision -- "$file" | awk \
	-F ' ' \
	-v command="git contained$command ${quotedGrepArgs//\\/\\\\}" \
	-v annotationWidth="${!annotationWidthVar:-$annotationWidthDefault}" \
'
BEGIN {
    UNDEFINED = "\0"
}
/^[[:xdigit:]]{40} [[:digit:] ]+$/ {
    hash = $1
    version = hashToVersion[hash]
    if (version == "") {
	versionLookupCommand = command hash
	versionLookupCommand | getline version
	hashToVersion[hash] = (version == "" ? UNDEFINED : version)
    }

    while ($0 !~ /^\t/) {
	getline
    }
    printf "%-" annotationWidth "s) %s\n", (version == UNDEFINED ? "" : version), substr($0, 2)
    next
}
{
    printf "ERROR: Unexpected format in line %d: %s\n", NR, $0 > "/dev/stderr"
    exit 1
}
'
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
eval 'annotate "$@"' "${pager:+|}" '"${pager[@]}"'
