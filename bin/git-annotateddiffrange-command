#!/bin/bash
set -o noglob -o pipefail

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly libDir="${projectDir}/lib"
source "${libDir}/logArgParser.sh" || exit 3

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--cached|HEAD] [--to-earliest|--to-earliest]  [--no-range|--with-range RANGE|--last-only] [--one-more|--one-more-output|--one-more-command GIT-COMMAND2|^[1|2] [--one-more-with-padding] [--one-more-only-to-terminal] [--files-for-range|--files-for-command] [--except-last] ... [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... RANGE ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print / execute GIT-COMMAND with a revision range of the first and last / from
HEAD up to (excluding) the first encountered (--to-latest) / (including) the
last (--to-earliest) of the commits affected by lines that have been changed
between commits, commit and working tree, etc. [in FILE ...]
- appended
- replacing RANGE argument(s) anywhere
- replacing RANGE in the following GIT-COMMAND and -(N-1) arguments
- replacing RANGE in the following +(N) arguments and appending those
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
By default selects commits affected by lines that have been changed in currently
modified but not staged files.
    HEAD		Select commits affected by lines that have been changed
			in currently modified files.
    --cached		Select commits affected by lines that have been changed
			in currently staged files highlighted.
    --to-latest		The range starts from HEAD and stops just before the
			most recent affected commit.
    --to-earliest	The range starts from HEAD, covers all affected commits
			and stops at the earliest affected commit.
    --no-range		Only use the last affected commit.
    --with-range ...	Use ... instead of .. as the range specifier.
    --last-only		Only use the first affected commit.
    --one-more		Include the commit preceding the last affected commit.
    FILE arguments by default are both used to determine the revision range and
    passed to GIT-COMMAND.
    --files-for-range	Only use FILE arguments to determine the revision range,
			do not pass them to GIT-COMMAND.
    --files-for-command Pass FILE arguments only to GIT-COMMAND, do not use them
			to determine the revision range.
    --except-last	The very last argument is special and should not be
			parsed as log-args or FILE(s).
HELPTEXT
}

typeset -a selectedAnnotatedDiffCommitArgs=()
typeset -a selectedCommitRangeIndices=(0 -1)
selectedCommitRangeOneMore=t
isWithRange=t
typeset -a specialLastArg=()
typeset otherArgs=()
typeset -a logArgs=()
isLogArgsForRange=
isLogArgsForCommand=t
isFilesForRange=t
isFilesForCommand=t
unset files
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	HEAD|--cached)	selectedAnnotatedDiffCommitArgs+=("$1"); shift;;
	--to-earliest)	shift; selectedCommitRangeIndices=(-1);;
	--to-latest)	shift; selectedCommitRangeIndices=(0); selectedCommitRangeOneMore=;;

	--no-range)	otherArgs+=("$1"); shift; isWithRange=;;

	--files-for-range)
			shift; isFilesForCommand=;;
	--files-for-command)
			shift; isFilesForRange=;;
	--except-last)
			shift
			if [ $# -gt 0 ]; then
			    specialLastArg=("${!#}")
			    set -- "${@:1:$(($#-1))}"
			fi
			;;
	--)		shift
			# Only capture files after the last -- (to support intermediate wrapping GIT-COMMAND(s)).
			if contains -- "$@"; then
			    otherArgs+=(--)
			else
			    typeset -a files=("$@")
			    set --
			    break
			fi
			;;
	*)		otherArgs+=("$1"); shift;;
    esac
done
set -- "${otherArgs[@]}"
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    while [ $# -gt 0 ]
    do
	lastArg="${!#}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	set -- "${@:1:$(($#-1))}"
    done
fi

< <(git-selectedannotatediffcommit-command --all "${selectedAnnotatedDiffCommitArgs[@]}" echo ${isFilesForRange:+-- "${files[@]}"}) IFS=' ' read -r -a result
[ ${#result[@]} -gt 0 ] || exit 1

typeset -a commits=()
for i in "${selectedCommitRangeIndices[@]}"
do
    commits+=("${result[i]}")
done

endRevision=
case ${#commits[@]} in
    0)	exit 1;;
    1)	revision="${commits[0]}${selectedCommitRangeOneMore:+^}";;
    2)	endRevision="${commits[0]}"; revision="${commits[1]}${selectedCommitRangeOneMore:+^}";;
    *)	printf >&2 'ASSERT: Received more than 2 commits: %s\n' "${commits[@]}"; exit 3;;
esac

[ "$isWithRange" ] || endRevision=''   # Prevent "ERROR: --end-revision cannot be combined with --no-range!"; we don't need the end revision, as --no-range drops that, anyway.

exec git-rev-range --revision "$revision" ${endRevision:+--end-revision "$endRevision"} ${isLogArgsForCommand:+"${logArgs[@]}"} "$@" ${isFilesForCommand:+${files:+--} "${files[@]}"} "${specialLastArg[@]}"
