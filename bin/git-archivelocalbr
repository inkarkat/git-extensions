#!/bin/bash
shopt -qs extglob

: ${GIT_ARCHIVELOCALBR_SOURCE_COMMAND:=git-localbr}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--branches BRANCH [...] ;] [-n N|--count N] [-q|--quiet] [-y|--yes] [-f|--force] [-m <msg>|--message=<msg>|-F <file>|--file=<file>] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Tag all / the first N committed local branches (except for the current branch
and master (and base branch if defined)), then delete them from the local
repository as well as origin.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --count|-n N	Only archive the first N committed local branches.
    --quiet|-q		Don't print the branches that will be archived.
    --yes|-y		Skip the confirmation.
    --force|-f		Force archiving of those branches that have not been
			fully merged.
    --branches BRANCH [...] ;
			Only archive the following BRANCH(es); i.e. all
			following arguments until an argument consisting of ';'
			is encountered.
HELPTEXT
}

branchNum=
typeset -a sourceBranches=()
isQuiet=
isYes=
typeset -a gitArchiveArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--quiet|-q)	shift; isQuiet=t;;
	--yes|-y)	shift; isYes=t;;
	--count|-n)	shift; branchNum="$1"; shift;;
	--force|-f)	gitArchiveArgs+=("$1"); shift;;
	--@(message|file)|-[mF])
			gitArchiveArgs+=("$1" "$2"); shift; shift;;
	--@(message|file)=*)
			gitArchiveArgs+=("$1"); shift;;
	--branches)	shift
			while [ $# -gt 0 -a "$1" != ';' ]
			do
			    sourceBranches+=("$1")
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo 'ERROR: --branches must be concluded with ;!'; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

if [ ${#sourceBranches[@]} -gt 0 ] && [ ! "$GIT_ARCHIVELOCALBR_SOURCE_SORTED" ]; then
    localBranches=("${sourceBranches[@]}")
else
    readarray -t localBranches < <(eval "$GIT_ARCHIVELOCALBR_SOURCE_COMMAND" '"${sourceBranches[@]}"')
fi
if [ ${#localBranches[@]} -eq 0 ]; then
    echo >&2 'No local branches found!'
    exit 1
fi
[ -n "$branchNum" ]  && [ $branchNum -lt ${#localBranches[@]} ] \
    && localBranches=("${localBranches[@]:0:$branchNum}")

IFS=$'\n'
if [ "$isYes" ]; then
    [ "$isQuiet" ] || echo >&2 "Archiving:
${localBranches[*]}"
else
    if [ ${#localBranches[@]} -eq 1 ]; then
	localBranchesArticle=this
	localBranchesPlural=
    else
	localBranchesPlural=es
	localBranchesArticle=these
    fi
    userBinaryChoice --introduction "Archiving:
${localBranches[*]}" --keep-prompt --question "Really archive $localBranchesArticle branch${localBranchesPlural}?" --yes-no || exit 4
fi

exec git-archivebr "${gitArchiveArgs[@]}" "${localBranches[@]}"
