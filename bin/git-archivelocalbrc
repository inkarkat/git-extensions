#!/bin/bash
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n N|--count N] [-q|--quiet] [-y|--yes] [-f|--force] [-m <msg>|--message=<msg>|-F <file>|--file=<file>] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Tag all / the first N local branches (except for the current branch and master
(and base branch if defined)) ordered by date of first commit, then delete them
from the local repository as well as origin.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --count|-n N	Only archive the first N local branches.
    --quiet|-q		Don't print the branches that will be archived.
    --yes|-y		Skip the confirmation.
    --force|-f		Force archiving of those branches that have not been
			fully merged.
HELPTEXT
}
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac

GIT_ARCHIVELOCALBR_SOURCE_COMMAND='git-localbrc' \
GIT_ARCHIVELOCALBR_SOURCE_SORTED=t \
    exec git-archivelocalbr "$@"
