#!/bin/bash
# See https://stackoverflow.com/a/15367176/813602

printUsage()
{
    cat <<HELPTEXT
Automatically create a temporary stash before executing "git SIMPLECOMMAND"
and/or COMMANDLINE (which probably contains Git command(s)), and apply and
remove the stash after that operation ends. This means that you can run Git
commands that otherwise would complain on a dirty worktree.
Note: Autostashes will include both staged and unstaged changes, but everything
will land in the working copy afterwards. The index is needed to resolve any
conflicts from applying the stash, anyway.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-u|--include-untracked] [-a|--all] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}

typeset -a commands=()
typeset -a stashArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--include-untracked|-u|--all|-a) stashArgs+=("$1"); shift;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)  break;;
    esac
done
readonly gitCommand='git-wrapper'
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$gitCommand" "$@"
    commands+=(${commands:+;} "${quotedSimpleCommand% }")
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
fi >&2

isDirty=; git-isnonemptyrepo && git-dirty --quiet && isDirty=t

if [ "$isDirty" ]; then
    # Emulate the output of git pull --autostash:
    # > Created autostash: db23d8b
    # > HEAD is now at 4166659 Merge branch 'newbr'
    # [COMMANDLINE] output
    # > Applied autostash.
    # The default stash output is too verbose; not showing anything would be
    # confusing, too.
    stashOutput=$(git stash save "${stashArgs[@]}" 'autostash') || exit $!
    printf 'Created autostash: %s\n' "$(git rev-parse --short stash@{0} 2>/dev/null || echo "???")"
    printf '%s\n' "$stashOutput" | sed -e '/^Saved working directory and index state /d'
fi
finally()
{
    if [ "$isDirty" ]; then
	git stash pop --quiet && echo "Applied autostash." || exit $?
    fi
    exit $status
}
trap 'finally' EXIT


(eval "${commands[@]}"); status=$?
