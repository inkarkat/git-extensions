#!/bin/bash

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }

# The current Git revision may be part of the prompt or title, but it's not
# being updated while git bisect run iterates. Explicitly update a panel entry
# with the revision that is currently being tested. The git-bisect wrapper
# ensures that this gets cleared after all iterations are through.
type -t titleupdate >/dev/null && titleupdate --id git-bisecting --panel "testing $(git-desc 2>/dev/null)"

if [ $# -gt 0 ]; then
    "$@"
elif [ -n "$GIT_BISECT_CHECK_COMMAND" ]; then
    eval "$GIT_BISECT_CHECK_COMMAND"
elif [ -n "$GIT_CHECK_COMMAND" ]; then
    eval "$GIT_CHECK_COMMAND"
else
    echo >&2 'ERROR: No <cmd> passed to git bisect run (and no default check configured).'
    exit 255    # Need to exit with > 127 to abort the bisect.
fi
status=$?

# XXX: My git-bisect is not accessible through PATH when executed by "git
# bisect"; therefore need to invoke it with the full filespec.
case "$status" in
    0)	    "${scriptDir}/git-bisect" --report-only "${termOld:-good}";;
    125)    "${scriptDir}/git-bisect" --report-only skip;;
    [0-9]|[1-9][0-9]|1[01][0-9]|12[0-7])
	    "${scriptDir}/git-bisect" --report-only "${termNew:-bad}";;
esac

exit $status
