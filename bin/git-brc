#!/bin/bash
set -o pipefail
shopt -qs globstar # ** matches files and/only (as **/) subdirs recursively.

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--bare|-l|--long] [-r|-a] [-b|--base <branch>] [-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]] [--] [<branch-glob> ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
List local branches and their first commit ordered by date of first commit
(descending, starting with old branches).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --long|-l		Also print the author name.
    --bare		Just print the branch names.
    --base|-b BASE	Use base as the merge base for all branches to find the
			best common ancestors.
			By default, each branch's base branch (obtained through
			brbase: as tagged or referenced anywhere in the history
			(also by remotes)) is used as the merge base.
    -r			List remote-tracking branches.
    -a			List both local and remote-tracking branches.
    -n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]
			Only print those branches that match the age comparison.
SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours, 'd'
for days, 'w' for weeks, 'mo' for months, 'y' for years, 'g' for generations.
    <branch-glob>	Only consider branches that match <branch-glob>.
HELPTEXT
}

locality='local'
base=
isBare=
format='%at	%ai	(%ar)'
typeset -a filterAction=(sed -e 's/^[^\t]*\t//')
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--long|-l)	shift; format="${format/)/, %aN)}";;
	--all|-a)	shift; locality='all';;
	--remote|-r)	shift; locality='remote';;
	--base|-b)	shift; base="$1"; shift;;
	--bare)		shift; isBare=t; format='%at';;
	-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt)
			filterAction=(filterAge --field-separator $'\t' "$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
typeset -a what=()
[ $# -gt 0 ] || set -- ''
for branchGlob
do
    dirBranchGlob="${branchGlob//\*/*/**}"    # As we're doing file system lookup, a branch name glob needs to be converted into a directory hierarchy one in case the branch name contains slashes.
    case $locality in
	local)  what+=("refs/heads/$branchGlob" "refs/heads/$dirBranchGlob");;
	all)    what+=("refs/heads/$branchGlob" "refs/heads/$dirBranchGlob" "refs/remotes/$branchGlob" "refs/remotes/$dirBranchGlob");;
	remote) what+=("refs/remotes/$branchGlob" "refs/remotes/$dirBranchGlob");;
    esac
done

readarray -t branches < <(git for-each-ref --format='%(refname:short)' "${what[@]}"; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
[ ${branches[-1]} -ne 0 ] && exit ${branches[-1]}
unset 'branches[-1]'
[ -z "${branches[-1]}" ] && unset 'branches[-1]'

typeset -a firstCommits=()
for branch in "${branches[@]}"
do
    [[ "$branch" =~ /HEAD$ ]] && continue

    {
	IFS=$'\n' read -r firstCommit
	IFS=$'\n' read -r baseBranch
    } <<<"$(git-brfirstcommit --pretty="tformat:${format}" ${base:+--base "$base"} --print-base-branch-after $'\n' "$branch")"

    [ "$isBare" ] || [ -z "$baseBranch" ] || firstCommit="${firstCommit/)/, from $baseBranch)}"
    firstCommits+=("$firstCommit"$'\t'"$branch")
done

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
if [ ! -t 1 ]; then
    pager=()
    formatter=()
fi

# Print the sorted information without the leading Unix timestamp used as the
# sort key.
printf '%s\n' "${firstCommits[@]}" | \
    sort --numeric-sort | \
    eval '"${filterAction[@]}"' "${formatter:+|}" '"${formatter[@]}"' "${pager:+|}" '"${pager[@]}"'
