#!/bin/bash
set -o pipefail

: ${GIT_BRINFO_ARGS_MARKER='{@}'}
: ${GIT_BRINFO_BRANCH_MARKER='{}'}
argsMarker="$GIT_BRINFO_ARGS_MARKER"; unset GIT_BRINFO_ARGS_MARKER
branchMarker="$GIT_BRINFO_BRANCH_MARKER"; unset GIT_BRINFO_BRANCH_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: git BRANCH-COMMAND | %q %s\n' "$(basename "$1")" "[--branches-from-me|--my-branches] [--collab-branches] [--include-authors] [--include-creator] [--set-context EXPR|''] [--add-context EXPR [-a|--context-arg ARG [-a ...]] [--add-context ...]] [--color=(always|auto|never)|--no-color] [CONTEXT-ARGS ...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Add additional information (shortlog of the last commit) about each branch from
the input.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --branches-from-me	Omit branches that have not been created by me (i.e.
			where the first commit is not by me).
    --my-branches	Omit branches that do not have any commit authored by
			me.
    --collab-branches	Omit branches that only have a single author.
    --who		Also list the creator, any other authors, and the last
			author.
    --include-authors	Also list all authors that have committed on the branch.
    --include-creator	Also list the author of the first commit on the branch.
    --include-distribution
			Also show the distribution of commits over the lifetime
			of the branch.
    --set-context EXPR	For each branch, EXPR is executed with all passed
			arguments appended / replacing {@}, and the current
			branch appended / replacing {}; the result is used as
			the additional information.
			If EXPR fails, that branch is completely omitted.
			By default this is a shortlog of the last commit.
    --set-context ''	Disable the default shortlog of the last commit.
    --add-context EXPR	For each branch, EXPR is executed with all passed
			arguments / replacing {@}, and the current branch
			appended / replacing {}; any result is prepended
			before the shortlog of the last commit. If EXPR fails,
			that branch is completely omitted.
    --context-arg|-a ARG
			Pass ARG only to the preceding added context EXPR.
			Generic arguments that apply to all commands (like
			--color) can also be appended as CONTEXT-ARGS. If an
			EXPR should not receive any passed arguments, append
			"# {@}".
HELPTEXT
}
typeset -a defaultCommand=("git onelinelog --no-decorate --max-count 1 --pretty='tformat:%C(cyan)%h%Creset %Cgreen(%aN, %ar)%Creset	%s'")
typeset -a addedCommands=()
typeset -a contextArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--set-context)	shift; [ -n "$1" ] && defaultCommand=("$1") || defaultCommand=(); shift;;
	--add-context)	shift; addedCommands+=("$1"); shift;;
	--branches-from-me)
			shift; addedCommands+=('filterBranchesCreatedByMe {} #{@}');;
	--my-branches)	shift; addedCommands+=('filterMyBranches {} #{@}');;
	--collab-branches)
			shift; addedCommands+=('filterCollabBranches {} #{@}');;
	--who)		shift
			# The default onelinelog will already show the last
			# author.
			addedCommands+=("git whoworkedonthebranch ${defaultCommand[*]:+--omit-last-author} --branch {} | joinBy --omit-empty --prefix '(' --suffix ')' - ', ' || echo ' ' #{@}")
			;;
	--include-authors)
			shift; addedCommands+=('git abr whodidhere --summary --names-only --branch {} | joinBy --prefix "(by " --suffix ")" --empty "(no authors found)" --summarize-larger "3 authors" - ", " || echo " " #{@}');;
	--include-creator)
			shift; addedCommands+=('git bc baselg --pretty=tformat:%aN --branch {} | joinBy --prefix "(created by " --suffix ")" --empty "(no author found)" - ", " || echo " " #{@}');;
	--include-distribution)
			shift; addedCommands+=('DISTRIBUTIONDAYS_WIDTH=40 DISTRIBUTIONDAYS_COLOR_UNITS=" " git abr logdistribution --linear {@} --branch {} | reldate || echo " "');;
	--context-arg|-a)
			shift
			if [ ${#addedCommands[@]} -eq 0 ]; then
			    echo 'ERROR: No previous --add-context.'
			    echo
			    printUsage "$0"
			    exit 2
			fi >&2
			printf -v quotedArg %q "${1?}"; shift
			addedCommands[-1]="${addedCommands[-1]//"$argsMarker"/$quotedArg $argsMarker}"
			;;
	--)		contextArgs+=("$1"); shift; break;;
	*)		contextArgs+=("$1"); shift;;
    esac
done

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
if [ -t 1 ]; then
    isColorOffArgument "$@" || set -- '--color=always' "$@"
else
    pager=()
    formatter=()
fi

filterBranchesCreatedByMe()
{
    local branch="${1:?}"; shift
    local me; me="$(git me)" || return 0
    local creator; creator="$(git bc baselg --pretty='tformat:%aN' --branch "$branch")" || return 0

    [ "$me" = "$creator" ]
}

filterMyBranches()
{
    local branch="${1:?}"; shift

    git abr whodidhere --summary --names-only --branch "$branch" \
	| git-mine-command --no-option-name exec grep --quiet --fixed-strings --line-regexp -e
}

filterCollabBranches()
{
    local branch="${1:?}"; shift

    git abr whodidhere --summary --names-only --branch "$branch" \
	| sed -e '${ 1q 1 }' >/dev/null
}

branchInfo()
{
    while IFS=$'\n' read -r line || [ -n "$line" ]
    do
	if [[ "$line" =~ ^(${GIT_BRINFO_PREFIX_PATTERN-\*? *})(\[[0-9:;]*m)?([^ ]+)(\[[0-9:;]*m)?(${GIT_BRINFO_SUFFIX_PATTERN-.*})$ ]] \
	    && prefix="${BASH_REMATCH[1]}" \
	    && colorOn="${BASH_REMATCH[2]}" \
	    && branch="${BASH_REMATCH[3]}" \
	    && colorOff="${BASH_REMATCH[4]}" \
	    && suffix="${BASH_REMATCH[5]}" \
	    && git-existsbr -- "$branch"
	then
	    local cmd info=
	    for cmd in "${addedCommands[@]}" "${defaultCommand[@]}"
	    do
		local quotedArgs=''; [ $# -eq 0 ] || printf -v quotedArgs '%q ' "$@"; quotedArgs="${quotedArgs% }"
		typeset -a a=("$@")
		local interpolatedCommand="${cmd//"$argsMarker"/$quotedArgs}"
		[ "$interpolatedCommand" = "$cmd" ] || a=()

		typeset -a b=("$branch")
		printf -v quotedBranch %q "$branch"
		local interpolatedBranchCommand="${interpolatedCommand//"$branchMarker"/$quotedBranch}"
		[ "$interpolatedBranchCommand" = "$interpolatedCommand" ] || b=()

		info+="${info:+$'\t'}$(eval "$interpolatedBranchCommand" '"${a[@]}"' '"${b[@]}"')" || continue 2
	    done

	    printf '%s%s%s%s\t%s%s\n' "$prefix" "$colorOn" "$branch" "$colorOff" "$info" "$suffix"
	else
	    [ -n "$branch" ] || branch="$line"
	    printf >&2 '%s%s%s%s%s\t(Not a branch)\n' "$prefix" "$colorOn" "$branch" "$colorOff" "$suffix"
	fi
    done
}

eval 'branchInfo "${contextArgs[@]}" "$@"' "${formatter:+|}" '"${formatter[@]}"' "${pager:+|}" '"${pager[@]}"'
