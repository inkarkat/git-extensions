#!/bin/bash
set -o pipefail

: ${GIT_BRLIFETIMES_COLOR_LIFETIME=[32m}
: ${GIT_BRLIFETIMES_COLOR_COMMITCOUNT=[35m}
: ${GIT_BRLIFETIMES_COLOR_MERGEBASE=[36m}
: ${GIT_BRLIFETIMES_COLOR_RESET=[0m}
: ${GIT_BRLIFETIMES_COMMIT_UNIT=‚óè}
: ${GIT_BRLIFETIMES_EXIT_STATUS_NO_MERGES:=99}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    local bothArgs='[--creator=<pattern>] [--net-commits]'
    local outputOptions='[--sort-by-commits|--sort-by-duration|(-s|--summary|--duration-summary|--commits-summary) [--raw]]'
    local logArgs='[<log-options>] [<revision range>] [[--] <path>...]'
    printf 'Usage: %q %s %s %s %s\n' "$(basename "$1")" "$bothArgs" "$outputOptions" "$logArgs" '[-?|-h|--help]'
    echo
    printf 'Usage: %q %s %s %s | %q %s %s %s\n' "$(basename "$1")" '--log-only' "$bothArgs" "$logArgs" "$(basename "$1")" '--stdin' "$bothArgs" "$outputOptions"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
One-line lifetime, number of commits, commit range, author, date, tags and
commit summary of merged branches.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
For each merged commit, each non-first parent is followed until its merge base,
and the number of commits as well as the timespan between first commit and the
merge commit calculated.
    --creator=<pattern>	Only consider branches where the first commit and the
			majority of commits was done by an author matching
			<pattern>.
    --net-commits	Ignore the actual merge commit; only count the timespan
			between first and last commit [by the creator] on the
			branch itself. So any time in / waiting for review is
			excluded.
    --sort-by-commits	Order the output by the number of commits (descending).
    --sort-by-duration	Order the output by the duration (descending).
    --summary|-s	Only print statistics about the durations that a branch
			was active and the contained commits${GIT_BRLIFETIMES_COMMIT_UNIT:+ (with unit ${GIT_BRLIFETIMES_COMMIT_UNIT})}.
    --duration-summary	Only print statistics about the durations that a branch
			was active.
    --commits-summary	Only print statistics about the number of contained
			commits${GIT_BRLIFETIMES_COMMIT_UNIT:+ (with unit ${GIT_BRLIFETIMES_COMMIT_UNIT})}.
    --raw		Print just the bare, space-separated numbers.
HELPTEXT
    statistics --legend-only | prefix $'\t\t\t    '
}

logOnly()
{
    # Disable any processing (for now; the --stdin invocation will do that).
    summarizer=''
    isSort=
    : ${inserter:='printf %s "$endEpoch"'}   # Sorting by merge date (unless another sort is requested).
    [ ${#colorArg[@]} -gt 0 ] || colorArg=(--color=always)
    pager=()
}
readLogs()
{
    action=''
    [ -n "$summarizer" ] || isSort=t
}
preAction=
specialAction=
action=logLifetimes
typeset -a logArgs=()
typeset -a creatorArgs=()
isColor=t
typeset -a colorArg=(--color=always)
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ ! -t 1 ]; then
    isColor=
    colorArg=()
    pager=()
fi
isNetCommits=
datediffOutputFormat='best-unit'
picker=
summarizer=
inserter=
isSort=
typeset -a statisticsArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=never)
			colorArg=("$1"); shift; isColor=;;
	--color=always)	colorArg=("$1"); shift; isColor=t;;
	--color=*)	colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1" "$2"); case "$2" in never) isColor=;; always) isColor=t;; esac; shift; shift;;

	--sort-by-commits)
			shift; isSort=t; inserter='printf %d $commitCount';;
	--sort-by-duration)
			shift; isSort=t; inserter='datediff --output seconds "$startEpoch" "$endEpoch"';;
	--summary|-s)	shift; picker='printf %d\\t%d\\n $dateDiff $commitCount'; summarizer=summarizeAll; datediffOutputFormat='seconds'; pager=();;
	--duration-summary)
			shift; picker='printf %d\\n $dateDiff'; summarizer=summarizeDuration; datediffOutputFormat='seconds'; pager=();;
	--commits-summary)
			shift; picker='printf %d\\n $commitCount'; summarizer=summarizeCommits; datediffOutputFormat=''; pager=();;
	--log-only)	shift; preAction=logOnly;;
	--stdin)	shift; preAction=readLogs;;

	--duration-statistics)
			shift; specialAction='summarizeDuration';;
	--commits-statistics)
			shift; specialAction='summarizeCommits';;
	--raw)		statisticsArgs=("$1"); shift;;
	--creator=*)	creatorArgs+=("--author=${1#--creator=}"); shift;;
	--net-commits)	shift; isNetCommits=t;;
	--)		logArgs+=("$1"); shift; break;;
	*)		logArgs+=("$1"); shift;;
    esac
done
$preAction
if [ -n "$action" ] && [ "$isSort" ] && [ -n "$summarizer" ]; then
    echo 'ERROR: Cannot combine --sort-by-* with -s|--summary|--duration-summary|--commits-summary.'
    echo
    printUsage "$0"
    exit 2
fi >&2
[ "$isColor" ] || unset "${!GIT_BRLIFETIMES_COLOR_@}"

sortByTemporaryFirstColumn()
{
    sort --field-separator=$'\t' --numeric-sort --reverse --key=1,1 \
	| field --field-separator $'\t' --remove 1
}

summarizeAll()
{
    eachField --field-separator $'\t' \
	--exec "${BASH_SOURCE[0]}" "${statisticsArgs[@]}" --duration-statistics \; 1 \
	--exec "${BASH_SOURCE[0]}" "${statisticsArgs[@]}" --commits-statistics \; 2
}

summarizeDuration()
{
    if [ ${#statisticsArgs[@]} -eq 0 ]; then
	STATISTICS_PRECISION=0 acceptStatus 0 99 statistics \
	    | secondsToDuration --precision 7 --skip '[N‚â†]:&'
    else
	STATISTICS_PRECISION=0 STATISTICS_SEP=$'\t' acceptStatus 0 99 statistics "${statisticsArgs[@]}"
    fi
}

summarizeCommits()
{
    if [ ${#statisticsArgs[@]} -eq 0 ]; then
	STATISTICS_PRECISION=1 acceptStatus 0 99 statistics ${GIT_BRLIFETIMES_COMMIT_UNIT:+--unit ${GIT_BRLIFETIMES_COMMIT_UNIT}}
    else
	STATISTICS_PRECISION=1 STATISTICS_SEP=$'\t' acceptStatus 0 99 statistics "${statisticsArgs[@]}"
    fi
}

logLifetimes()
{
    status=
    while IFS=' ' read -r -a fields
    do
	firstParent="${fields[0]}"
	typeset -a otherParents=()
	for ((i = 1;; i++))
	do
	    if [[ "${fields[i]}" =~ ^@ ]]; then
		endEpoch="${fields[i]}"
		logLine="${fields[*]:i+1}"
		break
	    else
		otherParents+=("${fields[i]}")
	    fi
	done

	let parentCount=0
	for parent in "${otherParents[@]}"
	do
	    let parentCount+=1
	    typeset -a branchRecords=()
	    readarray -t branchRecords < <(git log --first-parent --pretty=$'tformat:%h\t@%at' "${firstParent}..${parent}")
	    if [ ${#branchRecords[@]} -eq 0 ]; then
		printf >&2 'Warning: No commits between %s and %s:\n%s\n' "$firstParent" "$parent" "$logLine"
		continue
	    fi
	    local commitCount=${#branchRecords[@]}
	    local startRecord="${branchRecords[-1]}"
	    local startCommit="${startRecord%%$'\t'*}"
	    local startEpoch="${startRecord#*$'\t'}"

	    if [ ${#creatorArgs[@]} -gt 0 ]; then
		# Only consider branches where the first commit was done by the creator.
		[ -n "$(git show "${creatorArgs[@]}" --pretty=tformat:x --no-patch "$startCommit")" ] || continue

		if [ $commitCount -gt 1 ]; then
		    readarray -t branchRecords < <(git log --first-parent --pretty=$'tformat:%h\t@%at' "${creatorArgs[@]}" "${firstParent}..${parent}")
		    local authorCommitCount=${#branchRecords[@]}
		    if [ $((2 * authorCommitCount)) -lt $commitCount ]; then
			printf >&2 'Note: Discarding commits between %s..%s, only %d of %d by %s:\n%s\n' "$firstParent" "$parent" $authorCommitCount $commitCount "${creatorArgs[*]/#--author=}" "$logLine"
			continue
		    fi

		    # Only tally commits by the creator themselves.
		    commitCount=$authorCommitCount
		fi
	    fi

	    if [ "$isNetCommits" ]; then
		local endRecord="${branchRecords[0]}"
		endEpoch="${endRecord#*$'\t'}"
	    fi


	    if [ -n "$datediffOutputFormat" ]; then
		dateDiff="$(datediff --output "$datediffOutputFormat" "$startEpoch" "$endEpoch")" && : ${status:=0} || { status=$?; continue; }
	    fi

	    if [ -n "$picker" ]; then
		eval "$picker"
	    else
		local parentCountSuffix=''; [ ${#otherParents[@]} -gt 1 ] && parentCountSuffix=" ($parentCount)"

		printf '%s%s%15s%s %s%5d%s %s%s%s %s%s\n' \
		    "${inserter:+$(eval "$inserter")$'\t'}" \
		    "$GIT_BRLIFETIMES_COLOR_LIFETIME" "$dateDiff" "$GIT_BRLIFETIMES_COLOR_RESET" \
		    "$GIT_BRLIFETIMES_COLOR_COMMITCOUNT" "${commitCount:-0}" "$GIT_BRLIFETIMES_COLOR_RESET" \
		    "$GIT_BRLIFETIMES_COLOR_MERGEBASE" "$startCommit" "$GIT_BRLIFETIMES_COLOR_RESET" \
		    "$logLine" "$parentCountSuffix"
	    fi
	done
    done < <(git logmerges --no-patch --pretty="tformat:%P @%at $(git-onelinelog --print-format)" "${colorArg[@]}" "$@")
    return ${status:-$GIT_BRLIFETIMES_EXIT_STATUS_NO_MERGES}
}

if [ -n "$specialAction" ]; then
    $specialAction "$@"
    exit $?
fi
eval '$action' ${action:+'"${logArgs[@]}" "$@"'} \
    "${isSort:+${action:+| }sortByTemporaryFirstColumn}" \
    "${summarizer:+${action:+| }}${summarizer}" \
    "${pager:+|}" '"${pager[@]}"'
