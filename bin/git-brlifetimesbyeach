#!/bin/bash

: ${GIT_BRLIFETIMESBYEACH_GRAPH_SIZE:=1000,1000}
: ${GIT_BRLIFETIMESBYEACH_GRAPH_NOGUI:=dumb size ${COLUMNS:-80} $((${LINES:-25} - 3)) ansi}
: ${GIT_BRLIFETIMESBYEACH_GRAPH_GUI:=qt size $GIT_BRLIFETIMESBYEACH_GRAPH_SIZE}
: ${GIT_BRLIFETIMESBYEACH_GRAPH_OUTPUT:=}

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly etcDir="${projectDir}/etc/byeach"

printUsage()
{
    git-brlifetimes --help 2>&1 | sed \
	-e '1s#^.*$#Show one-line lifetime, number of commits, commit range, author, date, tags and\ncommit summary of merged branches for each user that authored merges separately.\n(This assumes that branches are merged by their author, not somebody else.)#' \
	-e '2b removeFirstParagraphLoop' \
	-e '/^ *--creator=/b removeOptionLoop' \
	-e '/^ *--summary/i\
    --creators		Group by the authors of the first commits of a branch,\
			not the merge authors, and only consider branches where\
			the majority of commits were by that author. Useful when\
			maintainers do the merges.' \
	-e '/^ *--raw/i\
    --graph		Graph the durations and commit counts per author.\
    --graph-stdin	Graph the raw data read from stdin.' \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ |]\+ \)*git-brlifetimes /\1\2[GIT_BRLIFETIMESBYEACH_GRAPH_SIZE=1000,1000] [GIT_BRLIFETIMESBYEACH_GRAPH_OUTPUT=FILE.(png,svg)] '"$(basename "$1")"' /; s/ \[--creator=<pattern>\]//; s/\[--raw\]/[--graph|--graph-stdin|--raw]/; }' \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop; }' \
	-e b -e :removeOptionLoop -e '{ /\n *--foo|-f[^\n]*$/{ N; b removeOptionLoop; }; /\n *--[^\n]*$\|\n[^	 ]\|\n$/{ s/^\(.*\n\)\?//; b; }; N; b removeOptionLoop; }'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

who='author'
isNetCommits=
isSummary=
isRaw=
typeset -a collector=(brlifetimesbyeach)
typeset -a grapher=()
typeset -a logArgs=()
typeset -a segegatedusercommandFilterOptionArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--creators)	shift; segregatedusercommandFilterOptionArgs=(--option-name creator); who='creator';;
	--summary|-s|--commits-summary|--duration-summary)
			logArgs+=("$1"); shift; isSummary=t;;
	--graph-stdin)	collector=();&
	--graph)	shift; logArgs+=(--raw); isRaw=t; grapher=(gnuplotWrapper);;
	--raw)		logArgs+=("$1"); shift; isRaw=t;;
	--net-commits)	logArgs+=("$1"); shift; isNetCommits=t;;
	--)		logArgs+=("$1"); shift; break;;
	*)		logArgs+=("$1"); shift;;
    esac
done
typeset segregatedusercommandHeaderArgs=(--with-header)
if [ "$isSummary" ]; then
    segregatedusercommandHeaderArgs=(--prefixed)
    [ "$isRaw" ] || segregatedusercommandHeaderArgs+=(--tabular)
fi

typeset -a brlifetimesCommand=(brlifetimes)
if [ -n "$GIT_BRLIFETIMESBYEACH_AGGREGATE_COMMAND" ]; then
    eval "typeset -a brlifetimesCommand=($GIT_BRLIFETIMESBYEACH_AGGREGATE_COMMAND)"
    set -- "$@" --  # Need a trailing -- to prevent that arguments from the aggregate command are parsed off as FILE(s) if it contains a -- itself. Passing <path>s for a multi-repo iteration likely doesn't make sense, anyway.
fi

gnuplotWrapper()
{
    case "${GIT_BRLIFETIMESBYEACH_GRAPH_OUTPUT##*.}" in
	png)
	    local terminalSettings="png size $GIT_BRLIFETIMESBYEACH_GRAPH_SIZE; set output '$GIT_BRLIFETIMESBYEACH_GRAPH_OUTPUT'"
	    ;;
	svg)
	    local terminalSettings="svg size $GIT_BRLIFETIMESBYEACH_GRAPH_SIZE background 'white'; set output '$GIT_BRLIFETIMESBYEACH_GRAPH_OUTPUT'"
	    ;;
	'') [ -n "$DISPLAY" ] \
		&& local terminalSettings="$GIT_BRLIFETIMESBYEACH_GRAPH_GUI" \
		|| local terminalSettings="$GIT_BRLIFETIMESBYEACH_GRAPH_NOGUI"
	    ;;
	*)  printf >&2 "ERROR: Unsupported output format '%s'.\\n" "${GIT_BRLIFETIMESBYEACH_GRAPH_OUTPUT##*.}"; exit 2;;
    esac

    local graphTitle="Branch duration / extent by ${who:?}"
    if [ "$isNetCommits" ]; then
    	graphTitle+=" (excluding merge)"
	local durationLabel="from creation stopping short of the merge"
    else
    	graphTitle+=" (including merge)"
	local durationLabel="from creation to merge"
    fi
    local hasTerm=; [ -t 1 ] && hasTerm=t
    {
	printf '$data << EOD\n'
	if [ "$hasTerm" ]; then
	    tee >(sampleLines --inline-always --clear --count author --transform-exec field --unbuffered --field-separator $'\t' 1 \; > /dev/tty)
	else
	    cat
	fi
	printf 'EOD\ndata = "$data"\nset terminal %s\n\n' "$terminalSettings"
	printf "graphTitle = '%s'\ndurationLabel = '%s'\n\n" "$graphTitle" "$durationLabel"
	cat -- "${etcDir}/candlestick-setup.gnuplot" "${etcDir}/duration-setup.gnuplot" "${etcDir}/brlifetimesbyeach.gnuplot"
    } | gnuplot --persist
}

brlifetimesbyeach()
{
    GIT_BRLIFETIMESBYEACH_EXIT_STATUS_NO_MERGES=0 \
    GIT_SEGREGATEDUSERCOMMAND_PREFIX_SEPARATOR=$'\t' \
    STATISTICS_SEP=$'\t' \
	git-segregated-user-command "${segregatedusercommandHeaderArgs[@]}" "${segregatedusercommandFilterOptionArgs[@]}" --log-args-for-range --keep-position \
	    "${brlifetimesCommand[@]}" USERFILTER "${logArgs[@]}" "$@"
}

eval "\"\${collector[@]}\"${collector:+ "$@"}" \
    "${collector:+${grapher:+|}}" '"${grapher[@]}"'
