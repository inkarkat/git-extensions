#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--real-branch-only] [--detached-effective-branch [--include-remote-branches]] [--raw] [--remote REMOTE] [<commit>] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print current (local) branch name, tag, or detached commit for HEAD / the passed
<commit>.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --real-branch-only	Abort with an error if no ordinary branch is checked
			out.
    --detached-effective-branch
			If there's a (not necessarily the only) local branch
			for the detached commit, print that one instead of the
			hash.
    --include-remote-branches
			Also consider remote (only REMOTE when --remote is
			passed) branches if no local one exists.
    --raw		Avoid embellishments on tags or detached commits (so
			that the result can be passed to other Git commands as a
			revision).
    --remote REMOTE	Prepend REMOTE to the found branch / tag.
HELPTEXT
}

isRealBranchOnly=
isDetachedEffectiveBranch=
isRemoteBranch=
tagEmbellishment='(tag: %s)'
detachedBranchEmbellishment='(%s)'
detachedEmbellishment='(%s...)'
remote=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--real-branch-only)
			shift; isRealBranchOnly=t;;
	--detached-effective-branch)
			shift; isDetachedEffectiveBranch=t;;
	--include-remote-branches)
			shift; isRemoteBranch=t;;
	--raw)		shift; tagEmbellishment='%s'; detachedBranchEmbellishment='%s'; detachedEmbellishment='%s';;
	--remote)	shift; remote="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
case $# in
    0)	commit='HEAD';;
    1)	commit="$1"; shift;;
    *)	printUsage "$0" >&2
	exit 2
	;;
esac

getEffectiveBranch()
{
    effectiveBranch="$(git name-rev --name-only --exclude 'refs/tags/*' --exclude 'refs/remotes/*' --no-undefined "$commit" 2>/dev/null)" && \
	git-existsbr -- "$effectiveBranch"
}

getEffectiveRemoteBranch()
{
    typeset -a remoteExcludeArgs=()
    [ -z "$remote" ] || for definedRemote in $(git remote)
    do
	[ "$definedRemote" = "$remote" ] && continue
	remoteExcludeArgs+=("--exclude=refs/remotes/${definedRemote}/*")
    done

    effectiveBranch="$(git name-rev --name-only --exclude 'refs/tags/*' "${remoteExcludeArgs[@]}" --no-undefined "$commit" 2>/dev/null)" || return $?

    effectiveBranch="${effectiveBranch#remotes/}"
    git-existsbr -- "$effectiveBranch"
}

if branch=$(git symbolic-ref "$commit" 2>/dev/null); then
    printf '%s\n' "${remote}${remote:+/}${branch##refs/heads/}"
elif [ "$isDetachedEffectiveBranch" ] \
    && getEffectiveBranch --exclude 'refs/remotes/*'
then
    printf "${detachedBranchEmbellishment}\\n" "${remote}${remote:+/}${effectiveBranch}"
elif [ "$isDetachedEffectiveBranch" ] && [ "$isRemoteBranch" ] \
    && getEffectiveRemoteBranch
then
    printf "${detachedBranchEmbellishment}\\n" "$effectiveBranch"
elif tags=$(git tag --list --points-at "$commit" 2>/dev/null) && [ -n "$tags" ]; then
    if [ "$isRealBranchOnly" ]; then
	printf >&2 'ERROR: Checked out tag %s\n' "${tags//
/, }"
	exit 1
    fi

    if [ "$tagEmbellishment" == '%s' ]; then
	# Only print the first tag.
	printf "${tagEmbellishment}\\n" "${remote}${remote:+/}${tags%%
*}"
    else
	printf "${tagEmbellishment}\\n" "${remote}${remote:+/}${tags//
/, tag: }"
    fi
elif detached=$(git rev-parse --short "$commit" 2>/dev/null); then
    if [ "$isRealBranchOnly" ]; then
	printf >&2 'ERROR: Detached checkout of %s\n' "$detached"
	exit 1
    fi
    printf "${detachedEmbellishment}\\n" "$detached"
else
    # Re-execute command to obtain the original error message.
    git symbolic-ref "$commit"
fi
