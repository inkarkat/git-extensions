#!/bin/bash
set -o noglob -o pipefail

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly libDir="${projectDir}/lib"
source "${libDir}/logArgParser.sh" || exit 3

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--revision REVISION] [--author=<pattern>|--committer=<pattern> ...] [--no-range|--with-range RANGE|--last-only] [--one-more|--one-more-output|--one-more-command GIT-COMMAND2|^[1|2] [--one-more-with-padding] [--one-more-only-to-terminal] [--log-args-for-range|--log-args-only-for-range] [--files-for-range|--files-for-command] [--except-last] ... [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [... --author=<pattern>|--committer=<pattern> [-r|--revision REVISION] ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... RANGE ... --author=<pattern>|--committer=<pattern> [-r|--revision REVISION] ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [... --author=<pattern>|--committer=<pattern> [-r|--revision REVISION] ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [... --author=<pattern>|--committer=<pattern> [-r|--revision REVISION] ...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print / execute GIT-COMMAND with a revision range starting from HEAD / the
passed REVISION / the most recent revision from the passed author / committer(s)
[starting from the passed REVISION] and including all consecutive commits done
by the passed author(s) / committer(s) / the author (+ committer if different)
from the start revision
- appended
- replacing RANGE argument(s) anywhere
- replacing RANGE in the following GIT-COMMAND and -(N-1) arguments
- replacing RANGE in the following +(N) arguments and appending those
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --no-range		Only use the earliest consecutive commit from the passed
			author.
    --with-range ...	Use ... instead of .. as the range specifier.
    --last-only		Only use the latest commit from the passed author.
    --one-more		Include the commit preceding the author's commit.
    --log-args-for-range
			All GIT-COMMAND log arguments should also be used when
			determining the authors.
    --log-args-only-for-range
			All GIT-COMMAND log arguments should exclusively be used
			when determining the authors but not passed to
			GIT-COMMAND.
    FILE arguments by default are both used to determine the revision range and
    passed to GIT-COMMAND.
    --files-for-range	Only use FILE arguments to determine the revision range,
			do not pass them to GIT-COMMAND.
    --files-for-command Pass FILE arguments only to GIT-COMMAND, do not use them
			to determine the revision range.
    --except-last	The very last argument is special and should not be
			parsed as log-args or FILE(s).
HELPTEXT
}

revision=
typeset userFilterArgs=()
isWithRange=t
typeset -a specialLastArg=()
typeset otherArgs=()
typeset -a logArgs=()
isLogArgsForRange=
isLogArgsForCommand=t
isFilesForRange=t
isFilesForCommand=t
unset files
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	# Need to parse off --author|--committer from anywhere first; these here select
	# the user and do not filter commits by author.
	# Same for --revision to determine the start revision.
	--revision|-r)	if [ "$2" = RANGE -o -n "$revision" ]; then
			    otherArgs+=("$1" "$2"); shift; shift
			else
			    shift; revision="${1:?}"; shift
			fi
			;;
	--author|--committer)
			userFilterArgs+=("$1" "$2"); shift; shift;;
	--author=*|--committer=*)
			userFilterArgs+=("$1"); shift;;

	--no-range)	otherArgs+=("$1"); shift; isWithRange=;;

	--log-args-for-range)
			shift; isLogArgsForRange=t;;
	--log-args-only-for-range)
			shift; isLogArgsForRange=t; isLogArgsForCommand=;;
	--files-for-range)
			shift; isFilesForCommand=;;
	--files-for-command)
			shift; isFilesForRange=;;
	--except-last)
			shift
			if [ $# -gt 0 ]; then
			    specialLastArg=("${!#}")
			    set -- "${@:1:$(($#-1))}"
			fi
			;;
	--)		shift
			# Only capture files after the last -- (to support intermediate wrapping GIT-COMMAND(s)).
			if contains -- "$@"; then
			    otherArgs+=(--)
			else
			    typeset -a files=("$@")
			    set --
			    break
			fi
			;;
	*)		if { [ "$isLogArgsForRange" ] || [ ! "$isLogArgsForCommand" ]; } \
			    && { countLogArgs '' "$1"; argCount=$?; [ $argCount -gt 0 ]; }
			then
			    while ((argCount-- > 0))
			    do
				logArgs+=("$1")
				[ ! "$isLogArgsForCommand" ] || otherArgs+=("$1")
				shift
			    done
			else
			    otherArgs+=("$1")
			    shift
			fi
			;;
    esac
done
set -- "${otherArgs[@]}"
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    while [ $# -gt 0 ]
    do
	lastArg="${!#}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	set -- "${@:1:$(($#-1))}"
    done
fi
: ${revision:=HEAD}

logAndEscape()
{
    git log --max-count 1 "$@"  "$revision" ${isFilesForRange:+-- "${files[@]}"} \
	| sed -e 's/[][\$*.^]/\\&/g'
}

if [ ${#userFilterArgs[@]} -eq 0 ]; then
    author="$(logAndEscape --pretty=format:'%aN <%aE>')" || exit $?
    committer="$(logAndEscape --pretty=format:'%cN <%cE>')" || exit $?
    userFilterArgs+=(--author "$author")
    [ "$author" = "$committer" ] || userFilterArgs+=(--committer "$committer")
else
    revision="$(git log --max-count 1 --pretty=tformat:%H "${userFilterArgs[@]}" ${isLogArgsForRange:+"${logArgs[@]}"} "$revision" ${isFilesForRange:+-- "${files[@]}"})"
    if [ -z "$revision" ]; then
	echo >&2 'Could not find a commit from those user(s).'
	exit 1
    fi
fi

< <(diff --unchanged-line-format= --old-line-format='%L' --new-line-format= -- \
    <(git log --first-parent --pretty=tformat:%H "$revision" ${isLogArgsForRange:+"${logArgs[@]}"} ${isFilesForRange:+-- "${files[@]}"}) \
    <(git log --first-parent --pretty=tformat:%H "${userFilterArgs[@]}" "$revision" ${isLogArgsForRange:+"${logArgs[@]}"} ${isFilesForRange:+-- "${files[@]}"}) # Fortunately, "git log <revision> --follow -- <path>" also works; else, we would have to split logArgs into options and path arguments.
) IFS=$'\n' read -r firstDifferentRevision

[ "$isWithRange" ] || revision=''   # Prevent "ERROR: --end-revision cannot be combined with --no-range!"; we don't need the end revision, as --no-range drops that, anyway.

exec git-rev-range --revision "$firstDifferentRevision" ${revision:+--end-revision "$revision"} ${isLogArgsForCommand:+"${logArgs[@]}"} "$@" ${isFilesForCommand:+${files:+--} "${files[@]}"} "${specialLastArg[@]}"
