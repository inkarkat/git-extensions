#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
${gitCommand:-Execute GIT-COMMAND} where text or /regexp/ was added or removed (i.e. those
filepairs whose preimage and postimage have different number of occurrences of
the text).
With --more also log where lines were modified where text or /regexp/ just
appears (without necessarily modifying text or /regexp/ itself).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "${gitCommand:-GIT-COMMAND} [--more] [--unique] [<log-options>] [<since>..<until>] [[--] <path>...] text|/regexp/ [-?|-h|--help]"
    printf 'Usage: %q %s\n' "$(basename "$1")" "${gitCommand:-GIT-COMMAND} [--more] [--unique] [<log-options>] [<since>..<until>] --grep=<pattern> [[--] <path>...]"
}

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi
gitCommand="$1"; shift

isMore=
isUnique=
typeset -a args=()
typeset -a grepPatterns=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--more)		shift; isMore=t;;
	--unique)	shift; isUnique=t;;
	--grep)		shift; grepPatterns+=("$1"); shift;;
	--grep=*)	grepPatterns+=("${1#--grep=}"); shift;;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

if [ ${#grepPatterns[@]} -eq 0 ]; then
    # The last argument is the text or /regexp/.
    lastArg="${!#}"; set -- "${@:1:$(($#-1))}"
    case "$lastArg" in
	# Check for no arguments given to findlc, findlogv aliases.
	-p|--name-status|--date=relative)
	    printUsage "$0" >&2
	    exit 2
	    ;;
    esac

    typeset -a pickaxeArgs=("-S$lastArg")
    searchRegexp="$(printf '%s' "$lastArg" | sed -ne 's/^\([^a-zA-Z0-9]\)\(.*\)\1$/\2/p')" # It's a regexp when enclosed in /.../ or other identical non-alphanumeric characters.
    if [ "$isMore" ]; then
	if [ -z "$searchRegexp" ]; then
	    # There's no -G<string>, only -G<regex>, so we need to emulate literal
	    # grepping by escaping the (extended) POSIX regexp.
	    searchRegexp="$(printf %s "$lastArg" | sed -e 's/[][\$*+?{}.|()^]/\\&/g')"
	fi
	pickaxeArgs=("-G$searchRegexp")
    else
	if [ -n "$searchRegexp" ]; then
	    pickaxeArgs=("-S$searchRegexp" '--pickaxe-regex')
	fi
    fi
else
    if [ "$isMore" ]; then
	pickaxeArgs=("${grepPatterns[@]/#/-G}")
    else
	pickaxeArgs=("${grepPatterns[@]/#/-S}" '--pickaxe-regex')
    fi
fi

if [ "$isUnique" ]; then
    typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
    git-wrapper $gitCommand "${pickaxeArgs[@]}" "$@" \
	| eval 'sort --unique' "${pager:+|}" '"${pager[@]}"'
else
    exec git-wrapper $gitCommand "${pickaxeArgs[@]}" "$@"
fi
