#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Switch or create branches.
Can also check out corresponding branches in submodules with --submodules
(queried ones with --queried-submodules, recursively via
--submodules-recursive).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[(--submodules|--queried-submodules) [--submodules-recursive]] [<checkout-args> ...] [-?|-h|--help]'
}

isSubmoduleCheckout=
subcobrInteractivityArg=
typeset -a subcobrArgs=()
typeset -a checkoutArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--submodules)	shift; isSubmoduleCheckout=t; subcobrInteractivityArg='--all';;
	--queried-submodules)
			shift; isSubmoduleCheckout=t; subcobrInteractivityArg='--query';;
	--submodules-recursive)
			shift; subcobrArgs+=(--recursive);;
	--)		checkoutArgs+=("$1"); shift; break;;
	*)		checkoutArgs+=("$1"); shift;;
    esac
done

previousBranchName="$(git-brname --real-branch-only 2>/dev/null)"

eval "typeset -a gitConfigArgs=($GIT_CONFIG_ARGS)"
command git "${gitConfigArgs[@]}" checkout "${checkoutArgs[@]}" "$@" || exit $?

if [ "$isSubmoduleCheckout" ]; then
    git-wrapper "${GIT_CHECKOUT_SUBMODULES_COMMAND:-subcobr}" "${subcobrInteractivityArg:?}" "${subcobrArgs[@]}" || exit $?
fi

currentBranchName="$(git-brname --real-branch-only 2>/dev/null)"
if [ -n "$currentBranchName" -a "$previousBranchName" != "$currentBranchName" ]; then
    eval "$GIT_CHECKOUT_BRANCH_POST_COMMAND"
fi
