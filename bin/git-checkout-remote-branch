#!/bin/bash
shopt -qs extglob

: ${GIT_CHECKOUT_SUBMODULES_COMMAND:=subcoremotebr}; export GIT_CHECKOUT_SUBMODULES_COMMAND # Check out remote branches in submodules (unless overridden).

printUsage()
{
    cat <<HELPTEXT
Checkout passed <remote-branch>, resetting an existing local branch to the
remote, tracking it if it doesn't yet exist locally, and ensuring that an
existing tracked branch doesn't contradict the request.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--gui|--terminal|--none] [--submodule ignore|yes|recurse] [(--submodules|--queried-submodules) [--submodules-recursive]] [<checkout-args> ...] <remote-branch> [-?|-h|--help]'
}
logArg=
submoduleHandling=recurse
typeset -a logDeltaArgs=(--submodule recurse)
isDetachedCheckout=
typeset -a checkoutArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--@(gui|terminal|none))
			logArg="$1"; shift;;
	--submodule)	logDeltaArgs+=("$1" "$2")
			submoduleHandling="$2"
			shift; shift
			;;
	--)		checkoutArgs+=("$1"); shift; break;;
	--detach)	checkoutArgs+=("$1"); shift; isDetachedCheckout=t;;
	*)		checkoutArgs+=("$1"); shift;;
    esac
done
set -- "${checkoutArgs[@]}" "$@"
if [ $# -eq 0 ]; then
    echo 'ERROR: No <remote-branch> passed!'
    echo
    printUsage "$0"
    exit 2
fi >&2
remoteBranch="${!#}"; [ $# -eq 0 ] && set -- || set -- "${@:1:$(($#-1))}"
remote="${remoteBranch%%/*}"
branch="${remoteBranch#*/}"
if [ -z "$remote" -o -z "$branch" ]; then
    printf 'ERROR: Not a <remote-branch>: %s\n' "$remoteBranch"
    exit 2
fi >&2

record=
if git-existsbr -- "$branch"; then
    trackedRemoteBranch="$(git-tracks "$branch" 2>/dev/null)"
    if [ -z "$trackedRemoteBranch" ]; then
	: # Fine; we're tracking nothing yet.
    elif [ "$trackedRemoteBranch" = "$remoteBranch" ]; then
	: # Fine; we're already tracking the same remote branch.
    else
	trackedRemote="${trackedRemoteBranch%%/*}"
	trackedBranch="${trackedRemoteBranch#*/}"
	if [ "$trackedBranch" != "$branch" ]; then
	    printf >&2 'ERROR: An existing local branch %s is already tracking a differently named remote branch %s; will not switch to %s.\n' "$branch" "$trackedRemoteBranch" "$remoteBranch"
	    exit 1
	elif [ "$trackedRemote" != "$remote" ]; then
	    printf >&2 'Note: The local branch is already tracking the corresponding branch in %s.\n' "$trackedRemote"
	fi
    fi

    if git-equals "$branch" "$remoteBranch"; then
	if [ "$(git brname --real-branch-only 2>/dev/null)" = "$branch" ]; then
	    printf >&2 '%s is up-to-date with %s and already checked out.\n' "$branch" "$remoteBranch"
	    exit 99
	else
	    printf >&2 '%s is already up-to-date with %s.\n' "$branch" "$remoteBranch"
	    exec git-wrapper checkout "$@" "$branch"
	fi
    fi

    [ "$logArg" = --none ] || record="$(git-logdelta $logArg "${logDeltaArgs[@]}" --branch "$branch" --record)"

    typeset -a branchArgs=(-B "$branch"); [ "$isDetachedCheckout" ] && branchArgs=()
    git-wrapper checkout "$@" "${branchArgs[@]}" "$remoteBranch" || exit $?
else
    if [ "$logArg" != --none ]; then
	# Show the log of the entire branch as this is a new local checkout.
	branchBase="$(git brbase --branch "$remoteBranch" 2>/dev/null)"
	[ -n "$branchBase" ] && record="$(git-logdelta $logArg "${logDeltaArgs[@]}" --branch "$branchBase" --record)"
    fi

    typeset -a branchArgs=(--track -b "$branch"); [ "$isDetachedCheckout" ] && branchArgs=()
    git-wrapper checkout "$@" "${branchArgs[@]}" "$remoteBranch" || exit $?
fi
[ -z "$record" ] || git-logdelta $logArg "${logDeltaArgs[@]}" --from-record "$record"
[ "$submoduleHandling" = ignore ] || ! GIT_SUBMODULEUNINITIALIZED_MESSAGE='Warning: Uninitialized submodule(s) found:' git-submodule-uninitialized --print --recursive
