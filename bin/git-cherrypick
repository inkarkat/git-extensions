#!/bin/bash
set -o pipefail
shopt -qs extglob

readonly INCLUDED_TAGS_CONFIG_KEY='cherrypick.includedTags'

printUsage()
{
    cat <<HELPTEXT
Apply the changes introduced by some existing commits.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<cherry-pick-args> ...] (<ref>|:/<pattern> [[--] FILE|DIR] ...) [-?|-h|--help]'
}

gitInWorkingCopy()
{
    local workingCopyFilespec="${1?}"; shift
    git ${workingCopyFilespec:+inside} "$@" ${workingCopyFilespec:+-- "$workingCopyFilespec"}
}

typeset -a cherrypickArgs=()
isSkipCommit=t
typeset -a applyArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--commit)	shift; isSkipCommit=;;

	-+([3Rvq]))	applyArgs+=("$1"); shift;;
	--@(no-3way|3way|reverse|reject|unidiff-zero|no-add|allow-binary-replacement|binary|ignore-space-change|ignore-whitespace|verbose|quiet))
			applyArgs+=("$1"); shift;;
	-C)		applyArgs+=("$1" "${2?}"); shift; shift;;
	-C+([0-9]))	applyArgs+=("$1"); shift;;
	--@(exclude|include|whitespace|directory))
			applyArgs+=("$1" "${2?}"); shift; shift;;
	--@(exclude|include|whitespace|directory)=*)
			applyArgs+=("$1"); shift;;

	--)		cherrypickArgs+=("$1"); shift; break;;
	*)		cherrypickArgs+=("$1"); shift;;
    esac
done
set -- "${cherrypickArgs[@]}" "$@"
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: Must pass <ref>|:/<pattern>.'
    exit 2
fi

isReferencesOtherWorkingCopy=
lastFilespec=
typeset -a filespecs=()
typeset -a commitIds=()
typeset -a contextualizedCommitIds=()
typeset -a contextualizedShortCommitIds=()
lastArg="${!#}"
while [ -n "$lastArg" ]
do
    if [ "$lastArg" = -- ]; then
	:
    elif [ -e "$lastArg" ]; then
	lastFilespec="$lastArg"
	isReferencesOtherWorkingCopy=t
    elif commitId="$(gitInWorkingCopy "$lastFilespec" commitid --no-error -- "$lastArg")"; then
	filespecs=("$lastFilespec" "${filespecs[@]}")
	commitIds=("$commitId" "${commitIds[@]}")

	if [ "$isSkipCommit" ]; then
	    repoContext="$([ -z "$lastFilespec" ] || gitInWorkingCopy "$lastFilespec" userrepo 2>/dev/null)"
	    contextualizedCommitIds=("${repoContext}${repoContext:+@}${commitId}" "${contextualizedCommitIds[@]}")

	    readarray -t includedGlobs < <(gitInWorkingCopy "$lastFilespec" config --get-all "$INCLUDED_TAGS_CONFIG_KEY")
	    if [ ${#includedGlobs[@]} -gt 0 ] \
		&& readarray -t tags < <(gitInWorkingCopy "$lastFilespec" tag --points-at "$commitId" --list) \
		&& [ ${#tags[@]} -gt 0 ] \
		&& uniqueMatch="$(globmatch --values --unique-match "${includedGlobs[@]}" -- "${tags[@]}")" \
		&& [ -n "$uniqueMatch" ]
	    then
		# XXX: "git tag --list" already supports globs, but not the GNU glob extensions.
		# My globmatch can also directly assert a single unique match for us.
		shortCommitRef="$uniqueMatch"
	    else
		shortCommitRef="$(gitInWorkingCopy "$lastFilespec" commitid --short -- "$lastArg")"
	    fi
	    contextualizedShortCommitIds=("${repoContext}${repoContext:+@}${shortCommitRef}" "${contextualizedShortCommitIds[@]}")
	fi
    else
	break
    fi
    [ $# -gt 1 ] || break
    set -- "${@:1:$(($#-1))}"
    lastArg="${!#}"
done
if [ ${#commitIds[@]} -eq 0 ]; then
    printf >&2 'ERROR: No commit found for %s\n' "$lastArg"
    exit 1
fi

if [ "$isSkipCommit" ]; then
    : ${GIT_CHERRYPICK_REFERENCE_REFERRER:=cp.}
    {
	refGlob='+([0-9A-Fa-f])'
	[ ${#includedGlobs[@]} -eq 0 ] || refGlob="@(${refGlob}|$(joinBy '|' "${includedGlobs[@]}"))"
	IFS=$'\n' read -r titleLine
	titleLine="${titleLine% (${GIT_CHERRYPICK_REFERENCE_REFERRER}${GIT_CHERRYPICK_REFERENCE_REFERRER:+ }?(+([^ ])@)${refGlob}*(, +([^ ])@)${refGlob})}"
	remainingLines="$(cat)"
	remainingLines="${remainingLines%%+($'\n')}"
    } < <(
	# Use the original commit's message(s) as the base for committing.
	for ((i = 0; i < ${#commitIds[@]}; i++))
	do
	    gitInWorkingCopy "${filespecs[i]}" lo1 "${commitIds[i]}" \
		| git-trailer-parse --remove
	    echo
	done
    )

    [ "$isReferencesOtherWorkingCopy" ] \
	&& referenceMessage='This relates to commit' \
	|| referenceMessage='cherry picked from commit'

    printf "%s (%s%s)\\n%s\\n\\n(${referenceMessage} %s)\\n" \
	    "$titleLine" \
	    "${GIT_CHERRYPICK_REFERENCE_REFERRER}${GIT_CHERRYPICK_REFERENCE_REFERRER:+ }" \
	    "$(joinBy ', ' "${contextualizedShortCommitIds[@]}")" \
	    "$remainingLines" \
	    "$(joinBy --last-separator ' and ' ', ' "${contextualizedCommitIds[@]}")" \
	| git-committemplate --save
fi


if [ "$isReferencesOtherWorkingCopy" ]; then
    nocommitForeign()
    {
	local filespec="${1:?}"; shift
	local commit="${1:?}"; shift

	gitInWorkingCopy "$filespec" git show --patch "$commit" \
	    | git apply --index "${applyArgs[@]}"
    }

    commitForeign()
    {
	local filespec="${1:?}"; shift
	local commit="${1:?}"; shift

	gitInWorkingCopy "$filespec" git format-patch --stdout "${commit}^..HEAD" \
	    | git am "${applyArgs[@]}"
    }

    for ((i = 0; i < ${#commitIds[@]}; i++))
    do
	${isSkipCommit:+no}commitForeign "${filespecs[i]}" "${commitIds[i]}" || exit $?
    done
else
    exec git cherry-pick ${isSkipCommit:+--no-commit} "${commitIds[@]}"
fi
