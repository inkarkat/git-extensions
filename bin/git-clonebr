#!/bin/bash

: ${GIT_CLONEBR_SEPARATOR=-}

printUsage()
{
    cat <<HELPTEXT
Clone the current / passed branch by appending ${GIT_CLONEBR_SEPARATOR}1 (${GIT_CLONEBR_SEPARATOR}2, etc.) at the end of the
branch name and switch to it (unless --no-checkout is given).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-checkout] [-f|--force] [--] [<branch>] [-?|-h|--help]'
}
action=checkoutbranch
typeset -a actionArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-checkout)	shift; action=createbranch;;
	--force|-f)	actionArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
case $# in
    0)	branch="$(git-brname --real-branch-only)" || exit $?;;
    1)	branch="$1"; shift

	remoteCandidate="${branch%%/*}"
	git-existsremote "$remoteCandidate" && \
	    branch="${branch#*/}"
	;;
    *)	printUsage "$0" >&2
	exit 2
esac

# Handle cloning an existing clone.
[[ "$branch" =~ ^(.+)"${GIT_CLONEBR_SEPARATOR}"[[:digit:]]+$ ]] && \
    branch="${BASH_REMATCH[1]}"

let num=1
while newBranch="${branch}${GIT_CLONEBR_SEPARATOR}${num}" && git-existsbr "$newBranch"
do
    let num+=1
done
GIT_CREATEBRANCH_WHAT='Clone' \
    exec git-wrapper $action "${actionArgs[@]}" -b "$newBranch" "$branch"
