#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${GIT_CLONEBR_SEPARATOR=-}

printUsage()
{
    git-localbrdo --help 2>&1 | sed \
	-e "1s#^.*\$#Check out all branches that can be obtained from the current / passed branch by appending ${GIT_CLONEBR_SEPARATOR}1 (${GIT_CLONEBR_SEPARATOR}2, etc.) at the end of the branch name one by one and execute \"git SIMPLECOMMAND\" and/or COMMANDLINE on each branch.#" \
	-e '2b removeFirstParagraphLoop' \
	-e '/^ *\[--include-current\] \[--include-master\] \[--include-base\] \[--include-all\] \[--branches "<branch1> \.\.\."\]/b removeOptionLoop' \
	-e '/^ *--no-pager/i\
    --exlude-base	Do not include the base branch (the branch without the\
			${GIT_CLONEBR_SEPARATOR}1 suffix).\
    --reverse		Iterate from highest offset to lowest.\
    --start-branch|-S N	Only consider the first committed N branches.' \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*git-localbrdo /\1\2'"$(basename "$1")"' [-b|--branch BRANCH] [--exclude-base] [--reverse] [--start-branch|-S N] /; s/\[--include-current\] \[--include-master\] \[--include-base\] \[--include-all\] \[--branches "<branch1> \.\.\."\]//; }' \
	-e '/^Example:$/N' -e '/\(^\|\n\)Example: */{ s/\(^\|\n\)\(Example: *\)\?git-localbrdo .*/\1\2'"$(basename "$1") -n /; }" \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop; }' \
	-e b -e :removeOptionLoop -e '{ /\n *\[--include-current\] \[--include-master\] \[--include-base\] \[--include-all\] \[--branches "<branch1> \.\.\."\][^\n]*$/{ N; b removeOptionLoop; }; /\n *--[^\n]*$\|\n[^	 ]\|\n$/{ s/^\(.*\n\)\?//; b; }; N; b removeOptionLoop; }'
}

isReverse=
branchStartNum=
typeset -a clonedbranchesArgs=()
typeset -a localbrdoArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--branch|-b)	clonedbranchesArgs+=("$1" "${2:?}"); shift; shift;;
	--exclude-base) clonedbranchesArgs+=("$1"); shift;;
	--reverse)	shift; isReverse=t;;
	--start-branch|-S)
			shift; branchStartNum="${1:?}"; shift;;
	--)		localbrdoArgs+=("$1"); shift; break;;
	*)		localbrdoArgs+=("$1"); shift;;
    esac
done

readarray -t branches < <(eval 'git-clonedbranches "${clonedbranchesArgs[@]}"' "${isReverse:+| tac}"; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
[ ${branches[-1]} -ne 0 ] && exit ${branches[-1]}
unset 'branches[-1]'; [ -z "${branches[-1]}" ] && unset 'branches[-1]'

if [ -n "$branchStartNum" ]; then
    typeset -a selectedBranches=("${branches[@]:$((branchStartNum + 1))}")
    if [ ${#selectedBranches[@]} -eq 0 ]; then
	if [ ${#branches[@]} -eq 1 ]; then
	    branchesPlural=
	    branchesAuxiliaryVerb=is
	else
	    branchesPlural=es
	    branchesAuxiliaryVerb=are
	fi
	printf >&2 'ERROR: There %s only %d cloned branch%s.\n' "$branchesAuxiliaryVerb" ${#branches[@]} "$branchesPlural"
	exit 99
    fi
    branches=("${selectedBranches[@]}")
fi

exec git-localbrdo --branches "${branches[*]}" "${localbrdoArgs[@]}" "$@"
