#!/bin/bash

: ${GIT_COMMIT_SHOW_REUSE=t}
: ${GIT_COMMIT_SHOW_REMOTE=t}
: ${GIT_BLAME_IGNORE_REVS_FILE=.git-blame-ignore-revs}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, they can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-trailer-add] [--skip-blame] [COMMIT-ARGS ...] [--] [<path> ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Record changes to the repository.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --no-trailer-add	Do not automaticallly add commit messge trailers
			configured in commit.trailer.* or GIT_COMMIT_TRAILER_*
    --skip-blame	Record the commit's hash in a $GIT_BLAME_IGNORE_REVS_FILE
			(which needs to be committed separately (NOT amended;
			hen-egg problem)) so that those changes are ignored when
			assigning blame.
HELPTEXT
}

case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
esac


if [ "$*" = '--amend --reuse-message=HEAD' -o "$*" = '--amend --reedit-message=HEAD' ] && ! git-staged --quiet; then
    echo >&2 'ERROR: Index is empty; nothing to amend.'
    exit 1
elif [ "$*" = '--all --amend --reuse-message=HEAD' -o "$*" = '--all --amend --reedit-message=HEAD' ] && [ -z "$(git-stfiles 2>/dev/null)" ]; then
    echo >&2 'ERROR: There are no modified files; nothing to amend.'
    exit 1
fi

typeset -a messageDirectArgs=()
typeset -a messageFileArgs=()
typeset -a messageRefArgs=()
hasConflictingWithTemplateArgs=
convertMessageFileArgsToDirectArgs()
{
    [ ${#messageFileArgs[@]} -gt 0 ] || return

    if [ "${messageFileArgs[1]}" = - ]; then
	messageDirectArgs+=(--message "$(</dev/stdin)")
    else
	messageDirectArgs+=(--message "$(<"${messageFileArgs[1]}")")
    fi || exit $?
    messageFileArgs=()
}
typeset -a editArgs=()
typeset -a commitArgs=()
isAddTrailers=t
isSkipBlame=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--message|-m)	convertMessageFileArgsToDirectArgs
			messageDirectArgs+=("$1" "${2?}"); shift; shift
			;;
	--message=*)	convertMessageFileArgsToDirectArgs
			messageDirectArgs+=("$1"); shift
			;;
	--file|-F)	if [ ${#messageDirectArgs[@]} -gt 0 -o ${#messageFileArgs[@]} -gt 0 ]; then
			    # XXX: Git (2.43.0) commit supports multiple -m, but only one -F, and no mix of -m and -F.
			    convertMessageFileArgsToDirectArgs
			    shift
			    if [ "$1" = - ]; then
				messageDirectArgs+=(--message "$(</dev/stdin)")
			    else
				messageDirectArgs+=(--message "$(<"${1:?}")")
			    fi || exit $?
			    shift
			else
			    messageFileArgs+=("$1" "${2?}"); shift; shift
			fi
			;;
	--file=*)	filespec="${1#--file=}"; shift
			if [ ${#messageDirectArgs[@]} -gt 0 -o ${#messageFileArgs[@]} -gt 0 ]; then
			    # XXX: Git (2.43.0) commit supports multiple -m, but only one -F, and no mix of -m and -F.
			    convertMessageFileArgsToDirectArgs
			    shift
			    if [ "$filespec" = - ]; then
				messageDirectArgs+=(--message "$(</dev/stdin)")
			    else
				messageDirectArgs+=(--message "$(<"${filespec:?}")")
			    fi || exit $?
			else
			    messageFileArgs+=(--file "${filespec:?}"); shift; shift
			fi
			;;
	--reedit-message|--reuse-message|-c|-C)
			messageRefArgs+=("$1" "${2?}"); shift; shift;;
	--reedit-message=*|--reuse-message=*|--amend)
			messageRefArgs+=("$1"); shift;;
	--edit|-e|--no-edit)
			editArgs+=("$1"); shift;;
	--fixup)	commitArgs+=("$1" "${2?}"); shift; shift; hasConflictingWithTemplateArgs=t;;
	--fixup=*)	commitArgs+=("$1"); shift; hasConflictingWithTemplateArgs=t;;
	--no-trailer-add)
			shift; isAddTrailers=;;
	--skip-blame)	shift; isSkipBlame=t;;
	--)		commitArgs+=("$1"); shift; break;;
	*)		commitArgs+=("$1"); shift;;
    esac
done

# Extension: If a commit template is available (and no message was given via
# command-line arguments), use it. The default editing behavior is not affected
# by this. In order to avoid accidental pick up of old templates, they have the
# previous commit's ID in their name.
if [ ${#messageDirectArgs[@]} -eq 0 -a ${#messageFileArgs[@]} -eq 0 -a ${#messageRefArgs[@]} -eq 0 ] \
    && [ ! "$hasConflictingWithTemplateArgs" ] \
    && commitTemplateFilespec="$(git-committemplate --get-filespec)"
then
    messageFileArgs+=(--file "$commitTemplateFilespec")
    [ ${#editArgs[@]} -gt 0 ] || editArgs+=(--edit)
fi

# Extension: Automatically add trailers containing system and/or platform information.
# Execute the configured command-line; if there's output (individual lines are
# joined by commas), it's added as the corresponding trailer at the end of the
# commit message. Commands can be configured via (in order of precedence):
# - worktree or local Git configuration commit.trailer.*
# - environment variable GIT_COMMIT_TRAILER_*
# - global or system Git configuration commit.trailer.*
typeset -a trailerArgs=()
[ "$isAddTrailers" ] && for infoType in system platform
do
    infoTrailerVariableName="GIT_COMMIT_TRAILER_${infoType^^}"
    infoTrailerVariable="${!infoTrailerVariableName}"
    infoTrailerConfig="$(git config --get "commit.trailer.${infoType}")"
    if [ -z "$infoTrailerConfig" ] \
	|| [ -z "$(git config --local --get "commit.trailer.${infoType}")" -a -z "$(git config --worktree --get "commit.trailer.${infoType}")" ]
    then
	infoTrailer="${infoTrailerVariable:-$infoTrailerConfig}"
    else
	infoTrailer="$infoTrailerConfig"
    fi

    if [ -n "$infoTrailer" ] \
	&& infoContent="$(eval "$infoTrailer" | joinBy --omit-empty - ', ')" \
	&& [ -n "$infoContent" ]
    then
	trailerArgs+=(--trailer "${infoType}=${infoContent}")
    fi
done

set -- "${messageDirectArgs[@]}" "${messageFileArgs[@]}" "${messageRefArgs[@]}" "${editArgs[@]}" "${trailerArgs[@]}" "${commitArgs[@]}" "$@"

export GIT_COMMIT_CWD="$PWD"
eval "typeset -a gitConfigArgs=($GIT_CONFIG_ARGS)"
command git "${gitConfigArgs[@]}" commit "$@" || exit $?

git-committemplate --clean  # Clean up old commit templates after a successful commit.

if [ "$isSkipBlame" ] \
    && root="$(git rev-parse --show-toplevel)" \
    && longCommitId="$(git-commitid HEAD)"
then
    if [ -n "$GIT_BLAME_IGNORE_REVS_FILE" ]; then
	printf '%s\n' "$longCommitId" >> "${root}/${GIT_BLAME_IGNORE_REVS_FILE}"
	git status --short -- "${root}/${GIT_BLAME_IGNORE_REVS_FILE}"
    else
	echo >&2 'Warning: Ignored --skip-blame because $GIT_BLAME_IGNORE_REVS_FILE is not set.'
    fi
fi

if [ -t 1 ]; then
    : ${GIT_COMMIT_NOTE_PREFIX=[3;36m}
    : ${GIT_COMMIT_NOTE_SUFFIX=[0m}

    if [ "$GIT_COMMIT_SHOW_REUSE" ] \
	&& root="$(git rev-parse --show-toplevel)" \
	&& shortCommitId="$(git-commitid --short HEAD)"
    then
	printf >/dev/tty '%sReuse this commit message via $ git inside lo1 %q -- %s%s\n' "$GIT_COMMIT_NOTE_PREFIX" "$shortCommitId" "${root/#${HOME}\//~\/}" "$GIT_COMMIT_NOTE_SUFFIX"
    fi

    if [ "$GIT_COMMIT_SHOW_REMOTE" ] \
	&& git-existsremote origin \
	&& commitUrl="$(git lourl1)" \
	&& [ -n "$commitUrl" ]
    then
	printf >/dev/tty '%sView this commit in %s: %s%s\n' "$GIT_COMMIT_NOTE_PREFIX" 'origin' "$commitUrl" "$GIT_COMMIT_NOTE_SUFFIX"
    fi

    exit 0  # Don't fail when there's a problem with the additional information; the commit is all that counts.
fi
