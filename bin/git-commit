#!/bin/bash

if [ "$*" = '--amend --reuse-message=HEAD' -o "$*" = '--amend --reedit-message=HEAD' ] && ! git-staged --quiet; then
    echo >&2 'ERROR: Index is empty; nothing to amend.'
    exit 1
elif [ "$*" = '--all --amend --reuse-message=HEAD' -o "$*" = '--all --amend --reedit-message=HEAD' ] && [ -z "$(git-stfiles 2>/dev/null)" ]; then
    echo >&2 'ERROR: There are no modified files; nothing to amend.'
    exit 1
fi

typeset -a messageDirectArgs=()
typeset -a messageFileArgs=()
typeset -a messageRefArgs=()
convertMessageFileArgsToDirectArgs()
{
    [ ${#messageFileArgs[@]} -gt 0 ] || return

    if [ "${messageFileArgs[1]}" = - ]; then
	messageDirectArgs+=(--message "$(</dev/stdin)")
    else
	messageDirectArgs+=(--message "$(<"${messageFileArgs[1]}")")
    fi || exit $?
    messageFileArgs=()
}
typeset -a editArgs=()
typeset -a commitArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--message|-m)	convertMessageFileArgsToDirectArgs
			messageDirectArgs+=("$1" "${2?}"); shift; shift
			;;
	--message=*)	convertMessageFileArgsToDirectArgs
			messageDirectArgs+=("$1"); shift
			;;
	--file|-F)	if [ ${#messageDirectArgs[@]} -gt 0 -o ${#messageFileArgs[@]} -gt 0 ]; then
			    # XXX: Git (2.43.0) commit supports multiple -m, but only one -F, and no mix of -m and -F.
			    convertMessageFileArgsToDirectArgs
			    shift
			    if [ "$1" = - ]; then
				messageDirectArgs+=(--message "$(</dev/stdin)")
			    else
				messageDirectArgs+=(--message "$(<"${1:?}")")
			    fi || exit $?
			    shift
			else
			    messageFileArgs+=("$1" "${2?}"); shift; shift
			fi
			;;
	--file=*)	filespec="${1#--file=}"; shift
			if [ ${#messageDirectArgs[@]} -gt 0 -o ${#messageFileArgs[@]} -gt 0 ]; then
			    # XXX: Git (2.43.0) commit supports multiple -m, but only one -F, and no mix of -m and -F.
			    convertMessageFileArgsToDirectArgs
			    shift
			    if [ "$filespec" = - ]; then
				messageDirectArgs+=(--message "$(</dev/stdin)")
			    else
				messageDirectArgs+=(--message "$(<"${filespec:?}")")
			    fi || exit $?
			else
			    messageFileArgs+=(--file "${filespec:?}"); shift; shift
			fi
			;;
	--reedit-message|--reuse-message|-c|-C)
			messageRefArgs+=("$1" "${2?}"); shift; shift;;
	--reedit-message=*|--reuse-message=*)
			messageRefArgs+=("$1"); shift;;
	--edit|-e|--no-edit)
			editArgs+=("$1"); shift;;
	--)		commitArgs+=("$1"); shift; break;;
	*)		commitArgs+=("$1"); shift;;
    esac
done

# Extension: If a commit template is available (and no message was given via
# command-line arguments), use it. The default editing behavior is not affected
# by this. In order to avoid accidental pick up of old templates, they have the
# previous commit's ID in their name.
if [ ${#messageDirectArgs[@]} -eq 0 -a ${#messageFileArgs[@]} -eq 0 -a ${#messageRefArgs[@]} -eq 0 ] \
    && commitTemplateFilespec="$(git-committemplate --get-filespec)"
then
    messageFileArgs+=(--file "$commitTemplateFilespec")
    [ ${#editArgs[@]} -gt 0 ] || editArgs+=(--edit)
fi

set -- "${messageDirectArgs[@]}" "${messageFileArgs[@]}" "${messageRefArgs[@]}" "${editArgs[@]}" "${commitArgs[@]}" "$@"

export GIT_COMMIT_CWD="$PWD"
eval "typeset -a gitConfigArgs=($GIT_CONFIG_ARGS)"
command git "${gitConfigArgs[@]}" commit "$@" || exit $?

git-committemplate --clean  # Clean up old commit templates after a successful commit.
if [ -t 1 ]; then
    : ${GIT_COMMIT_NOTE_PREFIX=[3;36m}
    : ${GIT_COMMIT_NOTE_SUFFIX=[0m}

    if root="$(git rev-parse --show-toplevel)" && \
	shortCommitId="$(git-commitid --short HEAD)"
    then
	printf >/dev/tty '%sReuse this commit message via $ git inside lo1 %q -- %s%s\n' "$GIT_COMMIT_NOTE_PREFIX" "$shortCommitId" "${root/#${HOME}\//~\/}" "$GIT_COMMIT_NOTE_SUFFIX"
    fi

    if git-existsremote origin && commitUrl="$(git lourl1)" && [ -n "$commitUrl" ]; then
	printf >/dev/tty '%sView this commit in %s: %s%s\n' "$GIT_COMMIT_NOTE_PREFIX" 'origin' "$commitUrl" "$GIT_COMMIT_NOTE_SUFFIX"
    fi

    exit 0  # Don't fail when there's a problem with the additional information; the commit is all that counts.
fi
