#!/bin/bash

if [ "$*" = '--amend --reuse-message=HEAD' -o "$*" = '--amend --reedit-message=HEAD' ] && ! git-staged --quiet; then
    echo >&2 'ERROR: Index is empty; nothing to amend.'
    exit 1
elif [ "$*" = '--all --amend --reuse-message=HEAD' -o "$*" = '--all --amend --reedit-message=HEAD' ] && [ -z "$(git-stfiles 2>/dev/null)" ]; then
    echo >&2 'ERROR: There are no modified files; nothing to amend.'
    exit 1
fi

eval "typeset -a gitConfigArgs=($GIT_CONFIG_ARGS)"
git "${gitConfigArgs[@]}" commit "$@" || exit $?

if [ -t 1 ]; then
    : ${GIT_COMMIT_NOTE_PREFIX=[3;36m}
    : ${GIT_COMMIT_NOTE_SUFFIX=[0m}

    if root="$(git rev-parse --show-toplevel)" && \
	shortCommitId="$(git-commitid --short HEAD)"
    then
	printf >/dev/tty '%sReuse this commit message via $ git inside lo1 %q -- %s%s\n' "$GIT_COMMIT_NOTE_PREFIX" "$shortCommitId" "${root/#${HOME}\//~\/}" "$GIT_COMMIT_NOTE_SUFFIX"
    fi

    if git-existsremote origin && commitUrl="$(git lourl1)" && [ -n "$commitUrl" ]; then
	printf >/dev/tty '%sView this commit in %s: %s%s\n' "$GIT_COMMIT_NOTE_PREFIX" 'origin' "$commitUrl" "$GIT_COMMIT_NOTE_SUFFIX"
    fi

    exit 0  # Don't fail when there's a problem with the additional information; the commit is all that counts.
fi
