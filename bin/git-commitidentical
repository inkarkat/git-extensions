#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Commit directly (without further edits) with the same commit message as <commit>
[from the working copy that FILE or DIR resides in].
This is similar to git commit -c|--reedit-message|-C|--reuse-message, but
doesn't include authorship and timestamp as well.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<commit-arguments> ...] <ref>|:/<pattern> [-- FILE|DIR] [-?|-h|--help]'
}

gitInWorkingCopy()
{
    git ${workingCopyFilespec:+inside} "$@" ${workingCopyFilespec:+-- "$workingCopyFilespec"}
}

typeset -a commitArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--edit)		commitArgs+=("$1"); shift;;
	--)		break;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: Must pass <commit>!'
    exit 2
fi
lastArg="${!#}"
workingCopyFilespec=
if [ $# -gt 1 -a -e "$lastArg" -a "${*:(-2):1}" = '--' ]; then
    workingCopyFilespec="$lastArg"
    set -- "${@:1:$(($#-2))}"
    lastArg="${!#}"
fi

commitId="$(gitInWorkingCopy commitid "$lastArg")" || exit $?

commitMessageFilespec="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
cleanup()
{
    rm -f "$commitMessageFilespec" 2>/dev/null
}
[ "$DEBUG" ] || trap 'cleanup' EXIT
gitInWorkingCopy lo1 "$commitId" > "$commitMessageFilespec" || exit $?
if [ ! -s "$commitMessageFilespec" ]; then
    echo >&2 "ERROR: No commit message"
    exit 1
fi

exec git-wrapper commit --file "$commitMessageFilespec" "${commitArgs[@]}" "${@:1:$(($#-1))}"
