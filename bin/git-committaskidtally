#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: git l [<log-options>] [<revision range>] [[--] <path>...] | %q %s\n' "$(basename "$1")" '[--bare] [--no-percentages] [--percentage-threshold N] [-N|--against-total-commits N] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Report counts and percentages of external task IDs at the beginning of the
commit summary from the log input.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --bare		Just print the task IDs themselves in alphabetic order.
    --no-percentages	Just print task IDs and their counts.
    --percentage-threshold N
			Only report counts and percentages if the percentage is
			at least N%; i.e. omit infrequent task IDs.
    --against-total-commits|-N N
			Calculate percentages against N instead of them being
			relative to all commits with keywords.
HELPTEXT
}

typeset -a extractMatchesArgs=()
typeset -a extractMatchesPercentageArgs=(--name-percentages tally-)
matcher=match-count
reportOrder=count-desc
typeset -a extractMatchesTotalArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--bare)		shift; matcher=matches; reportOrder=match-asc;;
	--no-percentages)
			shift; extractMatchesPercentageArgs=();;
	--percentage-threshold)
			shift; extractMatchesArgs+=("--name-percentage-threshold" "${1:?}"); shift;;
	--against-total-commits|-N)
			shift; extractMatchesTotalArgs=(--percentage-total tally- "${1:?}"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

EXTRACTMATCHES_CONCATENATED_PREFIX='' EXTRACTMATCHES_CONCATENATED_SEPARATOR=$'\n' \
EXTRACTMATCHES_COUNT_BEFORE_TEXT=t EXTRACTMATCHES_COUNT_PREFIX='' EXTRACTMATCHES_COUNT_SUFFIX=$'\t' EXTRACTMATCHES_NAME_PERCENTAGES_TEMPLATE=$'\\1\t\\2%' \
    exec extractMatches --to concatenated --report-order "$reportOrder" --summary-only \
	"${extractMatchesArgs[@]}" "${extractMatchesTotalArgs[@]}" "${extractMatchesPercentageArgs[@]}" \
	--$matcher '(^[[:upper:]]+-[[:digit:]]+) ' -r '\1' --name tally \
	"$@"
