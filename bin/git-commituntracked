#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Commit only new files, respecting the ignore patterns.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<commit-arguments> ...] [--] [<path> ...] [-?|-h|--help]'
}
typeset -a gitCommitArgs=()
typeset -a mergeMessageArgs=()
mergeEditMessageArg=
typeset -a paths=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--message|-m|--file|-F)
			mergeMessageArgs+=("$1" "$2"); shift; shift;;
	--edit|-e|--no-edit)
			mergeEditMessageArg="$1"; shift;;
	--)		gitCommitArgs+=("$1"); shift; paths=("$@"); break;;
	*)		gitCommitArgs+=("$1"); shift;;
    esac
done
if [ ${#paths[@]} -eq 0 ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    gitCommitArgs+=("$@")
    while [ ${#gitCommitArgs[@]} -ne 0 ]
    do
	lastArg="${gitCommitArgs[-1]}"
	[ -e "$lastArg" ] || break

	paths=("$lastArg" "${paths[@]}")
	gitCommitArgs=("${gitCommitArgs[@]:0:${#gitCommitArgs[@]}-1}")
    done
fi

readarray -t untrackedFilespecs < <(git ls-files -o --exclude-standard -- "${paths[@]}")
isAlreadyAdded=
if [ ${#untrackedFilespecs[@]} -eq 0 ]; then
    if git diff --quiet --staged --diff-filter=a \
	&& readarray -t untrackedFilespecs < <(git diff --name-only --staged --diff-filter=A) \
	&& [ ${#untrackedFilespecs[@]} -gt 0 ]
    then
	isAlreadyAdded=t
    else
	exit 1
    fi
fi

# "git commit -- <pathspec>" only works with files already under version control
# - we have to go through the index for untracked files.
restoreIndex()
{
    git stash pop --index && echo "Recreated index." || exit $?
}
if [ ! "$isAlreadyAdded" ] && git-staged --quiet; then
    git-stashi || exit $?
    trap restoreIndex EXIT
fi

[ -z "$mergeEditMessageArg" -a ${#mergeMessageArgs[@]} -eq 0 ] && mergeEditMessageArg='--edit'	# Do an interactive edit if nothing has been specified and no message is passed.
if [ ${#mergeMessageArgs[@]} -eq 0 ]; then
    # Synthesize the default merge message if no message [file] given.
    mergeMessageArgs=(--message "$(printf '%s\n' "${untrackedFilespecs[@]}" | linesToArg basename | uniqueStable | joinBy --prefix 'Add ' --truncate-after 7 - ', ')")
fi

[ "$isAlreadyAdded" ] || git add "${untrackedFilespecs[@]}" \
    && git-wrapper commit $mergeEditMessageArg "${mergeMessageArgs[@]}"  "${gitCommitArgs[@]}"
