#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Commit with other author(s) whose "NAME <EMAIL@HOST>" combo(s) are either passed
or selected from all previous committers (via passed AUTHOR-PATTERN(s))
attributed as co-authors / ACTION-BY.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--attribution ACTION-BY] [AUTHOR-PATTERN|NAME EMAIL@HOST|"NAME <EMAIL@HOST>" [...]] [-- <commit-args> ...] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Attribute other author(s) whose "NAME <EMAIL@HOST>" combo(s) are either passed
or selected from all previous committers (via passed AUTHOR-PATTERN(s)) as
co-authors to the last commit.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--attribution ACTION-BY] --amend [AUTHOR-PATTERN|NAME EMAIL@HOST|"NAME <EMAIL@HOST>" [...]] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
RELATED COMMANDS:
- git-coauthor from tj/git-extras appends co-author(s) to the commit message
  (without the selection).
HELPTEXT
}

attribution='Co-authored-by'
isAmend=
typeset -a quietArg=(--quiet)
typeset -a candidateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--attribution)	shift; attribution="${1:?}"; shift;;
	--amend)	shift; isAmend=t; quietArg=();;
	--)		shift; break;;
	*)		if [ $# -ge 2 ] && ! [[ "$1" =~ @ ]] && [[ "$2" =~ ^[^\ ]+@[^\ ]+$ ]]; then
			    candidateArgs+=("$1" "$2"); shift; shift
			else
			    candidateArgs+=("$1"); shift
			fi
			;;
    esac
done

readarray -t attributees < <(git-whois --accept-unknown --select-many "${candidateArgs[@]}")
if [ ${#attributees[@]} -eq 0 ]; then
    echo >&2 'ERROR: No author(s).'
    exit 4
fi

[ "$isAmend" ] || git-wrapper commit "$@" || exit $?

typeset -a paddedArg=(--padded); git lo1 | tail -n 1 | grep --quiet "^[[:upper:]][[:alnum:]-]\+: " && paddedArg=()
IFS=$'\n'
exec git-rewordappend "${quietArg[@]}" "${paddedArg[@]}" --message "${attributees[*]/#/${attribution}: }"
