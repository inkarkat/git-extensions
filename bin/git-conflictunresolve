#!/bin/bash
# Source: https://stackoverflow.com/a/48218000/813602

printUsage()
{
    cat <<HELPTEXT
Bring back merged FILE(s) into their conflicted state.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-a|--all | [--] <path> [...] [-?|-h|--help]'
}

isAll=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--all|-a)	shift; isAll=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

git-ismerging --print-negative-error || exit 1

if [ "$isAll" ]; then
    if [ $# -gt 0 ]; then
	printUsage "$0"
	exit 2
    fi

    # Note: Cannot use git-conflicts here, because after staging they are reported
    # as merged.
    gitDir="$(git rev-parse --git-dir 2>/dev/null)" || exit 3
    readarray -t files < <(git diff --name-only HEAD "$(< "${gitDir}/MERGE_HEAD")")
    if [ ${#files[@]} -eq 0 ]; then
	echo 'ERROR: No staged resolved conflicts.'
	exit 99
    fi
    set -- "${files[@]}"
elif [ $# -eq 0 ]; then
    printUsage "$0"
    exit 2
fi >&2

git checkout --merge -- "$@" \
    && git status -sb
