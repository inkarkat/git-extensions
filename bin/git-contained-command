#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${GIT_CONTAINEDCOMMAND_FALLBACK_PREFIX=(}
: ${GIT_CONTAINEDCOMMAND_FALLBACK_SUFFIX=)}

typeset -a gitCommand=()
printUsage()
{
    local excludeArg='[--exclude GLOB [--exclude ...]]'
    local gitCommandArg=GIT-COMMAND
    if [ ${#gitCommand[@]} -gt 0 ]; then
	gitCommandArg="${gitCommand[-1]}"
	[ "$gitCommandArg" = describe -o -z "$gitCommandArg" ] || excludeArg=''
    fi

    if [ "$gitCommandArg" = describe ]; then
	cat <<HELPTEXT
Show relation to the first tag (also lightweight, used for archiving) [that
matches GLOB(s)] that comes after the passed revision, and thus contains it;
i.e. in which versions this was shipped. (Or fall back to a branch name or the
commit SHA.)
With $gitCommandArg, GREP-ARGS would completely filter those tags and show the
fallback instead, so prefer --exclude here.
HELPTEXT
    elif [ -z "$gitCommandArg" ]; then
	cat <<HELPTEXT
Show relation to the first branch [that matches GLOB(s)] that comes after the
passed revision, and thus contains it. GREP-ARGS would completely filter those
tags, so prefer --exclude here.
HELPTEXT
    else
	cat <<HELPTEXT
Show (only the) first annotated tag (used for official versions etc.) [that
matches GREP-ARGS] that comes after the passed revision, and thus contains it;
i.e. in which versions this was shipped. (Or fall back to a branch name or the
commit SHA.)
HELPTEXT
    fi
    printf 'Usage: %q %s%s%s\n' "$(basename "$1")" "${gitCommandArg}${gitCommandArg:+ }" "${excludeArg}${excludeArg:+ }" '[--include-relation] [GREP-ARGS ...] <commit> [-?|-h|--help]'
    cat <<HELPTEXT
    --include-relation	Keep ancestor information (~3) appended if available.
HELPTEXT
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi
while [ $# -ne 0 ]
do
    case "$1" in
	-c) gitCommand+=("$1" "$2"); shift; shift;;
	*)  gitCommand+=("$1"); shift; break;;
    esac
done
typeset -a gitExcludeArgs=()
isIncludeRelation=
while [ $# -ne 0 ]
do
    case "$1" in
	--exclude)	gitCommand+=("$1" "$2"); gitExcludeArgs+=("$1" "$2"); shift; shift;;
	--include-relation)
			shift; isIncludeRelation=t;;
	*)		break;;
    esac
done
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
if [ $# -eq 0 ]; then
    echo 'ERROR: Must pass <commit>'
    echo
    printUsage "$0"
    exit 2
fi >&2

printResult()
{
    local prefix="${1?}"; shift
    local result="${1:?}"; shift
    local suffix="${1?}"; shift

    if [ "$result" = 'undefined' ]; then
	return 1
    fi

    [ "$isIncludeRelation" ] || result="${result%~+([0-9])}"

    printf '%s%s%s\n' "$prefix" "$result" "$suffix"
}

revision="${!#}"
typeset -a grepArgs=("${@:1:$(($#-1))}")
if [ -n "${gitCommand[0]}" ]; then
    readarray -t containedTags < <(eval 'git "${gitCommand[@]}" --contains "$revision" 2>/dev/null' "${grepArgs:+| grep}" '"${grepArgs[@]}"')
    if [ ${#containedTags[@]} -gt 0 ]; then
	printResult '' "${containedTags[0]}" ''
	exit $?
    fi
fi

# Try local branches first.
containedName="$(git name-rev --name-only --exclude 'refs/tags/*' --exclude 'refs/remotes/*' "${gitExcludeArgs[@]}" "$revision")"
# Fall back to considering remote branches, too.
[ -n "$containedName" ] || \
    containedName="$(git name-rev --name-only --exclude 'refs/tags/*' "${gitExcludeArgs[@]}" "$revision")"
[ -n "$containedName" ] || exit 1

containedName="${containedName#remotes/}"

# If we're only considering branches and we've found such, it's not a fallback.
if [ -z "${gitCommand[0]}" ] && git-existsbr -- "${containedName%~+([0-9])}"; then
    GIT_CONTAINEDCOMMAND_FALLBACK_PREFIX=''
    GIT_CONTAINEDCOMMAND_FALLBACK_SUFFIX=''
fi

printResult "$GIT_CONTAINEDCOMMAND_FALLBACK_PREFIX" "$containedName" "$GIT_CONTAINEDCOMMAND_FALLBACK_SUFFIX"
