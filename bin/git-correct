#!/bin/bash
shopt -qs extglob

: ${GIT_CORRECT_REFERENCE_MESSAGE:=This corrects commit}
: ${GIT_CORRECT_REFERENCE_REFERRER:=after}

printUsage()
{
    cat <<HELPTEXT
Commit as a correction of <commit>(s) [from the working copy that FILE or DIR
resides in] (when it's too late or cumbersome to fixup the existing commit).
This just adds a reference to the prior commit(s) in the commit message (title
and body).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<commit-arguments> ...] (<ref>|:/<pattern> [[--] FILE|DIR] ...) [-?|-h|--help]'
}

gitInWorkingCopy()
{
    local workingCopyFilespec="${1?}"; shift
    git ${workingCopyFilespec:+inside} "$@" ${workingCopyFilespec:+-- "$workingCopyFilespec"}
}

isAmend=
typeset -a commitArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--amend)	commitArgs+=("$1"); shift; isAmend=t
			if ! git-staged --quiet; then
			    # DWIM: Reword the last commit with the reference. A "git amendrelate" with no unstaged changes complained about "nothing to commit, working tree clean", and a separate "git rewordrelate" command (and all br... variants) would be needed. Amending with passed FILE(s) is no use case here, as a trailing FILE is interpreted differently, so this is a safe enhancement that does not interfere with normal use.
			    commitArgs+=(--only)
			fi
			;;
	--)		commitArgs+=("$1"); shift; break;;
	*)		commitArgs+=("$1"); shift;;
    esac
done
set -- "${commitArgs[@]}" "$@"
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: Must pass <ref>|:/<pattern>.'
    exit 2
fi
lastFilespec=
typeset -a filespecs=()
typeset -a commitIds=()
typeset -a contextualizedCommitIds=()
typeset -a contextualizedShortCommitIds=()
lastArg="${!#}"
while [ -n "$lastArg" ]
do
    if [ "$lastArg" = -- ]; then
	:
    elif [ -e "$lastArg" ]; then
	lastFilespec="$lastArg"
    elif commitId="$(gitInWorkingCopy "$lastFilespec" commitid --no-error -- "$lastArg")"; then
	repoContext="$([ -z "$lastFilespec" ] || gitInWorkingCopy "$lastFilespec" userrepo 2>/dev/null)"
	filespecs=("$lastFilespec" "${filespecs[@]}")
	commitIds=("$commitId" "${commitIds[@]}")
	contextualizedCommitIds=("${repoContext}${repoContext:+@}${commitId}" "${contextualizedCommitIds[@]}")
	contextualizedShortCommitIds=("${repoContext}${repoContext:+@}$(gitInWorkingCopy "$lastFilespec" commitid --short -- "$lastArg")" "${contextualizedShortCommitIds[@]}")
    else
	break
    fi
    [ $# -gt 1 ] || break
    set -- "${@:1:$(($#-1))}"
    lastArg="${!#}"
done

commitMessageFilespec="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
cleanup()
{
    rm -f "$commitMessageFilespec" 2>/dev/null
}
[ "$DEBUG" ] || trap 'cleanup' EXIT
{
    IFS=$'\n' read -r titleLine
    titleLine="${titleLine% (${GIT_CORRECT_REFERENCE_REFERRER}${GIT_CORRECT_REFERENCE_REFERRER:+ }?(+([^ ])@)+([0-9A-Fa-f])*(, +([^ ])@)+([0-9A-Fa-f]))}"

    remainingLines="$(grep -v -e "^(${GIT_CORRECT_REFERENCE_MESSAGE} [[:xdigit:]]\\+\\(\\(,\\| and\\) [[:xdigit:]]\\+\\)*)\$")"
    remainingLines="${remainingLines%%+($'\n')}"
} < <(
    if [ "$isAmend" ]; then
	# Use the to-be-amended message, and just add the correction commit ID
	# references.
	git lo1
    else
	# Use the original commit's message(s) as the base for editing.
	for ((i = 0; i < ${#commitIds[@]}; i++))
	do
	    gitInWorkingCopy "${filespecs[i]}" lo1 "${commitIds[i]}"
	    echo
	done
    fi
)
printf "%s (%s%s)\\n%s\\n\\n(${GIT_CORRECT_REFERENCE_MESSAGE} %s)\\n" \
    "$titleLine" \
    "${GIT_CORRECT_REFERENCE_REFERRER}${GIT_CORRECT_REFERENCE_REFERRER:+ }" \
    "$(joinBy ', ' "${contextualizedShortCommitIds[@]}")" \
    "$remainingLines" \
    "$(joinBy --last-separator ' and ' ', ' "${contextualizedCommitIds[@]}")" \
    > "$commitMessageFilespec" || exit $?

exec git-wrapper commit --edit --file "$commitMessageFilespec" "${@:1:$(($#-1))}"
