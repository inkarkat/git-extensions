#!/bin/bash
shopt -qs extglob

: ${GIT_CORRECT_REFERENCE_MESSAGE:=This corrects commit}
: ${GIT_CORRECT_REFERENCE_REFERRER:=after}

printUsage()
{
    cat <<HELPTEXT
Commit as a correction of <commit> [from the working copy that FILE or DIR
resides in] (when it's too late or cumbersome to fixup the existing commit).
This just adds a reference to the prior commit in the commit message (title and
body).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<commit-arguments> ...] <ref>|:/<pattern> [-- FILE|DIR] [-?|-h|--help]'
}

gitInWorkingCopy()
{
    git ${workingCopyFilespec:+inside} "$@" ${workingCopyFilespec:+-- "$workingCopyFilespec"}
}

isAmend=
typeset -a commitArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--amend)	commitArgs+=("$1"); shift; isAmend=t;;
	--)		commitArgs+=("$1"); shift; break;;
	*)		commitArgs+=("$1"); shift;;
    esac
done
set -- "${commitArgs[@]}" "$@"
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: Must pass <commit>!'
    exit 2
fi
lastArg="${!#}"
workingCopyFilespec=
repoContext=
if [ $# -gt 1 -a -e "$lastArg" -a "${*:(-2):1}" = '--' ]; then
    workingCopyFilespec="$lastArg"
    repoContext="$(gitInWorkingCopy userrepo 2>/dev/null)"
    set -- "${@:1:$(($#-2))}"
    lastArg="${!#}"
fi

commitId="$(gitInWorkingCopy commitid "$lastArg")" || exit $?
shortCommitId="$(gitInWorkingCopy commitid --short "$lastArg")" || exit $?

commitMessageFilespec="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
cleanup()
{
    rm -f "$commitMessageFilespec" 2>/dev/null
}
[ "$DEBUG" ] || trap 'cleanup' EXIT
{
    IFS=$'\n' read -r titleLine
    titleLine="${titleLine% (${GIT_CORRECT_REFERENCE_REFERRER}${GIT_CORRECT_REFERENCE_REFERRER:+ }?(+([^ ])@)+([0-9A-Fa-f]))}"

    remainingLines="$(grep -v -e "^(${GIT_CORRECT_REFERENCE_MESSAGE} [[:xdigit:]]\\+)\$")"
    remainingLines="${remainingLines%%+($'\n')}"
} < <(
    if [ "$isAmend" ]; then
	# Use the to-be-amended message, and just add the correction commit ID
	# references.
	git lo1
    else
	# Use the original commit's message as the base for editing.
	gitInWorkingCopy lo1 "$commitId"
    fi
)
printf "%s (%s%s)\\n%s\\n\\n(${GIT_CORRECT_REFERENCE_MESSAGE} %s)\\n" \
    "$titleLine" \
    "${GIT_CORRECT_REFERENCE_REFERRER}${GIT_CORRECT_REFERENCE_REFERRER:+ }" \
    "${repoContext}${repoContext:+@}${shortCommitId}" \
    "$remainingLines" \
    "${repoContext}${repoContext:+@}${commitId}" \
    > "$commitMessageFilespec" || exit $?

exec git-wrapper commit --edit --file "$commitMessageFilespec" "${@:1:$(($#-1))}"
