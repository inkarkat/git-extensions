#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Create (and track) local branches for all remote branches (within <remote>,
matching <pattern>).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet] [<remote>] [<pattern>] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
    --stashed)		shift;;
    *)			readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"
			exec git-autostash "${scriptName#git-}" --stashed "$@"
			;;
esac

isQuiet=
case "$1" in
    --quiet|-q)		shift; isQuiet=t;;
esac
remoteFilter=
branchPattern="$1"
if [ -n "$1" ] && git-existsremote "$1"; then
    remoteFilter="| grep -e ' ${1}/'"
    branchPattern="$2"
fi
[ -n "$branchPattern" ] && branchFilter="| grep -e '$branchPattern'"


printMessage()
{
    [ "$isQuiet" ] || echo >&2 "$@"
}

readonly orig=$(git-orig-ref)
hadOne=
status=0
for remote in $(eval "git branch --remotes | grep -v '/$(git-mbr)\$' $remoteFilter $branchFilter")
do
    branch=${remote##*/}
    if git-existsbr -- "$branch"; then
	printMessage "Branch $branch already exists."
    else
	hadOne=t
	git checkout --track "$remote" || status=1
    fi
done
if [ "$hadOne" ]; then
    [ "$orig" ] && git checkout "$orig"
else
    printMessage "No (untracked) branch(es) ${branchPattern:+matching \"${branchPattern}\" }found."
fi
exit $status
