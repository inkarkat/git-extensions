#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Delete the current branch (and detach) / passed <branch>.
Use oldeletebr to remove the branch in origin, too (and odeletebr to just delete
it in origin).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-f|--force] [-y|--yes] [--] [<branch> ...] [-?|-h|--help]'
}

typeset -a forceArgs=()
typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--force|-f)	forceArgs+=("$1"); shift;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    branch="$(git-brname --real-branch-only)" || exit $?
    git-detach || exit $?
    set -- "$branch"
fi

deleteRemoteBranches()
{
    [ ${#remoteBranches[@]} -gt 0 ] || return

    git-remote-mutate "${remote:?}" --message 'Delete branch(es)' --arguments "${remoteBranches[@]}" \; "${gitRemoteMutateArgs[@]}" \
	push "${forceArgs[@]}" "${remote:?}" --delete "${remoteBranches[@]}" || status=$?
    remoteBranches=()
}

status=0
typeset -a remoteBranches=()
for branch
do
    remoteCandidate="${branch%%/*}"
    if git-existsremote "$remoteCandidate"; then
	if [ "$remoteCandidate" = "$remote" ]; then
	    remoteBranches+=("${branch#*/}")
	else
	    deleteRemoteBranches
	    remote="$remoteCandidate"
	    remoteBranches=("${branch#*/}")
	fi
    else
	git branch "${forceArgs[@]}" --delete "$branch" || status=$?
    fi
done
deleteRemoteBranches
exit $status
