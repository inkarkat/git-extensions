#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Show relation of my tracking GitHub clone in ORIGIN to the UPSTREAM GitHub
repository.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--origin ORIGIN] [--upstream UPSTREAM] [--as [(ORIGIN|UPSTREAM)-](hash|url[1]|l[1]|lg[1]|log[1]|show) [--as ...]] [--short[=number]] [<commit-ish>...] [-?|-h|--help]'
}

origin=origin
upstream=upstream
typeset -a gitRevParseArgs=()
typeset -a renderers=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--origin)	shift; origin="$1"; shift;;
	--upstream)	shift; upstream="$1"; shift;;
	--as)		shift; renderers+=("$1"); shift;;
	--short|--short=*)
			gitRevParseArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ ${#renderers[@]} -eq 0 ] && renderers=('hash')
case $# in
    0)	commit=HEAD; backlog=;;
    1)	commit="${1%%+(^)}"; commit="${commit%~+([0-9])}"; backlog="${1#"$commit"}"; shift;;
    *)	printUsage "$0" >&2
	exit 2
	;;
esac

if ! originBranch="$(git-tracks "$commit" 2>/dev/null)"; then
    originBranch="${origin}/$(git name-rev --name-only "$commit")"
    if ! git-existsbr -- "$originBranch"; then
	printf >&2 'ERROR: %s does not track a branch and no corresponding %s branch exists.\n' "$commit" "$origin"
	exit 1
    fi
fi
if [ "${originBranch%%/*}" != "$origin" ]; then
    otherBranch="${originBranch%%/*}"
    originBranch="${origin}/${originBranch#*/}"
    if ! git-existsbr -- "$originBranch"; then
	printf >&2 'ERROR: %s tracks %s and no corresponding %s branch exists.\n' "$commit" "$otherBranch" "$origin"
	exit 1
    fi
fi

gitLh()
{
    git log --pretty=tformat:%H "$@"
}

getFirstUpstreamCommit()
{
    local originRev="${1:?}"; shift
    local originCommit; while IFS=$'\n' read -r originCommit
    do
	if git branch --remotes --contains "$originCommit" | grep --quiet "^[[:space:]]*${upstream}/"; then
	    printf '%s\n' "$originCommit"
	    return 0
	fi
    done < <(gitLh "$originRev" 2>/dev/null)

    printf >&2 'ERROR: Could not find an upsteam commit on which %s is based on.\n' "$originRev"
    exit 1
}

showCommit()
{
    local remote="${1:?}"; shift
    local commit="${1:?}"; shift
    local endCommit="$1"; shift

    # Add newline after "is N commits ahead of".
    [ "${renderers[*]}" != 'hash' ] && [ -z "$endCommit" ] && echo

    local renderer; for renderer in "${renderers[@]}"
    do
	case "$renderer" in
	    ${origin}-*)
		if [ -n "$endCommit" ]; then
		    renderer="${renderer#${origin}-}"
		else
		    continue
		fi
		;;
	    ${upstream}-*)
		if [ -n "$endCommit" ]; then
		    continue
		else
		    renderer="${renderer#${upstream}-}"
		fi
		;;
	esac

	case "$renderer" in
	    hash)
		local format='%s in %s'
		if [ ${#renderers[@]} -gt 1 ]; then
		    format+='\n'
		else
		    [ -n "$endCommit" ] && format+=' ' || format=" ${format}\\n"
		fi

		printf "$format" \
		    "$(git rev-parse "${gitRevParseArgs[@]}" "$commit")" \
		    "$remote"
		;;
	    url)
		# DWIM: Link to individual origin commit(s), but upstream commit log.
		local view=commits; [ -n "$endCommit" ] && view=commit
		GIT_LURL_VIEW="$view" git-lurl "$remote" --first-parent ${endCommit:---max-count 1 }${endCommit:+..}"${commit}"
		;;
	    url1)
		# DWIM: Link to a single individual origin commit, or commit log
		# if more than one.
		local view=commits; [ -n "$endCommit" -a $originCommitDelta -eq 1 ] && view=commit
		GIT_LURL_VIEW="$view" git-lurl "$remote" --first-parent --max-count 1 "${commit}"
		;;
	    *)
		git-wrapper --no-pager "$renderer" --first-parent ${endCommit:---max-count 1 }${endCommit:+..}"${commit}"
		;;
	esac
    done
}

firstUpstreamCommit="$(getFirstUpstreamCommit "${originBranch}${backlog}")" || exit $?
originCommitDelta="$(gitLh --first-parent "${firstUpstreamCommit}..${originBranch}${backlog}" 2>/dev/null | wc -l)" || exit $?
originCommitDeltaPlural=s; [ $originCommitDelta -eq 1 ] && originCommitDeltaPlural=
if [ $originCommitDelta -eq 0 ]; then
    printf '%s is up-to-date with' "$origin"
    showCommit "$upstream" "$firstUpstreamCommit"
else
    showCommit "$origin" "${originBranch}${backlog}" "$firstUpstreamCommit"
    printf 'is %d commit%s ahead of' "$originCommitDelta" "$originCommitDeltaPlural"
    showCommit "$upstream" "$firstUpstreamCommit"
fi

localCommitDelta="$(gitLh "${originBranch}${backlog}..${commit}" 2>/dev/null | wc -l)" || exit $?
if [ $localCommitDelta -gt 0 ]; then
    localCommitDeltaPlural=s; [ $localCommitDelta -eq 1 ] && localCommitDeltaPlural=
    localIsBranch=; git-existsbr -- "$commit" && localIsBranch=branch

    printf >&2 "Warning: %s is %d commit%s behind the local %s${localIsBranch:+ }${localIsBranch}.\\n" "${originBranch}${backlog}" "$localCommitDelta" "$localCommitDeltaPlural" "$commit"
fi
