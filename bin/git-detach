#!/bin/bash

: ${GIT_DETACH_COLOR_ADDEDUNTRACKED=[1m}
: ${GIT_DETACH_COLOR_RESET=[0m}

printUsage()
{
    cat <<HELPTEXT
Unassociate from the current branch without changing the current commit. Useful
e.g. for separate worktrees, because they all must be on distinct branches.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-?|-h|--help]'
    echo
    cat <<HELPTEXT
Detach HEAD at passed <commit>.
    --added-to-untracked|-u
			Any files that have been added between the current HEAD
			and <commit> will be kept as untracked files.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-u|--added-to-untracked] <commit> [-?|-h|--help]'
}

isAddedToUntracked=
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
    --added-to-untracked|-u)
			shift; isAddedToUntracked=t;;
esac

TMPFILE=
typeset -a addedFiles=()
if [ "$isAddedToUntracked" ] && [ $# -gt 0 ]; then
    commit="${!#}"
    # <commit> may be a predecessor or successor of HEAD: Try both ways; only
    # one can yield results.
    readarray -t addedFiles < <(git-showfiles --added "HEAD..${commit}")
    [ ${#addedFiles[@]} -gt 0 ] || readarray -t addedFiles < <(git-showfiles --added "${commit}..HEAD")

    if [ ${#addedFiles[@]} -gt 0 ]; then
	TMPFILE="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
	cleanup()
	{
	    rm -f -- "$TMPFILE" 2>/dev/null
	}
	[ "${DEBUG:-}" ] || trap 'cleanup' EXIT

	tar -c -f "$TMPFILE" -- "${addedFiles[@]}" || cleanup
    fi
fi

git-wrapper checkout --detach "$@" || exit $?

if [ -n "$TMPFILE" ]; then
    tar -x -f "$TMPFILE" && \
	printf "${GIT_DETACH_COLOR_ADDEDUNTRACKED}??${GIT_DETACH_COLOR_RESET} %s\\n" "${addedFiles[@]}"
fi
