#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--only-new|--only-old] [--prefix-numbers PREFIX] [<diff-options>] [<commit> [<commit>]] [--] [<path>...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show changed line numbers between commits, commit and working tree, etc.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --only-new		Only include added or changed line numbers.
    --only-old		Only include removed or changed line numbers from the
			previous file.
    --prefix-numbers PREFIX
			Prepend PREFIX before each line number.
HELPTEXT
}

typeset -a pager=("${PAGER:-less}" --quit-on-intr --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()

oldFormat=$'%dn\n'
newFormat="$oldFormat"
algorithm=oldNewDiff
prefix=
isAsDiffTool=
typeset -a allargs=()
typeset -a forwardedArgs=()
while [ $# -gt 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--as-difftool)	shift; isAsDiffTool=t;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--only-new)	forwardedArgs+=("$1"); shift; oldFormat='';;
	--only-old)	forwardedArgs+=("$1"); shift; newFormat='';;
	--prefix-numbers)
			forwardedArgs+=("$1" "${2?}"); shift; prefix="${1?}"; shift;;
	*)		allargs+=("$1"); shift;;
    esac
done
set -- "${allargs[@]}"

oldNewDiff()
{
    diff \
	--unchanged-line-format= \
	--old-line-format="${oldFormat:+$prefix}${oldFormat}" \
	--new-line-format="${newFormat:+$prefix}${newFormat}" \
	"$@"
}

if [ "$isAsDiffTool" ]; then
    if [ $# -eq 0 ]; then
	echo >&2 'ERROR: No FILEs passed.'
	exit 2
    fi

    $algorithm "$@"
    exit 0	# Need to return success to avoid that Git complains that the "external tool died".
else
    readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"
    quotedForwardedArgs=; [ ${#forwardedArgs[@]} -eq 0 ] || printf -v quotedForwardedArgs ' %q' "${forwardedArgs[@]}"
    git difftool --no-prompt --extcmd="$scriptName --as-difftool${quotedForwardedArgs}" "$@" \
	| eval 'sort --numeric-sort --unique' \
	"${pager:+|}" '"${pager[@]}"'
fi
