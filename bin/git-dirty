#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Test whether there are / list uncommitted changes, either in the working copy or
the index.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet|-E|--print-error [--error-message MSG]] [--ignore-submodules[=<when>]] [--] [<path> ...] [-?|-h|--help]'
}

typeset -a statusArgs=()
errorMessage='ERROR: working copy is still dirty; please clean up first.'
isPrintError=
isQuiet=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--print-error|-E)
			shift; isPrintError=t;;
	--error-message)
			shift; errorMessage="$1"; shift;;
	--quiet|-q)	shift; isQuiet=t;;

	--ignore-submodules|--ignore-submodules=*)
			statusArgs+=("$1"); shift;;

	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

runStatus()
{
    git status --short --untracked-files=no "${statusArgs[@]}" -- "$@" 2>/dev/null
}

paths="$(runStatus "$@")"
[ -n "$paths" ] || exit 1
[ "$isQuiet" ] && exit 0

# Note: Re-execute the status command because it does not (Git version
# 2.39.0) support any --color=always and the captured output has no
# coloring.
[ ! "$isPrintError" ] || printf >&2 '%s\n' "$errorMessage"
runStatus "$@"
