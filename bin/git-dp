#!/bin/bash
set -o pipefail
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Diff with [Nth] predecessor, either current HEAD or passed commit,
optionally limited to files in <path>.
Like the textual diff output of "git show", without the log info.
If no <commit> is passed but file(s) are, automatically takes the last / Nth
previous commit of each file.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-<number>|-n <number>|--count=<number>] [<commit>] [<common diff options>] [--] [<path>...] [-?|-h|--help]'
}

revision=
count=1
typeset -a gitCommandArgs=()
typeset -a gitArgs=()
unset paths
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	-c)		gitCommandArgs+=("$1" "$2"); shift; shift;;
	--count|-n)	shift; count="$1"; shift;;
	--count=*)	count="${1#--count=}"; shift;;
	-+([0-9]))	count="${1#-}"; shift;;
	--)		shift; typeset -a paths=("$@"); break;;
	-*)		gitArgs+=("$1"); shift;;
	*)		if [ -z "$revision" ] && [ ! -e "$1" ] && git-commitid --quiet --no-error -- "$1"; then
			    # Take the first argument as a commit specification
			    # when it looks like one and is not is an existing
			    # file.
			    revision="$1"
			else
			    gitArgs+=("$1")
			fi
			shift
			;;
    esac
done
if [ -z "${paths+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a paths=()
    gitArgs+=("$@")
    while [ ${#gitArgs[@]} -ne 0 ]
    do
	lastArg="${gitArgs[-1]}"
	[ -e "$lastArg" ] || break

	paths=("$lastArg" "${paths[@]}")
	gitArgs=("${gitArgs[@]:0:${#gitArgs[@]}-1}")
    done
fi
: ${revision:=HEAD}

diffToPrevious()
{
    local status=0
    for path in "${paths[@]}"
    do
	local revision="$(git log --pretty=tformat:%H --max-count 1 -- "$path")"
	if [ ! "$revision" ]; then
	    status=1
	    continue
	fi

	git "${gitCommandArgs[@]}" ${GIT_DP_DIFFCOMMAND:-diff} "${colorArg[@]}" "${gitArgs[@]}" $GIT_DP_REVISION_ARG "${revision}~${count}" "$revision" -- "$path" || status=$?
    done
    return $status
}

if [ ${#paths[@]} -gt 0 -a "$revision" = 'HEAD' ]; then
    if [ ${#paths[@]} -eq 1 ]; then
	# Optimization: For a single file, paging is handled just fine by Git
	# itself.
	diffToPrevious "${paths[@]}"
	exit
    fi

    # Because of the piping into the pager, we need to explicitly enable color.
    # Don't do this if the user explicitly turned it off, though.
    typeset -a colorArg=(); isNeedColorArgumentWhenPiping "${gitArgs[@]}" && colorArg=(--color=always) || colorArg=()

    # DWIM: Determine the last modified revision for each passed file and do the
    # diff to its [Nth] previous commit.
    typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
    eval 'diffToPrevious' "${pager:+|}" '"${pager[@]}"'
else
    exec git "${gitCommandArgs[@]}" ${GIT_DP_DIFFCOMMAND:-diff} "${gitArgs[@]}" $GIT_DP_REVISION_ARG "${revision}~${count}" "$revision" "${paths[@]}"
fi
