#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Directly edit file(s) in the index (or the HEAD revision if the file hasn't been
staged yet or --head is given) without modifying the corresponding files in the
working copy. You can re-edit the same set of files again with --continue.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--head] [EDITOR-ARGS ... [--]] [<path> ...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '--continue [--head] [EDITOR-ARGS ... [--]]'
}
sourceRev=
isContinue=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--head)		shift; sourceRev='HEAD';;
	--continue)	shift; isContinue=t;;
	*)		break;;
    esac
done

IFS=$'\n'
getIndex()
{
    local i=1 elem needle=$1; shift
    for elem
    do
	if [ "$needle" = "$elem" ]; then
	    echo "$i"
	    return 0
	fi
	let i+=1
    done
    return 1
}
if afterEndOfArgsIndex=$(getIndex '--' "$@"); then
    editorArgsNum=$((afterEndOfArgsIndex-1))
    pathArgStart=$((afterEndOfArgsIndex+1))
    typeset -a editorArgs=("${@:1:$editorArgsNum}")
    typeset -a paths=("${@:$pathArgStart}")
else
    typeset -a editorArgs=()
    while [ $# -ne 0 ]
    do
	case "$1" in
	    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	    --no-color|--color=*)
				shift;;
	    --color)		shift; shift;;
	    --)			shift; break;;
	    -*)			editorArgs+=("$1"); shift;;
	    *)			break;;
	esac
    done
    typeset paths=("$@")
fi
if [ ! "$isContinue" ] && [ ${#paths[@]} -eq 0 ]; then
    readarray -t paths < <(git-staged)
    if [ ${#paths[@]} -eq 0 ]; then
	echo >&2 'ERROR: Nothing staged.'
	exit 1
    fi
elif [ "$isContinue" ] && [ ${#paths[@]} -gt 0 ]; then
    echo >&2 "ERROR: --continue uses the original <path>s, don't add new ones."
    exit 2
fi


gitDir=$(git rev-parse --git-dir 2>/dev/null) || exit $?
indexEditDirspec="${gitDir}/indexedit"
if [ -d "$indexEditDirspec" ]; then
    [ "$isContinue" ] || rm --force "$indexEditDirspec"/.* "$indexEditDirspec"/* 2>/dev/null
else
    mkdir "$indexEditDirspec" || exit $?
fi

indexEditPathsFilespec="${indexEditDirspec}/.paths"
indexEditFilesFilespec="${indexEditDirspec}/.files"
typeset -a editFilespecs=()
if [ "$isContinue" ]; then
    readarray -t paths < "$indexEditPathsFilespec"
    readarray -t editFilespecs < "$indexEditFilesFilespec"
    if [ ${#editFilespecs[@]} -eq 0 ]; then
	printf >&2 'ERROR: No <path> given but also no edited files found under %s/!\n' "$indexEditDirspec"
	exit 2
    elif [ ${#paths[@]} -ne ${#editFilespecs[@]} ]; then
	echo >&2 "ERROR: Inconsistent numbers of <path> and edited files found. Aborting."
	exit 2
    fi

    editFilePlural=s; [ ${#editFilespecs[@]} -eq 1 ] && editFilePlural=
    printf >&2 'Continuing editing of %d staged file%s\n' "${#editFilespecs[@]}" "$editFilePlural"
else
    for path in "${paths[@]}"
    do
	filename="$(basename -- "$path")"
	filespec="${indexEditDirspec}/$filename"
	while [ -r "$filespec" ]
	do
	    let counter+=1
	    filespec="${indexEditDirspec}/${filename%.*}-${counter}.${filename##*.}"
	done
	editFilespecs+=("$filespec")
	git show "${sourceRev}:$path" > "$filespec" || exit $?
    done
    printf '%s\n' "${paths[@]}" > "$indexEditPathsFilespec"
    printf '%s\n' "${editFilespecs[@]}" > "$indexEditFilesFilespec"
fi

"$EDITOR" "${editorArgs[@]}" "${editFilespecs[@]}" || { status=$?; echo 2>&1 "Unclean exit of editor; aborting!"; exit $status; }

status=0
for ((i = 0; i < ${#paths[@]}; i++))
do
    path="${paths[$i]}"
    newIndexHash="$(git hash-object -w "${editFilespecs[$i]}")" || status=$?
    fileMode=("$(git ls-files --stage "$path" | cut -d' ' -f1)")
    git update-index --cacheinfo "${fileMode:-100644}" "$newIndexHash" "$path" || status=$?
done
exit $status
