#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Check whether [all of] the passed [<remote>/]<branch> exists.
With -v|--verbose, print any invalid branches.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-v|--verbose] [--] [<remote>/]<branch> [...] [-?|-h|--help]'
}
isVerbose=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--verbose|-v)	shift; isVerbose=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    echo 'ERROR: No <branch> passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2

existsBranch()
{
    local branchCnt=0 branch
    for branch
    do
	# First check whether any valid ref is passed.
	git rev-parse --verify --quiet "$branch" >/dev/null || continue

	# Then verify that a branch with that name exists (and it isn't a tag or
	# raw commit).
	[ "$(git branch --list --all "$branch")" ] && let branchCnt+=1
    done

    if [ $branchCnt -eq $# ]; then
	return 0
    elif [ $branchCnt -eq 0 ]; then
	return 99
    else
	return 1
    fi
}
printInvalidBranches()
{
    typeset -a invalidBranches=()
    for branch
    do
	[ "$(git branch --list --all "$branch")" ] || invalidBranches+=("$branch")
    done

    if [ ${#invalidBranches[@]} -eq 1 ]; then
	printf >&2 'ERROR: Not a valid branch: %s\n' "${invalidBranches[0]}"
    else
	printf >&2 'ERROR: Invalid branches: %s\n' "$(joinBy ', ' "${invalidBranches[@]}")"
    fi
    return 1
}

eval 'existsBranch "$@"' "${isVerbose:+ || printInvalidBranches \"\$@\"}"
