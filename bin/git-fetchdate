#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Show when REMOTE(s) were last fetched.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-m|--message MESSAGE] [--absolute|-a|--epoch] [-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]] [[-r|--remote] REMOTE [...]] [-?|-h|--help]'
}

database()
{
    gitDir="$(git rev-parse --git-dir 2>/dev/null)" || exit 3
    executionMarker --basedir "$gitDir" --group fetches "$@"
}

message=
isAbsolute=
isEpoch=
typeset -a parseAgeArgs=()
typeset -a remotes=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--message|-m)	shift; message="$1"; shift;;
	--epoch)	shift; isEpoch=t;;
	--absolute|-a)	shift; isAbsolute=t;;
	--set)		shift
			if [ $# -eq 0 ]; then
			    echo >&2 'ERROR: No REMOTE(s) passed.'
			    exit 2
			fi
			for remote
			do
			    database --update "$remote"
			done
			exit $?
			;;
	-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt)
			parseAgeArgs=("$1" "$2"); shift; shift;;
	--remote|-r)	shift; remotes+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		remotes+=("$1"); shift;;
    esac
done
if [ ${#remotes[@]} -eq 0 ]; then
    readarray -t remotes < <(git remote)
    if [ ${#remotes[@]} -eq 0 ]; then
	echo >&2 'ERROR: No remotes.'
	exit 1
    fi
fi

printPrefix()
{
    local prefix="${message}${message:+ }${isPrependRemote:+${remote}: }"
    [ -z "$prefix" ] || printf '%s' "$prefix"
}

processRemote()
{
    local remote="${1:?}"; shift

    if [ ${#parseAgeArgs[@]} -gt 0 ]; then
	epoch="$(database --time "$remote")" || epoch=0
	parseAge "${parseAgeArgs[@]}" "@$epoch" || exit $?
    elif [ ! "$isAbsolute" ]  && [ ! "$isEpoch" ]; then
	age="$(database --query "$remote" --get-diff '%R')" || return $?
	printPrefix
	printf '%s\n' "$age"
    else
	epoch="$(database --time "$remote")" || return $?
	printPrefix
	if [ "$isEpoch" ]; then
	    printf '%s\n' "$epoch"
	else
	    date --date "@$epoch"
	fi
    fi
}

isPrependRemote=t; [ $# -eq 1 ] && isPrependRemote=
status=0
for remote in "${remotes[@]}"
do
    processRemote "$remote" || status=$?
done
exit $status
