#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${GIT_FFINTEGRATETO_COMMAND_JOINER=&&}
: ${GIT_FFINTEGRATETO_EXEC_END=;}
: ${GIT_REINTEGRATE_MERGE_INTEGRATION_BRANCH_SUFFIX:=-integration}
readonly suffixPattern="${GIT_REINTEGRATE_MERGE_INTEGRATION_BRANCH_SUFFIX_PATTERN:-$GIT_BRANCH_SUFFIX_PATTERN}"	# Optional POSIX-style extended regular expression anchored to the end of the branch name whose match is kept at the end and GIT_REINTEGRATE_MERGE_INTEGRATION_BRANCH_SUFFIX is added in front of.

readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '<branch>|-b|--branch <branch> [--[no-]push] [--push-branch [--force] [--recurse-submodules=on-demand]] [--push-submodules] [--delete-merged-submodule-branches] [--no-merge] [--no-delete] [--rebase-single|--rebase|--ff|--ff-only|--no-ff|<merge-args> ...] [--no-submodule-checkout] [--no-submodule-update] [--no-merge-to-separate-integration-branch] [-y|--yes] [-?|-h|--help]'
    echo
    printf 'Usage: GIT_REINTEGRATE_CHECK_COMMAND=CMD|GIT_CHECK_COMMAND=CMD %q %s\n' "$(basename "$1")" '[...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] --no-checks | -c|--command \"CHECK-COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] $GIT_FFINTEGRATETO_EXEC_END [--exec ...]"
    printf 'Usage: echo CHECK-COMMANDLINES | %q %s\n' "$(basename "$1")" "[...] [--bare|$(runWithPrompt --get-short-usage 2>/dev/null)] -"
    printf 'Usage: %q %s - <<EOF\n  CHECK-COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Merge / rebase the current branch to the passed <branch> via a reverse
integration; i.e. the passed <branch> is merged / rebased to the current branch
first so that the reintegration is a simple fast-forward.

Runs CHECK-COMMAND(s), and if all succeed (for -c|--commands|--exec, for stdin:
only with --worst-status, else if the last succeeds) then do the fast-forward
and delete the current branch from the local repository as well as a tracked
remote (if it exists there).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --push		Push <branch> (to a writable upstream, tracked remote,
			origin) before deleting the reintegrated current branch.
			GitHub needs this to detect that the branch has been
			merged.
    --no-push		Don't push <branch> even when invoked as a hub command
			(but still check pull requests etc.)
    --push-branch	Push the current branch (to the tracked remote) after
			merging in / rebasing to <branch>. Most useful in
			combination with --no-merge to prevent the deletion
			following the reintegration.
    --force		Force-push the current branch (when the branch has
			diverged from the tracked remote). Implied by
			--rebase|--rebase-single.
    --recurse-submodules=on-demand
			Also push submodules that changed in the revisions to be
			pushed; note: this only works if the submodules are on
			the same branch.
    --push-submodules	Also push submodules affected by the integration;
			required when this is a superproject and submodule
			changes have already been reintegrated but not yet
			pushed (because the check happens after integration of
			the superproject).
    --delete-merged-submodule-branches
			Delete the merged submodule branches (after pushing) of
			submodules affected by the integration.
    --no-merge		Stop short of the actual fast-forward reintegration;
			just merge / rebase the passed <branch> to the current
			branch and run checks.
    --no-delete		Don't delete the reintegrated current branch from local
			repository and tracked remote.
    --rebase-single	Rebase only if the current branch is a single non-merge
			commit, else merge.
    --no-submodule-checkout
			Don't automatically check out resulting submodule
			versions when switching to the passed <branch>.
    --no-submodule-update
			Don't automatically check out resulting submodule
			versions (after the fast-forward; the merge / rebase
			will update submodules).
    --no-merge-to-separate-integration-branch
			Push a merge commit to the original source branch
			instead of creating a separate remote branch for that.
			This will pollute a pull request with additional commits
			from the master branch and the merge commit itself!
    --no-checks		Don't run any default \$GIT_REINTEGRATE_CHECK_COMMAND /
			\$GIT_CHECK_COMMAND.
    --yes		Don't query for confirmation of remote mutations.
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT
The answers to some questions can be preconfigured via these boolean config
settings; when not configured (true or false), the user will be prompted every
time:
- reintegrate.fastforward-single    fast-forward a single commit
- reintegrate.fastforward	    fast-forward multiple commits
- reintegrate.rebase-single	    rebase a single commit instead of creating a
				    merge commit
HELPTEXT
}

withMarkStore()
{
    gitDir=$(git rev-parse --git-dir 2>/dev/null) || return 3
    markStore="${gitDir}/ffintegrate"
    "$@"
}
setReverseMarkDone()
{
    {
	git-commitid HEAD
	git-brname --real-branch-only
    } > "${markStore:?}" || return 3
}
checkReverseMarkDone()
{
    [ -r "${markStore:?}" ] || return 1
    < "$markStore" IFS=$'\n' read -r integrationRevision || return 3
    [ "${integrationRevision:?}" = "$(git-commitid HEAD)" ]
}
printMergedBranch()
{
    [ -r "${markStore:?}" ] || return 1
    {
	IFS=$'\n' read -r integrationRevision || return 3
	IFS=$'\n' read -r branchName || return 3
    } < "$markStore"
    printf '%s\n' "$branchName"
}

allArgs=("$@")
targetBranch=
case "$1" in
    -*)	;;
    ?*)	if git-existsbr -- "$1"; then
	    targetBranch="$1"
	    shift
	fi
	;;
esac

isContinue=
isKeepBranches=
isPerformTheMerge=t
unset mergeSuggestion
unset isPush
typeset -a pushArg=()
isPushBranch=
typeset -a pushBranchForceArg=()
typeset -a pushBranchArgs=()
isPushSubmodules=
isDeleteMergedSubmoduleBranches=
hasMergeResolutionArg=
isRebase=
isRebaseSingle=
typeset -a fastForwardArgs=()
typeset -a mergeArgs=()
typeset -a mergeMessageArgs=()
typeset -a mergeNoEditMessageArgs=()
mergeMessageTemplate=
isBare=
isDisableChecks=
isCheckFromStdin=
typeset -a checkCommandArgs=()
checkCommands=
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
typeset -a continueArgs=()
typeset -a gitRemoteMutateArgs=()
typeset -a reintegrateArgs=()
isFastForwardTargetToTracked=
afterReverseMergeCommand=
isPushMergeToSeparateIntegrationBranch=t
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--continue)	shift; isContinue=t;;
	--no-delete)	continueArgs+=("$1"); shift; isKeepBranches=t;;
	--no-merge)	continueArgs+=("$1"); shift; isPerformTheMerge=;;
	--merge-suggestion)
			continueArgs+=("$1" "${2?}"); shift; mergeSuggestion="$1"; shift;;
	--push)		continueArgs+=("$1"); pushArg=("$1"); shift; isPush=t;;
	--no-push)	continueArgs+=("$1"); pushArg=("$1"); shift; isPush=;;
	--push-branch)	continueArgs+=("$1"); shift; isPushBranch=t;;
	--force)	continueArgs+=("$1"); pushBranchForceArg=("$1"); shift;;
	--recurse-submodules=*)
			continueArgs+=("$1"); pushBranchArgs+=("$1"); shift;;
	--push-submodules)
			continueArgs+=("$1"); shift; isPushSubmodules=t;;
	--delete-merged-submodule-branches)
			continueArgs+=("$1"); shift; isDeleteMergedSubmoduleBranches=t;;
	--branch|-b)    shift
			if [ -n "$targetBranch" ]; then
			    echo >&2 'ERROR: <branch> can only be passed once.'
			    exit 2
			fi
			targetBranch="${1:?}"
			shift
			;;
	--rebase)	shift; hasMergeResolutionArg=t; isRebase=t;;
	--rebase-single)
			shift; hasMergeResolutionArg=t; isRebaseSingle=t;;
	--ff|--no-ff|--ff-only)
			hasMergeResolutionArg=t; fastForwardArgs=("$1"); shift;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--no-checks)	checkCommandArgs+=("$1"); shift; isDisableChecks=t;;
	--command|-c)	checkCommandArgs+=("$1" "$2"); shift; checkCommands+="${checkCommands:+ $GIT_FFINTEGRATETO_COMMAND_JOINER }$1"; shift;;
	--exec)		checkCommandArgs+=("$1"); shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$GIT_FFINTEGRATETO_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    checkCommandArgs+=("$1"); shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${GIT_FFINTEGRATETO_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			checkCommandArgs+=("$1"); shift
			checkCommands+="${checkCommands:+ $GIT_FFINTEGRATETO_COMMAND_JOINER }${cmd}"
			;;
	--bare)		continueArgs+=("$1"); shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;

	--message|-m|--file|-F)
			mergeMessageArgs+=("$1" "$2"); shift; shift;;
	--no-edit)	mergeNoEditMessageArgs+=("$1"); shift;;
	--merge-message-template)
			shift; mergeMessageTemplate="${1?}"; shift;;
	-[sX])		mergeArgs+=("$1" "$2"); shift; shift;;
	--@(strategy|strategy-option|gpg-sign)=*)	mergeArgs+=("$1"); shift;;
	--@(strategy|strategy-option|gpg-sign))		mergeArgs+=("$1" "$2"); shift; shift;;
	--no-submodule-checkout|--no-submodule-update)
			reintegrateArgs+=("$1"); shift;;
	--no-merge-to-separate-integration-branch)
			shift; isPushMergeToSeparateIntegrationBranch=;;
	--ff-target-to-tracked)
			reintegrateArgs+=("$1"); shift; isFastForwardTargetToTracked=t;;

	--mark-reverse-merge-done)
			continueArgs+=("$1"); shift; afterReverseMergeCommand+="${afterReverseMergeCommand:+; }withMarkStore setReverseMarkDone";;
	--is-reverse-merge-done)
			shift; withMarkStore checkReverseMarkDone; exit $?;;
	--print-merged-branch)
			shift; withMarkStore printMergedBranch; exit $?;;

	--)		shift; break;;
	--*)		mergeArgs+=("$1"); shift;;
	-)		shift; isCheckFromStdin=t; break;;
	-*)		mergeArgs+=("$1"); shift;;
	*)		break;;
    esac
done
if [ "${!#}" = '-' ]; then
    isCheckFromStdin=t
    set -- "${@:1:$(($#-1))}"
fi
if [ "$isCheckFromStdin" ] && [ -n "$checkCommands" ]; then
    echo 'ERROR: Cannot combine CHECK-COMMANDLINE from stdin (-) with -c|--command|--exec.'
    echo
    printUsage "$0"
    exit 2
fi >&2
if [ "$isDisableChecks" ]; then
    echo 'Checks are disabled.'
    checkCommands=''
else
    if [ "$isCheckFromStdin" ]; then
	:
    elif [ -n "$GIT_REINTEGRATE_CHECK_COMMAND" -a -z "$checkCommands" ]; then
	checkCommands="$GIT_REINTEGRATE_CHECK_COMMAND"
	checkCommandArgs+=(--command "$GIT_REINTEGRATE_CHECK_COMMAND")
    elif [ -n "$GIT_CHECK_COMMAND" -a -z "$checkCommands" ]; then
	checkCommands="$GIT_CHECK_COMMAND"
	checkCommandArgs+=(--command "$GIT_CHECK_COMMAND")
    else
	echo 'No checks to run.'
    fi
fi
if [ -z "${isPush+t}" -a -n "$HUB" ]; then
    # Need to push to remote first so that GitHub recognizes that the branch has
    # been merged. If the branch is first deleted, GitHub marks a corresponding
    # pull request as "closed".
    isPush=t
    pushArg=(--push)
fi

sourceBranch="$(git-brname --real-branch-only)" || exit $?
sourceTracks="$(git-tracks 2>/dev/null)"
if [ -z "$targetBranch" ]; then
    echo 'ERROR: Missing <branch>.'
    exit 2
elif [ "$targetBranch" = "$sourceBranch" ]; then
    printf 'ERROR: Cannot integrate %s onto itself; check out a different branch first.\n' "$targetBranch"
    exit 2
elif git-dirty --print-error; then
    exit 1
fi >&2

typeset -a contextShortener=(headtail --separator-cutline)
confirmFastForwardTarget()
{
    local question="Your $targetBranch branch is not up-to-date with ${targetTrackedRemote}, but can be fast-forwarded."
    typeset -a additionalChoices=()
    if ! git-inout --is-ahead HEAD "$targetTracks" >/dev/null \
	&& similarCommitNum=$(git-similarcommits --count "${targetBranch}..HEAD" "${targetBranch}..${targetTracks}") \
	&& [ $similarCommitNum -gt 0 ]
    then
	local commitNum=$(git-count "${targetBranch}..HEAD")
	local commitNumPlural=s; [ $commitNum -eq 1 ] && commitNumPlural=
	question="Your $targetBranch branch is not up-to-date with ${targetTrackedRemote}, but $((100 * similarCommitNum / commitNum))% of the $commitNum commit$commitNumPlural on the current branch look similar to what you have on ${targetTrackedRemote}. If you're redoing a previously merged (and pushed) branch, please decline."
	additionalChoices=("Show [D]ifference between ${targetTrackedRemote} and the current branch")
    fi

    local choice; choice="$(userchoiceFromList --keep-prompt --question "$question Integrate $targetTracks?" --no-cancel --ignore-case -- '[Y]es' '[N]o' 'Show [C]ontext' "${additionalChoices[@]}" '[S]hell')" || exit $?
    case "$choice" in
	Yes) ;;
	No) return 4;;
	Show\ Context)
	    echo "Context${contextShortener[*]:+ (abbreviated)}:"
	    eval "git-inout --color=always --one-more --base $targetBranch $targetTracks" "${contextShortener:+|}" '"${contextShortener[@]}"'
	    typeset -a contextShortener=()
	    confirmFastForwardTarget "$@"
	    ;;
	Show\ Difference\ between\ *)
	    echo 'Difference:'
	    git-inout --color=always --one-more --base "$targetTracks"
	    confirmFastForwardTarget "$@"
	    ;;
	Shell)
	    echo "Pending: Integration of $targetTracks, unless you do a non-successful exit."
	    "${SHELL:-bash}" -i || return $?
	    ;;
	*)  printf >&2 'ASSERT: Unhandled choice: %s\n' "$choice"; exit 3;;
    esac
}
confirmUseTarget()
{
    local question="Your $targetBranch branch has diverged from ${targetTrackedRemote}."
    local choice; choice="$(userchoiceFromList --keep-prompt --question "$question Integrate $targetBranch despite this?" --no-cancel --ignore-case -- '[Y]es' '[N]o' 'Show [C]ontext' '[S]hell')" || exit $?
    case "$choice" in
	Yes) ;;
	No) return 4;;
	Show\ Context)
	    echo "Context${contextShortener[*]:+ (abbreviated)}:"
	    eval "git-inout --color=always --one-more --base $targetBranch $targetTracks" "${contextShortener:+|}" '"${contextShortener[@]}"'
	    typeset -a contextShortener=()
	    confirmUseTarget "$@"
	    ;;
	Shell)
	    echo "Pending: Integration of $targetBranch, unless you do a non-successful exit."
	    "${SHELL:-bash}" -i || return $?
	    ;;
	*)  printf >&2 'ASSERT: Unhandled choice: %s\n' "$choice"; exit 3;;
    esac
}
canRebase()
{
    git-count -le 1 --max-count 2 --no-merges "${targetIntegrationSourceBranch:?}..HEAD"
}

printIntegrationCommand()
{
    local integrationCommandName="${1:?}"; shift
    local isCheckFromStdin="${1?}"; shift
    local preCommand="${1?}"; shift

    local quotedConfigVariables='';  [ -n "$GIT_REINTEGRATE_PRE_PUSH_COMMAND" ] && printf -v quotedConfigVariables 'GIT_REINTEGRATE_PRE_PUSH_COMMAND=%q' "$GIT_REINTEGRATE_PRE_PUSH_COMMAND"
    local gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
    [ "$isCheckFromStdin" ] && printf >&2 'echo CHECK-COMMANDLINES | '
    printf >&2 '$ %s%s%s %q' "${preCommand}${preCommand:+ && }" "${quotedConfigVariables}${quotedConfigVariables:+ }" "$gitCommand" "$integrationCommandName"
    [ $# -eq 0 ] || printf >&2 ' %q' "$@"
    [ "$isCheckFromStdin" ] && printf >&2 ' -'
    printf >&2 '\n'
}

printRestartCommand()
{
    printIntegrationCommand "${scriptName#git-}" "$isCheckFromStdin" '' \
	"${allArgs[@]}"
}

printContinueCommand()
{
    printIntegrationCommand "${scriptName#git-}" "$isCheckFromStdin" "$1" \
	--continue ${isRebase:+--rebase} \
	--branch "$targetBranch" \
	"${runWithPromptArgs[@]}" "${continueArgs[@]}" "${gitRemoteMutateArgs[@]}" "${checkCommandArgs[@]}" "${reintegrateArgs[@]}"
}

choiceEvaluate()
{
    local configKey="${1:?}"; shift
    local choice="${1:?}"; shift
    local messagePrefix="${1:?}"; shift
    local positiveMessage="${1:?}"; shift
    local negativeMessage="${1:?}"; shift
    case "$choice" in
	true)	printf '%s %s (based on the %s config).\n' "$messagePrefix" "$positiveMessage" "$configKey"; return 0;;
	false)	printf '%s %s (based on the %s config).\n' "$messagePrefix" "$negativeMessage" "$configKey"; return 1;;
	*)	printf >&2 'ASSERT: Invalid choice: %s\n' "$choice"; exit 3;;
    esac
}

pushSubmodules()
{
    printf '\nPushing submodules:\n'
    git-showsubmodules "${targetIntegrationSourceBranch:?}..HEAD" | git-subdo --subdo-command-name "${scriptName#git-}" --status-99-is-noop --for - --interactive push-this-branch "${gitRemoteMutateArgs[@]}"
}

deleteMergedSubmoduleBranches()
{
    printf '\nDeleting merged submodule branches:\n'
    export HUB_DELETEMERGEDBRANCHES_TIMEOUT_BASEEPOCH=$(printf '%(%s)T' -1)
    git-showsubmodules "${targetIntegrationSourceBranch:?}..HEAD" | git-subdo --status-99-is-noop --for - --interactive delete-merged-branches "${gitRemoteMutateArgs[@]}" -- "$sourceBranch"
}

typeset -a reintegrateDeleteSeparateIntegrationBranchArg=()
pushBranch()
{
    local pushBranch="$sourceBranch"
    typeset -a pushRefspecArg=()
    if [ "$isPushMergeToSeparateIntegrationBranch" ] && git-ismerge; then
	if [[ "$pushBranch" =~ ^(.+)(${suffixPattern})$ ]]; then
	    local baseBranch="${BASH_REMATCH[1]}"
	    local branchSuffix="${BASH_REMATCH[2]}"
	else
	    local baseBranch="$pushBranch"
	    local branchSuffix=''
	fi
	pushBranch="${baseBranch}${GIT_REINTEGRATE_MERGE_INTEGRATION_BRANCH_SUFFIX:?}${branchSuffix}"
	pushRefspecArg=("HEAD:refs/heads/${pushBranch}")
	pushBranchForceArg=(--force --force)	# Override any existing previous integration attempt; double-force to suppress "You're pushing to $pushBranch on origin, which is different from origin/${sourceBranch}." confirmation.
	reintegrateDeleteSeparateIntegrationBranchArg=(--delete-separate-integration-branch)
    fi

    printf '\nPushing %s that got %s integrated into it:\n' "$pushBranch" "$targetBranch"
    [ ! "$didVisitSubmodules" ] || { header --first "$(git-wcname)"; didVisitSubmodules=; }

    [ "$isRebase" ] && pushBranchForceArg=(--force) # Need to force-push when rebasing the current branch on top of <branch>.

    local quotedSourceBranch; printf -v quotedSourceBranch %q "$sourceBranch"
    if [ -n "$sourceTracks" ]; then
	local sourceTrackedRemote="${sourceTracks%%/*}"
	local contextCommand="git rev-range-outgoing $sourceTrackedRemote --color=always --one-more-command greyonelinelog --one-more-only-to-terminal lg --branch $quotedSourceBranch"
    else
	typeset -a remotes=(); readarray -t remotes < <(git remote)
	local sourceTrackedRemote; sourceTrackedRemote="$(userchoiceFromList --keep-prompt --question "No upstream configured for the current branch '$sourceBranch' yet; choose remote?" --ignore-case -- "${remotes[@]}")" \
	    || return $?	# Still continue with the branch deletion here, but following push errors will abort.
	printf -v quotedTargetBranch %q "$targetBranch"
	local contextCommand="git rev-range --revision $quotedTargetBranch --end-revision $quotedSourceBranch --color=always --one-more-command greyonelinelog --one-more-only-to-terminal lg"
    fi

    # Push to the tracked remote (usually origin).
    git-remote-mutate "$sourceTrackedRemote" --message 'Push' --argument "$pushBranch" --context-command "$contextCommand" "${gitRemoteMutateArgs[@]}" \
	push "${pushBranchForceArg[@]}" "${pushBranchArgs[@]}" "$sourceTrackedRemote" "${pushRefspecArg[@]}" || return $?
}

targetTracks="$(git-tracks "$targetBranch" 2>/dev/null)"
targetTrackedRemote="${targetTracks%%/*}"

gitSubmoduleUpdateCommand=; git hassubmodules && gitSubmoduleUpdateCommand='git subwipe'
branchMergeMessage=
branchMergeMessageAppendix=

if [ "$isContinue" ]; then
    printf 'Finalizing integration of %s into %s:\n\n' "$sourceBranch" "$targetBranch"
    [ "$isFastForwardTargetToTracked" ] \
	&& targetIntegrationSourceBranch="${targetTracks:?}" \
	|| targetIntegrationSourceBranch="$targetBranch"
else
    printf 'Integrating %s into %s:\n\n' "$sourceBranch" "$targetBranch"

    if [ ${#mergeNoEditMessageArgs[@]} -eq 0 ]; then
	# Comments are only ignored if the message is edited, but included as-is
	# on a direct commit.
	branchMergeMessageAppendix=$'\n'"# via fast-forward integration to $targetBranch"
    fi

    # Ensure that the current branch is good for merging.
    git-mergecheck --merge-to "$targetBranch" || exit $?

    if [ -n "$HUB" ] && [ ! "$isRebase" ] && [ ${#mergeMessageArgs[@]} -eq 0 ]; then
	# Try to obtain corresponding pull request based on current branch's
	# HEAD commits (both local and remote if different (this can happen if a
	# submodule has been reintegrated as a separate commit because of
	# maintaining the history)) and seed the merge message with it / them
	# (as the PR title already summarizes the changeset and makes for a
	# great merge title). This saves the user from opening the PR and
	# copy-and-pasting it.
	typeset -a prefixCommands=()
	type -t timeout >/dev/null && prefixCommands=(timeout 10 "${prefixCommands[@]}")
	type -t invocationMessage >/dev/null && prefixCommands=(invocationMessage --message 'Searching for PR...' --success FOUND --fail NONE -- "${prefixCommands[@]}")

	typeset -a suffixArguments=(); [ -n "$sourceTracks" ] && ! git-equals "$sourceBranch" "$sourceTracks" \
	    && suffixArguments=(HEAD "$sourceTracks")

	pullRequestTitles="$("${prefixCommands[@]}" hub-prtitle --as-merge-message "${suffixArguments[@]}")"
	if [ -n "$pullRequestTitles" ]; then
	    mergeMessageArgs=(--message "$pullRequestTitles"$'\n\n'"$branchMergeMessageAppendix")
	    [ ${#mergeNoEditMessageArgs[@]} -gt 0 ] || mergeMessageArgs+=(--edit)
	fi
    fi
    if [ ${#mergeMessageArgs[@]} -eq 0 ]; then
	# This is the reverse merge message: Though we're actually merging
	# $targetBranch into $sourceBranch, with the fast-forward integration it
	# will look as if $sourceBranch got merged into $targetBranch.
	branchMergeMessage="${mergeMessageTemplate}${mergeMessageTemplate:+$'\n\n'}$(git-mergeBranchMessage "$targetBranch" "$sourceBranch")" || exit 3
    fi

    targetIntegrationSourceBranch="$targetBranch"
    if [ -n "$targetTracks" ] && ! git-equals "$targetBranch" "$targetTracks"; then
	if git-inout --is-behind "$targetBranch" "$targetTracks" >/dev/null; then
	    if [ "$isFastForwardTargetToTracked" ] || confirmFastForwardTarget; then
		targetIntegrationSourceBranch="$targetTracks"
		reintegrateArgs+=(--ff-target-to-tracked)   # Don't have git-reintegrate ask the same question again, as this is confusing.

		# Update the merge message template, too.
		branchMergeMessageAppendix="${branchMergeMessageAppendix/% $targetBranch/ $targetTracks}"
		mergeMessageArgs=("${mergeMessageArgs[@]/%# via fast-forward integration to $targetBranch/\# via fast-forward integration to $targetTracks}")
	    else
		printf "Okay, I'll ${isPerformTheMerge:+re}integrate ${isPerformTheMerge:+into }%s locally and you'll then have to merge with %s after that.\\n" "$targetBranch" "$targetTracks"
	    fi
	elif confirmUseTarget; then
	    printf "Okay, I'll ${isPerformTheMerge:+re}integrate ${isPerformTheMerge:+into }%s locally and you'll then have to merge with %s after that.\\n" "$targetBranch" "$targetTracks"
	else
	    exit 4
	fi
    fi

    if git-equals "${targetIntegrationSourceBranch:?}" HEAD; then
	printf >&2 'Branch %s is already even with %s\n' "$targetIntegrationSourceBranch" "$sourceBranch"

	# Don't run the checks.
	checkCommands=''
	isCheckFromStdin=
    else
	if [ ! "$hasMergeResolutionArg" ]; then
	    if commitNum=$(git-inout --is-ahead HEAD "$targetIntegrationSourceBranch"); then
		commitNumPlural=s; [ $commitNum -eq 1 ] && commitNumPlural=

		fastForwardInsteadOfMergeConfigKey='reintegrate.fastforward'; [ $commitNum -eq 1 ] && fastForwardInsteadOfMergeConfigKey='reintegrate.fastforward-single'
		if choice="$(git config --type bool --get "$fastForwardInsteadOfMergeConfigKey")"; then
		    choiceEvaluate "$fastForwardInsteadOfMergeConfigKey" "$choice" "The $commitNum commit$commitNumPlural on the current branch will be" "fast-forwarded instead of merged" "merged, not fast-forwarded"
		else
		    userBinaryChoice --keep-prompt --console --question "The $commitNum commit$commitNumPlural on the current branch can be fast-forwarded instead of merged. Fast-forward?" --yes-no
		fi \
		    && fastForwardArgs=(--ff-only)
	    elif canRebase; then
		if choice="$(git config --type bool --get reintegrate.rebase-single)"; then
		    choiceEvaluate reintegrate.rebase-single "The single commit on the current branch will be" "rebased instead of merged" "merged, not rebased"
		else
		    choice="$(userchoiceFromList --keep-prompt --question "The current branch only consists of a single commit. Rebase it instead of creating a separate merge commit?" --no-cancel --ignore-case -- '[Y]es' '[N]o' '[Q]uit')" || exit $?
		fi
		case "$choice" in
		    true|Yes)
			isRebase=t;;
		    Quit)
			exit 1
			;;
		esac
	    fi
	elif [ "$isRebaseSingle" ]; then
	    if canRebase; then
		isRebase=t
	    fi
	fi


	if [ "$isRebase" ]; then
	    git-wrapper rebase "$targetIntegrationSourceBranch" || {
		status=$?
		echo >&2 "After the branch has been successfully rebased (see above), you can continue (${isCheckFromStdin:+run checks and }${checkCommands:+run checks and }${isPushBranch:+push and }${isPerformTheMerge:+fast-forward-integrate to $targetBranch and }${isPush:+push and }${isKeepBranches:+not }delete it) via"
		printContinueCommand
		exit $status
	    }
	else
	    if [ ${#mergeMessageArgs[@]} -eq 0 -a -n "$branchMergeMessage" ]; then
		mergeMessageArgs=(--message "${branchMergeMessage}${branchMergeMessageAppendix}")
		[ ${#mergeNoEditMessageArgs[@]} -gt 0 ] || mergeMessageArgs+=(--edit)
	    fi

	    originalCommit="$(git rev-parse HEAD)"
	    git-wrapper merge "${fastForwardArgs[@]:---no-ff}" "${mergeMessageArgs[@]}" "${mergeNoEditMessageArgs[@]}" "${mergeArgs[@]}" -- "$targetIntegrationSourceBranch" || {
		status=$?
		echo >&2 "After the branch has been merged (see above), you can continue (${isCheckFromStdin:+run checks and }${checkCommands:+run checks and }${isPushBranch:+push and }${isPerformTheMerge:+fast-forward-integrate to $targetBranch and }${isPush:+push and }${isKeepBranches:+not }delete it) via"
		printContinueCommand "${gitSubmoduleUpdateCommand}${gitSubmoduleUpdateCommand:+ && }git swapmergeparents"
		exit $status
	    }
	    if [ "${fastForwardArgs[*]:---no-ff}" = '--no-ff' ] && [ "$originalCommit" = "$(git rev-parse HEAD)" ]; then
		# There have been no updates on target branch; the current
		# branch is a successor of the target branch. Even with --no-ff,
		# Git will refuse to create a merge commit with "Already up to
		# date.", but we need to force a merge commit, as that will
		# eventually be fast-forwarded to the target branch and should
		# appear as an actual merge of the current branch.
		git-mergeancestor "${mergeMessageArgs[@]}" "${mergeNoEditMessageArgs[@]}" "$targetIntegrationSourceBranch" || {
		    status=$?
		    echo >&2 "FATAL: The forced merge of ${targetBranch} into ${sourceBranch} even though the latter is a successor of the former somehow failed."
		    echo >&2 'You might want to retry without --no-ff or with --rebase:'
		    printRestartCommand	# If the current branch has been modified, the reintegration need to be restarted to be able to fast-forward. We cannot simply continue after the original integration commit has been left behind.
		    echo >&2 'If you instead can fix this on your own, invoke this to continue after the merge into the current branch:'
		    printContinueCommand "$gitSubmoduleUpdateCommand"
		    exit $status
		}
	    else
		! git-ismerge \
		    || git-swapmergeparents \
		    || {
			echo >&2 'ERROR: Failed to swap the merge parents of the reversed merge.'
			printContinueCommand
			exit 3
		    }
	    fi
	fi
    fi
fi  # End of actual reverse merge; continue finalization from here.
eval "$afterReverseMergeCommand"


if [ "$isCheckFromStdin" ]; then
    if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	bash "${bashArgs[@]}" -
    else
	${runWithCommand:?} "${runWithPromptArgs[@]}"
    fi
elif [ -n "$checkCommands" ]; then
    (eval "$checkCommands")
fi || {
    status=$?
    echo >&2 "Checks failed; $targetIntegrationSourceBranch has been integrated into the current branch, but the current branch has not been ${isPushBranch:+pushed and }${isPerformTheMerge:+fast-forward-integrated to $targetBranch and }${isPush:+pushed or }${isKeepBranches:+not }deleted yet."
    if [ "$isRebase" ]; then
	echo >&2 'Correct the problem by amending or adding commits, then invoke'
	printContinueCommand
	echo >&2 'Same if the checks just failed due to an external issue and you would like to try again.'
	echo >&2 "If the problem required pulls from ${targetTrackedRemote} you need to restart the fast-forwarding integration via"
	printRestartCommand	# If the remote source or target branches have been updated, the reintegration need to be restarted (i.e. a new rebase needs to happen) to be able to fast-forward.
    else # merge
	echo >&2 'Correct the problem by amending to the merge commit, then invoke'
	printContinueCommand
	echo >&2 'Same if the checks just failed due to an external issue and you would like to try again.'
	echo >&2 "Alternatively, you can also undo the reverse merge ($ git wipecommit --parent-number 2), then restart the fast-forwarding integration via"
	printRestartCommand
    fi
    exit $status
}

status=0
didVisitSubmodules=
if [ "$isPushSubmodules" ]; then
    pushSubmodules || status=$?
    case $status in
	0)  didVisitSubmodules=t;;
	4)  # Still continue with pushing when submodule pushes have been skipped.
	    ;;
	99) # Still continue with pushing when there's no upstream configured.
	    ;;
	*)  # Any real push errors abort; don't continue with pushing.
	    exit $status;;
    esac
fi

[ ! "$isPushBranch" ] || pushBranch || {
    status=$?
    echo >&2 'Push of the current branch failed; correct the problem and push yourself.'
    [ ! "$isDeleteMergedSubmoduleBranches" ] || echo >&2 "But hang on, I'll still delete the merged submodule branches now."
    # Turn an automatic reintegration into the echoing of the command.
    isPerformTheMerge=
}

if [ "$isDeleteMergedSubmoduleBranches" ]; then
    deleteMergedSubmoduleBranches || status=$?
    case $status in
	0)  didVisitSubmodules=t;;
	99) # Still continue with the reintegration when there's no upstream configured.
	    status=0
	    ;;
	*)  # Turn an automatic reintegration into the echoing of the command.
	    isPerformTheMerge=
	    ;;
    esac
fi

[ "$didVisitSubmodules" ] && header "$(git-wcname)" || echo

typeset -a reintegratetoArgs=(--ff-only --no-checks --branch "$targetBranch"${isKeepBranches:+ --no-delete} "${pushArg[@]}" "${reintegrateArgs[@]}" "${gitRemoteMutateArgs[@]}" "${reintegrateDeleteSeparateIntegrationBranchArg[@]}")
if [ "$isPerformTheMerge" ]; then
    exec git-reintegrateto "${reintegratetoArgs[@]}"
elif [ -z "${mergeSuggestion+t}" ]; then
    gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
    printf 'You can fast-forward-integrate the current %s into %s via:\n' "$sourceBranch" "$targetBranch"
    printIntegrationCommand reintegrateto '' '' "${reintegratetoArgs[@]}"
elif [ -n "$mergeSuggestion" ]; then
    printf '%s\n' "$mergeSuggestion"
fi
exit $status
