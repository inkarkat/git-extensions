#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Filter out the current branch and master (and base branch if defined) from the input.
HELPTEXT
    printf 'Usage: git BRANCH-COMMAND | %q %s\n' "$(basename "$1")" '[-F|--field-separator FS] [--remote REMOTE|"" [--remote ...]] [--include-current] [--include-master] [--include-base] [--include-all] [-?|-h|--help]'
}

typeset -a grepCommand=(grep)
typeset -a grepFinalArg=()
isIncludeCurrent=
isIncludeMaster=
isIncludeBase=
typeset -a remotes=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			    shift;;
	--color)	    shift; shift;;
	--field-separator|-F)
			    grepCommand=(fieldGrep "$1" "${2?}"); shift; shift; grepFinalArg=(-1);;
	--remote)	    shift; remotes+=("$1"); shift;;
	--include-current)  shift; isIncludeCurrent=t;;
	--include-master)   shift; isIncludeMaster=t;;
	--include-base)	    shift; isIncludeBase=t;;
	--include-all)	    shift; isIncludeCurrent=t; isIncludeMaster=t; isIncludeBase=t;;
	--)		    shift; break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

typeset -A excludedBranches=()

currentBranch="$(git symbolic-ref HEAD 2>/dev/null)"
currentBranch="${currentBranch##refs/heads/}"
[ -z "$currentBranch" ] || excludedBranches["$currentBranch"]=1

masterBranch="$(git-mbr)"
[ -z "$masterBranch" ] || excludedBranches["$masterBranch"]=1

baseBranch="$(git-nbr 2>/dev/null)"
[ -z "$baseBranch" ] || excludedBranches+=(["$baseBranch"]=1)

[ "$isIncludeCurrent" ] && [ -n "$currentBranch" ] && unset "excludedBranches[$currentBranch]"
[ "$isIncludeMaster" ] && [ -n "$masterBranch" -a "$masterBranch" != "$currentBranch" ] && unset "excludedBranches[$masterBranch]"
[ "$isIncludeBase" ] && [ -n "$baseBranch" -a "$baseBranch" != "$currentBranch" ] && unset "excludedBranches[$baseBranch]"

typeset -a grepArgs=()
[ ${#remotes[@]} -gt 0 ] || remotes=('')
for remote in "${remotes[@]}"
do
    for excludedBranch in "${!excludedBranches[@]}"
    do
	grepArgs+=(-e "${remote}${remote:+/}$excludedBranch")
    done
done

if [ ${#grepArgs[@]} -eq 0 ]; then
    exec cat
else
    "${grepCommand[@]}" --invert-match --fixed-strings --line-regexp "${grepArgs[@]}" "${grepFinalArg[@]}"
fi
