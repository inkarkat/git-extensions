#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Commit with the intent of squashing this with the passed revision via
interactive rebase later (now with --rebase).

RELATED COMMANDS:
- git-shamend works like fixup --rebase; it's in unixorn/git-extra-commands  /
  https://www.daniellesucher.com/2014/05/08/git-shamend/
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--amend|--reword] [--rebase] [<commit-arguments> ...] <ref>|:/<pattern> [--] [<path> ...] [-?|-h|--help]'
}
typeset -a gitCommitArgs=()
unset files
fixupType=
isRebase=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--amend|--reword)
			fixupType="${1#--}"; shift;;
	--rebase)	shift; isRebase=t;;
	--)		gitCommitArgs+=("$1"); shift; typeset -a files=("$@"); break;;
	*)		gitCommitArgs+=("$1"); shift;;
    esac
done
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    gitCommitArgs+=("$@")
    while [ ${#gitCommitArgs[@]} -ne 0 ]
    do
	lastArg="${gitCommitArgs[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	gitCommitArgs=("${gitCommitArgs[@]:0:${#gitCommitArgs[@]}-1}")
    done
fi
if [ ${#gitCommitArgs[@]} -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

fixupCommit="${gitCommitArgs[*]:$((${#gitCommitArgs[@]}-1))}"

export GIT_COMMIT_SHOW_REUSE='' GIT_COMMIT_SHOW_REMOTE=''   # Reusing or viewing the ephemeral fixup commit is not useful; drop the corresponding hints.
if [ "$isRebase" ]; then
    git-isrebasing --print-positive-error && exit 2

    # Need to resolve the revision first; after commiting the fixup, an unanchored
    # passed :/<pattern> will find the fixup commit now. Also, we need the commit ID
    # in order to reference the commit before it for rebase.
    fixupRev=$(git-commitid "$fixupCommit") || exit $?

    git-wrapper commit --fixup="${fixupType}${fixupType:+:}$fixupRev" "${gitCommitArgs[@]:0:$((${#gitCommitArgs[@]}-1))}" "${files[@]}" || exit $?
    exec git-autostash rbni "${fixupRev}^"
else
    # --fixup will do good error handling for us ("fatal: could not lookup commit
    # :/doesNotExist), just pass it along.
    exec git-wrapper commit --fixup="${fixupType}${fixupType:+:}$fixupCommit" "${gitCommitArgs[@]:0:$((${#gitCommitArgs[@]}-1))}" "${files[@]}"
fi
