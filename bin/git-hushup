#!/bin/bash
set -o pipefail

: ${GIT_HUSHUP_PROGRESS_SINK=addendum}

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly libDir="${projectDir}/lib"

printUsage()
{
    cat <<HELPTEXT
Remove some not so important lines from git pull / fetch, and declutter the output.
HELPTEXT
    printf 'Usage: git pull|fetch [...] | [GIT_HUSHUP_PROGRESS_SINK=SINK] %q %s\n' "$(basename "$1")" '[--fetch] <remote> [-?|-h|--help]'
}
isFetch=
hasProgressSink=
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
    --fetch)		shift; isFetch=t;;
esac
remote="${1:?}"; shift

if git hassubmodules; then
    action='Pulling'; [ "$isFetch" ] && action='Fetching'
    hasProgressSink=t
    exec 3> >(progressNotification --to "$GIT_HUSHUP_PROGRESS_SINK" --prepend-count 'submodule' --initial-report "$action $(git-wcname)" 2>/dev/null)

    isFetch=t    # Submodules can lead to fetches, so we need to enable fetch processing by default.
fi

massageOutput()
{
    local masterBranch="$(git-mbr)"
    sed --unbuffered \
	-e "/^ \\* branch \+${masterBranch} \+-> FETCH_HEAD\$/d" \
	-e '/^ \(create\|delete\) mode /d' \
	-e '/^Already up to date\.$/d' \
	-e 's#^\( .\+\)\([^ ]\+\) \+-> \+\('"$remote"'/\)\?\2$#\1\2#' \
	-e "/\\(^\\|\\n\\|\\r\\|\\[K\\)Successfully rebased and updated \\(detached HEAD\\|refs\\/heads\\/${masterBranch}\\)\\.\$/d" \
	-e '/Auto packing the repository in background for optimum performance\.$/d' \
	-e '/See "git help gc" for manual housekeeping\.$/d' \

}

submoduleProgress()
{
    sed --unbuffered \
	-e h \
	-e 's/^Fetching submodule /Fetching /' \
	-e T \
	-e 'w /dev/fd/3' \
	-e 'g' \

}

suppressOnlyVersionTags()
{
    sed --unbuffered \
	-e '/^From /!b' \
	-e :loop \
	-e N \
	-e '/\n\(Fetching\|From\) /{
		s/^.*\n//
		b
	    }' \
	-e '/\n \* \[new tag\] \+[0-9.]\+$/!b' \
	-e '$d' \
	-e 'b loop' \

}

declutterOutput()
{
    sed --unbuffered \
	-e '/^From / {
		$d
		N
		/\nNo changes in '"$remote"'/ {
		    N
		    /\nEverything up-to-date$/d
		}

		x
		/./ { x; s/^From [^\n]*\n//; s/^No changes in '"$remote"'[^\n]*\n//; b; }
		g
	    }'
}

joinReferencesLines()
{
    awk -F '[[:space:]]+->[[:space:]]+|[[:space:]]+' \
	-v "remote=${remote//\\/\\\\}" \
	--file "${libDir}/versionCompare.awk" --source '
function output(text)
{
    if (submodule == "")
	print text
    else
	printf("   %-14s %s\n", submodule, text)
}
function printJoinedReferences(      what)
{
    for (what in n) {
	asort(news[what], news[what], "versionCompare")
	output(sprintf("%-21s", prefix[what] "[" n[what] " " what (n[what] == 1 ? "" : (what ~ /ch$/ ? "e" : "") "s") "]") join(news[what], 1, n[what], ", "))
    }

    delete prefix
    delete news
    delete n
}
BEGIN {
    PROCINFO["sorted_in"] = "@ind_str_asc"
    deletedWhat = "deleted ref"
}
$1 == "Fetching" && $2 == "submodule" {
    printJoinedReferences()
    $1 = ""; $2 = ""; sub(OFS, ""); sub(OFS, ""); submodule = $0
    next
}
$2 == "*" && $3 == "[new" && NF == 5 {
    $4 = substr($4, 1, length($4) - 1)
    newWhat = substr($3, 2) " " $4
    prefix[newWhat] = " " $2 " "
    news[newWhat][++n[newWhat]] = $5
    next
}
$2 ~ /^[x-]$/ && $3 == "[deleted]" && $4 == "(none)" && NF == 5 {
    prefix[deletedWhat] = " " $2 " "
    ref = (substr($5, 1, length(remote) + 1) == remote "/" ? substr($5, length(remote) + 2) : $5)
    news[deletedWhat][++n[deletedWhat]] = ref
    next
}
$1 == "From" {
    printJoinedReferences()
    if (submodule != "") next
}
$1 == "To" { printJoinedReferences() }
$1 == "Updating" { submodule = "" }
{ output($0) }
END { printJoinedReferences() }
'
}

readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"
eval "${DEBUG:+debugtee --for $scriptName |} massageOutput | ${hasProgressSink:+submoduleProgress | }${isFetch:+suppressOnlyVersionTags | joinReferencesLines | }declutterOutput"
