#!/bin/bash
set -o pipefail

: ${GIT_INOUT_COLOR_TITLE=[1m}
: ${GIT_INOUT_COLOR_HEADER=}
: ${GIT_INOUT_COLOR_IN=[3m}
: ${GIT_INOUT_COLOR_OUT=[1m}
: ${GIT_INOUT_COLOR_RESET=[0m}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--one-more|--no-rebase-detection [--one-more]|--stat|--ahead-behind [--indicator-only]|--is-ahead|--is-behind|--files|--submodules] [--ignore-nonexisting] [<remote>|(<branch>|<commit> [<other-branch>|<other-commit>])] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[...]  [--base <remote>|(--base <branch>|--base <commit> [<other-branch>|<other-commit>])]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show incoming and outgoing commit logs between current / passed <branch> and its
remote tracked branch / passed <other-branch> / passed <commit> and
<other-commit> / corresponding remote branch of passed <remote>.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --one-more		Show one more commit (greyed out) beyond the incoming /
			outgoing ones.
    --no-rebase-detection
			Do not detect rebased commits that have identical author
			names + email + date + commit summary, but simply list
			rebased commits under both incoming and outgoing.
    --stat		Just print a one-line summary of chronological changes;
			from oldest commit to newest, every commit is
			represented by either ${GIT_INOUT_COLOR_IN}i${GIT_INOUT_COLOR_RESET} or ${GIT_INOUT_COLOR_OUT}o${GIT_INOUT_COLOR_RESET}.
    --ahead-behind	Just print a one-line summary like "git status":
			BASE...BRANCH [ahead 2, behind 1]
    --is-ahead		Just indicate whether BASE is purely ahead (but not
			behind) of BRANCH via the exit status (1 if not, 99 if
			neither ahead nor behind) and print the number of
			commits.
    --is-behind		Just indicate whether BASE is purely behind (but not
			ahead) of BRANCH via the exit status (1 if not, 99 if
			neither ahead nor behind) and print the number of
			commits.
    --files		Print the names of changed files (separated into in,
			out, and both) instead of commit logs.
    --submodules	Print the names of submodules that were modified
			(separated into in, out, and both) instead of commit
			logs.
    --ignore-nonexisting
			Don't print an error if a passed ref does not exist;
			simply output nothing then.
HELPTEXT
}

typeset -a colorArg=()
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ -t 1 ]; then
    colorArg=(--color=always)
else
    pager=()
fi
base=
isIgnoreNonexisting=
action=inout
inoutLogAction=onelinelog
filesSourceCommand='git-showfiles'
isIndicatorOnly=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--base)		shift
			if [ -n "$base" ]; then
			    echo 'ERROR: Only one --base allowed.'
			    echo
			    printUsage "$0"
			    exit 2
			fi >&2
			base="${1:?}"
			shift
			;;
	--one-more)	shift; inoutLogAction=onemore;;
	--no-rebase-detection)
			shift; action=inoutPlain;;
	--stat)		shift; action=inoutStat;;
	--ahead-behind)	shift; action=aheadBehind;;
	--is-ahead)	shift; action=isAhead; pager=();;
	--is-behind)	shift; action=isBehind; pager=();;
	--indicator-only)
			shift; isIndicatorOnly=t;;
	--files)	shift; action=showfiles;;
	--submodules)	shift; action=showfiles; filesSourceCommand='git-showsubmodules';;
	--ignore-nonexisting)
			shift; isIgnoreNonexisting=t;;
	--color=auto)	shift;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1=$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ "${colorArg[*]}" = '--color=always' ] || unset "${!GIT_INOUT_COLOR_@}"

ensureValidRef()
{
    local ref="${1:?}"; shift
    if ! git rev-parse --verify --quiet "$ref" >/dev/null 2>&1; then
	[ "$isIgnoreNonexisting" ] || printf >&2 'ERROR: %s does not exist!\n' "$ref"
	exit 1
    fi
}

baseName=
otherName=
[ -n "$base" ] && set -- "$base" "$@"
case $# in
    2)	if ! [[ "$1" =~ / ]] && git-existsremote "$1"; then
	    if otherRev="$(git-remotebr "$1" "$2" 2>/dev/null)"; then
		shift
		baseRev="$(git-desc "$1")" || exit $?; shift
	    else
		baseRev="${2#$1/}"
		shift
		otherRev="$(git-desc "$1")" || exit $?; shift
	    fi
	    shift
	else
	    baseRev="$(git-desc "$1")" || exit $?; shift
	    otherRev="$(git-desc "$1")" || exit $?; shift
	fi
	;;
    1)	baseRev="$(git-brname --raw)" && baseName="$(git-brname --detached-effective-branch)" || exit $?
	case "$1" in
	    */*)    otherRev="$1";;
	    *)	    if git-existsremote "$1"; then
			otherRev="$(git-remotebr "$1" --detached-effective-branch)" || exit $?
		    else
			otherRev="$(git-desc "$1")" || exit $?
		    fi
		    ;;
	esac
	shift
	;;
    0)	baseRev="$(git-brname --raw)" && baseName="$(git-brname --detached-effective-branch)" || exit $?
	otherRev="$(git tracks)" || exit $?
	;;
    *)	printUsage >&2 "$0"
	exit 2
	;;
esac

ensureValidRef "$baseRev"
ensureValidRef "$otherRev"

onelinelog()
{
    GIT_ONELINELOG_DIRECT_ARG=--no-pager git-onelinelog "${colorArg[@]}" "${1}..${2}"
}
onemore()
{
    GIT_ONELINELOG_DIRECT_ARG=--no-pager git-rev-range --revision "$1" --end-revision "$2" --one-more-command greyonelinelog \
	onelinelog "${colorArg[@]}"
}

inoutPlain()
{
    local status=1
    local padding=$'\n'
    $inoutLogAction "$baseRev" "$otherRev" | \
	outputAndPrintf '%sincoming %s -> %s:%s\n' "$GIT_INOUT_COLOR_TITLE" "${otherName:-$otherRev}" "${baseName:-$baseRev}" "$GIT_INOUT_COLOR_RESET" && \
	    status=0 || padding=''

    $inoutLogAction "$otherRev" "$baseRev" | \
	outputAndPrintf '%s%soutgoing %s -> %s:%s\n' "$padding" "$GIT_INOUT_COLOR_TITLE" "${baseName:-$baseRev}" "${otherName:-$otherRev}" "$GIT_INOUT_COLOR_RESET" && \
	    status=0

    return $status
}

inout()
{
    typeset -A incomingKeys=()
    local count=0 line; while IFS=$'\n' read -r line
    do
	incomingKeys["$line"]=$((++count))
    done < <(git log --pretty='tformat:%aN %aE %at %s' "$baseRev..$otherRev")

    typeset -A incomingRebasedIndices=() outgoingRebasedIndices=()
    count=0; while IFS=$'\n' read -r line
    do
	let count+=1
	if [ "${incomingKeys["$line"]}" ]; then
	    incomingRebasedIndices["${incomingKeys["$line"]}"]=t
	    outgoingRebasedIndices[$count]=t
	fi
    done < <(git log --pretty='tformat:%aN %aE %at %s' "$otherRev..$baseRev")

    typeset -a incoming=() outgoing=() rebasedIncoming=() rebasedOutgoing=()
    count=0; while IFS=$'\n' read -r line
    do
	let count+=1
	# Just record the first field (commit hash) for the incoming rebased
	# commits - the author date and subject itself are identical and need
	# not be shown twice.
	[ "${incomingRebasedIndices[$count]}" ] \
	    && rebasedIncoming+=("${line%% *}") \
	    || incoming+=("$line")
    done < <($inoutLogAction "$baseRev" "$otherRev")
    count=0; while IFS=$'\n' read -r line
    do
	let count+=1
	[ "${outgoingRebasedIndices[$count]}" ] \
	    && rebasedOutgoing+=("$line") \
	    || outgoing+=("$line")
    done < <($inoutLogAction "$otherRev" "$baseRev")

    local status=1
    local padding=''
    if [ ${#rebasedOutgoing[@]} -gt 0 ]; then
	printf '%srebased %s <-> %s:%s\n' "$GIT_INOUT_COLOR_TITLE" "${otherName:-$otherRev}" "${baseName:-$baseRev}" "$GIT_INOUT_COLOR_RESET"
	# Only take the commit hash from the incoming and the full onelinelog line from the outgoing.
	local i; for ((i = 0; i < ${#rebasedOutgoing[@]}; i++))
	do
	    printf '%s / %s\n' "${rebasedIncoming[$i]}" "${rebasedOutgoing[$i]}"
	done
	status=0
	padding=$'\n'
    fi
    if [ ${#incoming[@]} -gt 0 ]; then
	printf '%s%sincoming %s -> %s:%s\n' "$padding" "$GIT_INOUT_COLOR_TITLE" "${otherName:-$otherRev}" "${baseName:-$baseRev}" "$GIT_INOUT_COLOR_RESET"
	printf '%s\n' "${incoming[@]}"
	status=0
	padding=$'\n'
    fi
    if [ ${#outgoing[@]} -gt 0 ]; then
	printf '%s%soutgoing %s -> %s:%s\n' "$padding" "$GIT_INOUT_COLOR_TITLE" "${baseName:-$baseRev}" "${otherName:-$otherRev}" "$GIT_INOUT_COLOR_RESET"
	printf '%s\n' "${outgoing[@]}"
	status=0
    fi

    return $status
}

inoutStat()
{
    typeset -a incoming=() outgoing=() symbols=()
    readarray -t incoming < <(git log --pretty=$'tformat:%ct\t'"${GIT_INOUT_COLOR_IN}i${GIT_INOUT_COLOR_RESET}" "$baseRev..$otherRev")
    readarray -t outgoing < <(git log --pretty=$'tformat:%ct\t'"${GIT_INOUT_COLOR_OUT}o${GIT_INOUT_COLOR_RESET}" "$otherRev..$baseRev")
    readarray -t symbols < <(printf '%s\n' "${incoming[@]}" "${outgoing[@]}" | sort -n | cut -f2-)
    local symbolString; printf -v symbolString %s "${symbols[@]}"

    if [ ${#incoming[@]} -gt 0 -a ${#outgoing[@]} -eq 0 ]; then
	printf '%sincoming %s -> %s: %s%s\n' "$GIT_INOUT_COLOR_HEADER" "${otherName:-$otherRev}" "${baseName:-$baseRev}" "$GIT_INOUT_COLOR_RESET" "$symbolString"
    elif [ ${#incoming[@]} -eq 0 -a ${#outgoing[@]} -gt 0 ]; then
	printf '%soutgoing %s -> %s: %s%s\n' "$GIT_INOUT_COLOR_HEADER" "${baseName:-$baseRev}" "${otherName:-$otherRev}" "$GIT_INOUT_COLOR_RESET" "$symbolString"
    elif [ ${#incoming[@]} -gt 0 -a ${#outgoing[@]} -gt 0 ]; then
	printf '%sin/out  %s <-> %s: %s%s\n' "$GIT_INOUT_COLOR_HEADER" "${baseName:-$baseRev}" "${otherName:-$otherRev}" "$GIT_INOUT_COLOR_RESET" "$symbolString"
    else
	return 1
    fi
}

aheadBehind()
{
    local behind; behind=$(git log --pretty=$'tformat:x' "$baseRev..$otherRev" | wc -l)
    local ahead ;  ahead=$(git log --pretty=$'tformat:x' "$otherRev..$baseRev" | wc -l)
    local indicator
    [ $ahead -gt 0 ]  && printf -v indicator 'ahead %d' $ahead
    [ $behind -gt 0 ] && printf -v indicator '%sbehind %d' "${indicator}${indicator:+, }" $behind

    if [ -n "$indicator" ]; then
	if [ "$isIndicatorOnly" ]; then
	    printf '%s%s%s\n' "$GIT_INOUT_INDICATOR_PREFIX" "$indicator" "$GIT_INOUT_INDICATOR_SUFFIX"
	else
	    printf '%s%s...%s %s\n' "$GIT_INOUT_COLOR_HEADER" "${baseName:-$baseRev}" "${otherName:-$otherRev}" "${GIT_INOUT_INDICATOR_PREFIX-[}${indicator}${GIT_INOUT_INDICATOR_SUFFIX-]}"
	fi
    else
	return 1
    fi
}

isAhead()
{
    local behind; behind=$(git log --pretty=$'tformat:x' "$baseRev..$otherRev" | wc -l)
    local ahead ;  ahead=$(git log --pretty=$'tformat:x' "$otherRev..$baseRev" | wc -l)
    if [ $ahead -gt 0 -a $behind -eq 0 ]; then
	printf '%d\n' "$ahead"
    else
	echo 0

	if [ $ahead -eq 0 -a $behind -eq 0 ]; then
	    return 99
	else
	    return 1
	fi
    fi
}
isBehind()
{
    local behind; behind=$(git log --pretty=$'tformat:x' "$baseRev..$otherRev" | wc -l)
    local ahead ;  ahead=$(git log --pretty=$'tformat:x' "$otherRev..$baseRev" | wc -l)
    if [ $behind -gt 0 -a $ahead -eq 0 ]; then
	printf '%d\n' "$behind"
    else
	echo 0

	if [ $ahead -eq 0 -a $behind -eq 0 ]; then
	    return 99
	else
	    return 1
	fi
    fi
}

showfiles()
{
    typeset -a incoming=() outgoing=()
    readarray -t incoming < <($filesSourceCommand "$baseRev..$otherRev")
    readarray -t outgoing < <($filesSourceCommand "$otherRev..$baseRev")

    if [ ${#incoming[@]} -gt 0 -a ${#outgoing[@]} -eq 0 ]; then
	printf '%sincoming %s -> %s:%s\n' "$GIT_INOUT_COLOR_TITLE" "${otherName:-$otherRev}" "${baseName:-$baseRev}" "$GIT_INOUT_COLOR_RESET"
	printf '%s\n' "${incoming[@]}"
    elif [ ${#incoming[@]} -eq 0 -a ${#outgoing[@]} -gt 0 ]; then
	printf '%soutgoing %s -> %s:%s\n' "$GIT_INOUT_COLOR_TITLE" "${baseName:-$baseRev}" "${otherName:-$otherRev}" "$GIT_INOUT_COLOR_RESET"
	printf '%s\n' "${outgoing[@]}"
    elif [ ${#incoming[@]} -gt 0 -a ${#outgoing[@]} -gt 0 ]; then
	typeset -a onlyIn onlyOut bothInOut
	readarray -t onlyIn < <(comm -23 <(printf '%s\n' "${incoming[@]}") <(printf '%s\n' "${outgoing[@]}"))
	readarray -t onlyOut < <(comm -13 <(printf '%s\n' "${incoming[@]}") <(printf '%s\n' "${outgoing[@]}"))
	readarray -t bothInOut < <(comm -12 <(printf '%s\n' "${incoming[@]}") <(printf '%s\n' "${outgoing[@]}"))

	padding=''
	if [ ${#onlyIn[@]} -gt 0 ]; then
	    printf '%s%sincoming %s -> %s:%s\n' "$padding" "$GIT_INOUT_COLOR_TITLE" "${otherName:-$otherRev}" "${baseName:-$baseRev}" "$GIT_INOUT_COLOR_RESET"
	    printf '%s\n' "${onlyIn[@]}"
	    padding=$'\n'
	fi
	if [ ${#onlyOut[@]} -gt 0 ]; then
	    printf '%s%soutgoing %s -> %s:%s\n' "$padding" "$GIT_INOUT_COLOR_TITLE" "${baseName:-$baseRev}" "${otherName:-$otherRev}" "$GIT_INOUT_COLOR_RESET"
	    printf '%s\n' "${onlyOut[@]}"
	    padding=$'\n'
	fi
	if [ ${#bothInOut[@]} -gt 0 ]; then
	    printf '%s%sboth    %s <-> %s:%s\n' "$padding" "$GIT_INOUT_COLOR_TITLE" "${baseName:-$baseRev}" "${otherName:-$otherRev}" "$GIT_INOUT_COLOR_RESET"
	    printf '%s\n' "${bothInOut[@]}"
	    padding=$'\n'
	fi
    else
	return 1
    fi
}

eval '$action "$@"' "${pager:+|}" '"${pager[@]}"'
