#!/bin/bash

: ${GIT_INSIDE_COMMAND_JOINER=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--from-root] [-s|--skip-foreign|--foreign-command "COMMANDLINE"] -c|--command "COMMANDLINE" [-c ...] | SIMPLECOMMAND [...] -- [...] -- FILE|DIR [...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--from-root] [-s|--skip-foreign|--foreign-command "COMMANDLINE"] -c|--command "COMMANDLINE" [-c ...] | SIMPLECOMMAND [...] [--] FILE|DIR [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute "git SIMPLECOMMAND" and/or COMMANDLINE (which probably contains Git
command(s)) inside the working copy that FILE or DIR resides in. (Most Git
commands only work from within the working copy.)
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --command|-c CMD	    The command line to be executed. When this is a
			    simple command, it can also be passed as such.
			    Within CMD, you can refer to the corresponding
			    FILE|DIR via \$FILE, and to the root directory of
			    the Git working copy as \$ROOT (both with absolute
			    paths, also in SIMPLECOMMAND when it's a separate
			    argument).
    --from-root|-r	    Use the Git working copy root directory instead of
			    DIR / the directory of FILE for executing CMD.
    --skip-foreign|-s	    Silently skip FILEs|DIRs that are not inside a Git
			    working copy (instead of printing an error message).
    --foreign-command CMD   Execute CMD in (accessible) directories that are not
			    inside a Git working copy (e.g. to initialize a Git
			    repo).
HELPTEXT
}

isFromRoot=
isSkipForeign=
foreignCommands=
commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--from-root|-r)	    shift; isFromRoot=t;;
	--skip-foreign|-s)  shift; isSkipForeign=t;;
	--foreign-command)  shift; foreignCommands+="${foreignCommands:+ $GIT_INSIDE_COMMAND_JOINER }$1"; shift;;
	--command|-c)	    shift; commands+="${commands:+ $GIT_INSIDE_COMMAND_JOINER }$1"; shift;;
	--)		    break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done

# Capture all FILE|DIR args after the (last, mandatory) --.
typeset -a fileArgs=()
for ((i = $#; i > 0; i--))
do
    if [ "${*:$i:1}" = '--' ]; then
	fileArgs=("${@:$((i+1))}")
	set -- "${@:1:$((i-1))}"
	break
    fi
done
if [ ${#fileArgs[@]} -eq 0 ]; then
    # No files after -- captured yet; need to investigate remaining args from
    # behind for files.
    while [ $# -ne 0 ]
    do
	lastArg="${!#}"
	[ -e "$lastArg" ] || break
	fileArgs+=("$lastArg")
	[ $# -eq 0 ] && set -- || set -- "${@:1:$(($#-1))}"
    done
fi

readonly gitCommand='git-wrapper'
if [ $# -gt 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    # Due to quoting, $FILE etc. would not be evaluated in SIMPLECOMMAND; we have
    # skip shell quoting for these variables.
    quotedSimpleCommand=
    for c in "$gitCommand" "$@"
    do
	[[ "$c" =~ ^\$(FILE|ROOT)$ ]] || printf -v c %q "$c"
	quotedSimpleCommand+="$c "
    done
    commands+="${commands:+ $GIT_INSIDE_COMMAND_JOINER }${quotedSimpleCommand% }"
fi
if [ -z "$commands" ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
elif [ ${#fileArgs[@]} -eq 0 ] || [ $# -eq 1 -a "$1" = '--' ]; then
    echo 'ERROR: No FILE(s) specified; need a FILE|DIR for the working copy location.'
    echo
    printUsage "$0"
    exit 2
fi >&2

# If we're launched from within a Git operation (e.g. the external editor opened
# by git commit), the environment variable GIT_DIR may have been set, and this
# causes the Git commands here to not find the repository for FILEs.
unset GIT_DIR

# As we change directories, need to first convert all passed FILEs to absolute
# filespecs.
typeset -a files=()
for fileArg in "${fileArgs[@]}"
do
    files+=("$(realpath --no-symlinks -- "$fileArg")")
done

status=0
for FILE in "${files[@]}"
do
    if [ -d "$FILE" ]; then
	dirspec="$FILE"
    else
	dirspec=$(dirname -- "$FILE") || { status=$?; continue; }
    fi
    if [ ! -d "$dirspec" ]; then
	printf >&2 'ERROR: The directory %s (of %s) does not exist!\n' "$dirspec" "$FILE"
	status=1; continue
    fi
    if ! cd "$dirspec" 2>/dev/null; then
	printf >&2 'ERROR: Cannot chdir to %s (for %s)!\n' "$dirspec" "$FILE"
	status=1; continue
    fi
    if ! ROOT=$(git root 2>/dev/null); then
	# FILE may directly refer to the root of the working copy; try that,
	# too.
	if [ ! -d "$FILE" ] || ! cd "$FILE" || ! ROOT=$(git root 2>/dev/null); then
	    if [ -n "$foreignCommands" ]; then
		eval "$foreignCommands"
	    elif [ ! "$isSkipForeign" ]; then
		printf >&2 'ERROR: %s is not inside a Git working copy!\n' "$FILE"
		status=1
	    fi
	    continue
	fi
    fi
    if [ "$isFromRoot" ];then
	if ! cd "$ROOT" 2>/dev/null; then
	    printf >&2 'ERROR: Cannot chdir to %s (for %s)!\n' "$ROOT" "$FILE"
	    status=1; continue
	fi
    fi

    eval "$commands" || status=$?
done
exit $status
