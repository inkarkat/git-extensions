#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Test whether the last commit / <commit> has been created by a merge.
(In other words, whether it has multiple parents.)
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--single-branch] [<commit>] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Print all parent commits of the last commit / <commit>.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--print] [<commit>] [-?|-h|--help]'
}
typeset -a countArg=(--count)
typeset -a compareArgs=(-gt 1)
action=countParents
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
    --single-branch)	shift; compareArgs=(-eq 2);;
    --print|-p)		shift; countArg=(); action=printParents;;
esac
case $# in
    0)	commit=HEAD;;
    1)	commit="$1"; shift;;
    *)	printUsage "$0" >&2; exit 2;;
esac

getParents()
{
    git rev-list --no-walk "${countArg[@]}" "${commit}^@"
}

countParents()
{
    mergeCount="$(getParents)" || exit $?	# The ^@ suffix means "all parents".
    [ ${mergeCount:-0} "${compareArgs[@]}" ]
}

printParents()
{
    getParents \
	| tac	# XXX: The merges are listed in reversed order; i.e. the first parent comes last.
}

$action
