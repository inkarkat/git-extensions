#!/bin/bash
# Source: https://stackoverflow.com/a/7359782/813602

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-p|--print|-t|--print-toplevel] [--] [FILESPEC] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Test whether the current working copy / passed FILESPEC is a submodule of
another repository.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --print|-p		Also print the dirspec of the (immediate) superproject
			repository root.
    --print-toplevel|-t	Also print the dirspec of the topmost repository root.
HELPTEXT
}
isPrint=
isToplevel=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--print|-p)	shift; isPrint=t;;
	--print-toplevel|-t)
			shift; isPrint=t; isToplevel=t;;
	--)		shift; break;;
	*)		break;;
    esac
done
case $# in
    0)	;;
    1)	if [ -d "$1" ]; then
	    dirspec="$1"
	else
	    dirspec="$(dirname -- "$1")"
	fi
	[ "$dirspec" = '.' ] || cd "$dirspec" || exit 3
	;;
    *)	printUsage "$0" >&2
	exit 2
	;;
esac

superprojectDirspec="$(git rev-parse --show-superproject-working-tree)" || exit 3
[ -n "$superprojectDirspec" ] || exit 1

if [ "$isPrint" ]; then
    if [ "$isToplevel" ]; then
	cd "$superprojectDirspec" 2>/dev/null \
	    && git-issubmodule --print-toplevel \
	    || printf '%s\n' "$superprojectDirspec"
    else
	printf '%s\n' "$superprojectDirspec"
    fi
fi
