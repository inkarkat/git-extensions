#!/bin/bash

: ${GIT_LGHIGHLIGHT_LG:=lg}
: ${GIT_LGHIGHLIGHTEDCOMMITS_ARGS_MARKER='{}'}
argsMarker="$GIT_LGHIGHLIGHTEDCOMMITS_ARGS_MARKER"; unset GIT_LGHIGHLIGHTEDCOMMITS_ARGS_MARKER

printUsage()
{
    cat <<HELPTEXT
git ${GIT_LGHIGHLIGHT_LG}, with passed <commit>(s) highlighted.
With --range-to-last-commit, the range will be ended at the last given commit;
naturally, no log range can then be given.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--range-to-last-commit [--one-more]] <commit> [...] [GIT-LOG-ARGUMENTS ...] [<revision range>] [[--] <path>...] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
git ${GIT_LGHIGHLIGHT_LG}, with commits that result from GIT-LOG-COMMAND (which will be configured
to output just commit hashes) highlighted. That argument and GIT-LOG-ARGUMENTS
${argsMarker:+replace a $argsMarker marker in GIT-LOG-COMMAND or }will be appended.
With --except-last, the last argument will only be passed to GIT-LOG-COMMAND,
but not to git ${GIT_LGHIGHLIGHT_LG}.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--range-to-last-commit [--one-more]] [--except-last] GIT-LOG-COMMAND [GIT-LOG-ARGUMENTS ...] [<revision range>] [[--] <path>...]'
}

isRangeToLastCommit=
isOneMore=
typeset -a lastArg=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--range-to-last-commit)
			shift; isRangeToLastCommit=t;;
	--one-more)	shift; isOneMore=t;;
	--except-last)	shift
			if [ $# -gt 0 ]; then
			    lastArg=("${!#}")
			    set -- "${@:1:$(($#-1))}"
			fi
			;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    echo 'ERROR: No <commit> / GIT-LOG-COMMAND passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2

typeset -a commits=()
while commit="$(git rev-parse --short "$1" 2>/dev/null)"
do
    shift
    commits+=("$commit")
done
if [ ${#commits[@]} -eq 0 ]; then
    gitLogCommand="${1:?}"; shift

    typeset -a logArgs=(--pretty=tformat:%h "$@" "${lastArg[@]}")
    printf -v quotedLogArgs '%q ' "${logArgs[@]}"; quotedLogArgs="${quotedLogArgs% }"
    interpolatedGitLogCommand="${gitLogCommand//"$argsMarker"/$quotedLogArgs}"
    [ "$interpolatedGitLogCommand" = "$gitLogCommand" ] || logArgs=()

    readarray -t commits < <(eval "$interpolatedGitLogCommand" '"${logArgs[@]}"')
    if [ ${#commits[@]} -eq 0 ]; then
	echo >&2 'No commits found.'
	exit 1
    fi
fi

if [ "$isRangeToLastCommit" ]; then
    set -- "${commits[-1]}^${isOneMore:+^}".. "$@"
fi

IFS=' '
concatenatedCommits="${commits[*]}"
concatenatedCommitsPattern="^\\([ |/\\*]\\|\\x1b\\[[0-9:;]*m\\)\\+ \\(\\x1b\[[0-9:;]*m\\)*\\(${concatenatedCommits// /\\|}\\)\\(\\x1b\\[[0-9:;]*m\\)* "

GIT_LGHIGHLIGHT_RAW_PATTERN=t exec git-lghighlight --grep "$concatenatedCommitsPattern" "$@"
