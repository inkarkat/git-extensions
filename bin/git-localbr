#!/bin/bash
set -o pipefail
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--include-current] [--include-master] [--include-base] [--include-all] [-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]] [--sort <key> [--sort ...]] [--] [<branch-glob> ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
List all local (ordered by last commit age (descending, starting with branches
that haven't been updated recently)) (except for the current branch and master
(and base branch if defined)).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    -n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]
			Only print those branches that match the age comparison.
SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours, 'd'
for days, 'w' for weeks, 'mo' for months, 'y' for years, 'g' for generations.
    <branch-glob>	Only consider branches that match <branch-glob>.
HELPTEXT
}

typeset -a sortArgs=()
typeset -a branchFilters=()
typeset -a filterAction=(sed -e 's/^[^\t]*\t//')
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--include-*)	branchFilters+=("$1"); shift;;
	--sort)		sortArgs+=("$1" "$2"); shift; shift;;
	--sort=*)	sortArgs+=("$1"); shift;;
	-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt)
			filterAction=(filterAge --field-separator $'\t' "$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

getBranchRecords()
{
    typeset -a localBranchRecords=()
    readarray -t localBranchRecords < <(git for-each-ref "${sortArgs[@]:---sort=committerdate}" --format=$'%(committerdate:unix)\t%(refname:short)' refs/heads/)
    [ ${#localBranchRecords[@]} -gt 0 ] || return 1

    if [ $# -gt 0 ]; then
	typeset -A matchedBranchRecords=()
	local branchRecord; while IFS=$'\n' read -r branchRecord
	do
	    matchedBranchRecords["$branchRecord"]=t
	done < <(local glob; for glob
	    do
		filterGlob $'*\t'"$glob" "${localBranchRecords[@]}"
	    done
	)

	status=1
	for branchRecord in "${localBranchRecords[@]}"
	do
	    if [ "${matchedBranchRecords["$branchRecord"]}" ]; then
		printf '%s\n' "$branchRecord"
		status=0
	    fi
	done
	return $status
    else
	printf '%s\n' "${localBranchRecords[@]}"
    fi
}

getBranchRecords "$@" \
    | "${filterAction[@]}" \
    | git-filter-out-persistent-branches "${branchFilters[@]}"
