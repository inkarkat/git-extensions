#!/bin/bash
set -o pipefail
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
List all local (sorted by last commit age (descending, starting with branches
that haven't been updated recently)) / branches matching <glob> (except for the
current branch and master (and base branch if defined)).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--include-current] [--include-master] [--include-base] [--include-all] [--] [<glob> ...] [-?|-h|--help]'
}

typeset -a branchFilters=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			    shift;;
	--color)	    shift; shift;;
	--include-*)	    branchFilters+=("$1"); shift;;
	--)		    shift; break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done

getBranches()
{
    typeset -a localBranches=()
    readarray -t localBranches < <(git for-each-ref --sort=committerdate --format='%(refname:short)' refs/heads/)
    [ ${#localBranches[@]} -gt 0 ] || return 1

    if [ $# -gt 0 ]; then
	typeset -A matchedBranches=()
	local branch; while IFS=$'\n' read -r branch
	do
	    matchedBranches["$branch"]=t
	done < <(local glob; for glob
	    do
		filterGlob "$glob" "${localBranches[@]}"
	    done
	)

	status=1
	for branch in "${localBranches[@]}"
	do
	    if [ "${matchedBranches["$branch"]}" ]; then
		printf '%s\n' "$branch"
		status=0
	    fi
	done
	return $status
    else
	printf '%s\n' "${localBranches[@]}"
    fi
}

getBranches "$@" | \
    git-filter-out-persistent-branches "${branchFilters[@]}"
