#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${GIT_LOCALBRDO_BRANCHES_END=;}
: ${GIT_LOCALBRDO_SOURCE_COMMAND:=git-localbr}

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s%s %s\n' "$(basename "$1")" '[-q|--quiet] [--no-pager] [--no-header]' "${hasProgressNotification:+ [--progress SINK]}" "[-i|--interactive] [--separate-errors] [--no-git-color] [--single-success] [--status-99-is-noop] [--abort-on-failure|-X|--abort-on EXIT_STATUS] [--interrupt-on-failure|--interrupt-on EXIT_STATUS] [--continue|--abort|--stashed] [--include-current] [--include-master] [--include-base] [--include-all] [--branches BRANCH [...] ${GIT_LOCALBRDO_BRANCHES_END}] [--detach] [(--submodules|--queried-submodules) [--submodules-recursive]] [-B N|--max-branch N] [[--not] -P|--predicate-command \"COMMANDLINE\" [...]] [-c|--command \"COMMANDLINE\" [-c ...] | [--] SIMPLECOMMAND [...]] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Check out all / the last committed N local branches (except for the current
branch and master (and base branch if defined)) one by one and execute "git
SIMPLECOMMAND" and/or COMMANDLINE on each branch.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
If no COMMAND is given, just performs the checkout and returns to the shell; the
next iteration is then triggered by re-executing with --continue, which can also
be used to continue with COMMAND execution in case an unclean exit or a
left-behind dirty working copy made the command to fall out of the iteration.
COMMAND execution puts a header line (unless --no-header) that contains the
current Git branch before the command output.
    --no-pager		Do not page the output (so contents will scroll out of
			view if there's too much output).
    --no-header		Do not output the header line before command output (and
			no separating empty line after it).${hasProgressNotification:+
    --progress SINK	Report the current Git branch (and count + percentage)
			through one of the SINKs of the progressNotification
			command.}
    --interactive|-i	For use with interactive COMMANDs that query the user or
			open an editor; combination of --no-pager --no-header${hasProgressNotification:+
			and --progress addendum}.
    --separate-errors	Do not combine command output and command errors into
			one (paged) stream. Commands that just cause error
			output won't have a header then. Error output will
			remain on its separate file descriptor and will not be
			paged. Useful if you want to suppress errors or handle
			them separately.
    --no-git-color	Do not pass a --color=... to "git SIMPLECOMMAND". (For
			COMMANDLINE you have to insert "\${gitColorArg[@]}"
			yourself.)
    --abort-on-failure	Abort iteration when COMMAND fails.
    --abort-on|-X EXIT_STATUS
			Abort iteration when COMMAND exits with EXIT_STATUS.
    --interrupt-on-failure
			Halt iteration when COMMAND fails. The iteration can
			then be manually restarted with --continue or aborted
			with --abort.
    --interrupt-on EXIT_STATUS
			Halt iteration when COMMAND exits with EXIT_STATUS.
    --single-success	Exit status is 0 if COMMAND succeeded in at least one
			local branch.
    --status-99-is-noop Exit status is the last failure, but 99 signifies no
			action or inapplicability, and that is only returned if
			all invocations of COMMAND return that.
    --max-branch|-B N	Only consider the last committed N local branches.
    --predicate-command|-P CMD
			Skip local branches where CMD fails. The string {}
			is replaced with the current branch name; the working
			copy isn't switched yet.
    --not		Invert the predicate so that local branches are skipped
			where CMD succeeds.
    --command|-c CMD	Execute the passed command line. When this is a simple
			Git command, it can also be passed as such:
			    $(basename "$1") [...] [--] SIMPLECOMMAND
			If omitted, will just return to the shell for each
			branch.
    --branches BRANCH [...] ;
			Only iterate over the following BRANCH(es); i.e. all
			following arguments until an argument consisting of '${GIT_LOCALBRDO_BRANCHES_END}'
			is encountered.
    --stashed		Don't create a temporary stash in case the working copy
			is dirty (as an optimization in case you know you're
			clean.)
    --detach		Detach HEAD at the tip of each branch; this avoids
			errors like "fatal: 'branch' is already checked out at
			..." with multiple worktrees, but of course also limits
			your abilities to work with the branch.
    --submodules	Also check out corresponding branches in submodules.
    --queried-submodules
			Also check out queried corresponding branches in
			submodules.
    --submodules-recursive
			Check out branches in nested submodules, too.
Note: For paging and headers, this command has to control Git's color output.
Pass --no-git-color if "git SIMPLECOMMAND" does not support the --color=...
arguments. (For COMMANDLINE you have to insert "\${gitColorArg[@]}" yourself.)
You can still pass --color=always if you pipe this command's output yet still
want coloring of headers.

EXIT STATUS
Returns 99 if no local branches found / to be considered.
Returns the last non-successful exit status. With --single-success,
non-successful executions are ignored unless all of them fail. In other words,
exit status is 0 if at least one command succeeded.
HELPTEXT
}

typeset -a args=("$@")
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
abortStatus=
abortComparison=-eq
interruptStatus=
interruptComparison=-eq
progressSink=
isInteractive=
isSingleSuccess=
isStatus99Noop=
isQuiet=
isHeader=; type -t withHeader >/dev/null && isHeader=t
errorRedir='2>&1'
isGitColor=t
typeset -a colorArg=()
isNeedEval=
predicateComparison=-eq
typeset -a predicateCommands=()
typeset -a commands=()
isStashed=
branchNum=
typeset -a sourceBranches=()
iterationAction=
typeset -a gitLocalbrArgs=()
typeset -a anyCheckoutArgs=()
typeset -a iteratingCheckoutArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--abort-on-failure) shift; abortComparison=-ne; abortStatus=0;;
	--abort-on|-X)	    shift; abortStatus="$1"; shift;;
	--interrupt-on)	    shift; interruptStatus="$1"; shift;;
	--interrupt-on-failure)
			    shift; interruptComparison=-ne; interruptStatus=0;;
	--single-success)   shift; isSingleSuccess=t;;
	--status-99-is-noop)	shift; isStatus99Noop=t;;
	--quiet|-q)	    shift; isQuiet=t;;
	--no-pager)	    shift; pager=();;
	--no-header)	    shift; isHeader=;;
	--progress)	    shift; progressSink="$1"; shift;;
	--interactive|-i)   shift; isInteractive=t; pager=(); isHeader=; progressSink='addendum';;
	--separate-errors)  shift; errorRedir='';;
	--no-git-color)	    shift; isGitColor=;;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--stashed)	    shift; isStashed=t;;
	--include-*)	    gitLocalbrArgs+=("$1"); shift;;
	--branches)	    shift
			    while [ $# -gt 0 -a "$1" != "$GIT_LOCALBRDO_BRANCHES_END" ]
			    do
				sourceBranches+=("$1")
				shift
			    done
			    if [ $# -eq 0 ]; then
				echo "ERROR: --branches must be concluded with '${GIT_LOCALBRDO_BRANCHES_END}'"; echo; printUsage "$0"
				exit 2
			    fi >&2
			    shift
			    ;;
	--continue|--abort) iterationAction="${1#--}"; shift;;
	--detach)	    iteratingCheckoutArgs+=("$1"); shift;;
	--submodules|--queried-submodules|--submodules-recursive)
			    anyCheckoutArgs+=("$1"); shift;;
	--max-branch|-B)    shift; branchNum="$1"; shift;;
	--predicate-command|-P)
			    shift; predicateCommands+=(${predicateCommands:+&&} "$1"); shift;;
	--not)		    shift; predicateComparison=-ne;;
	--command|-c)	    shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		    shift; break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done

# With piping into withHeader / pager, we need to explicitly enable color for
# Git, unless this command's output itself is redirected. Also don't do this if
# the user explicitly turned off color.
gitColorArg=()
if [ -n "$pager" -o -n "$isHeader" ] && isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    colorArg=(--color=always)	# Force for withHeader
    [ "$isGitColor" ] && gitColorArg=(--color=always)	# Force for Git
fi

typeset -a gitCommand=(git-wrapper)
if [ $# -gt 0 ]; then
    if [ ${#gitColorArg[@]} -gt 0 ]; then
	# Simply appending gitColorArg doesn't work; many Git commands have a
	# special <path> or <commit> part at the end. Place it just behind the
	# Git subcommand by iterating arguments in the same way as the various
	# git-*-command metaprograms, and moving anything that is in front from
	# $@ to gitCommand.
	case "$1" in
	    [^-]*-command)  gitCommand+=("$1"); shift
			    while [ $# -ne 0 ]
			    do
				case "$1" in
				    --)		break;;
				    -*)		gitCommand+=("$1"); shift;;
				    *)		gitCommand+=("$1"); shift; break;;
				esac
			    done
			    ;;
	    *)		    while [ $# -ne 0 ]
			    do
				case "$1" in
				    -c) gitCommand+=("$1" "$2"); shift; shift;;
				    *)	gitCommand+=("$1"); shift; break;;
				esac
			    done
	esac
	gitCommand+=("${gitColorArg[@]}")
    fi

    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "${gitCommand[@]}" "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand% }")
    else
	commands=("${gitCommand[@]}" "$@")
    fi
fi

if [ ! "$isStashed" -a -z "$iterationAction" -a ${#commands[@]} -gt 0 ]; then
    readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"
    exec git-autostash "${scriptName#git-}" --stashed "${args[@]}"
fi

gitDir="$(git rev-parse --git-dir)" || exit 3
readonly contextStoreFilespec="${gitDir}/localbr"
usedContextStore=
useContextStore()
{
    usedContextStore="$contextStoreFilespec"
}
readContext()
{
    useContextStore
    source "${usedContextStore:?}" || exit 3

    if [ ${#commands[@]} -eq 0 ]; then
	# Recall command-line from original / previous call, unless it is
	# overridden by updated arguments provided to this invocation.
	commands=("${originalCommands[@]}")
	isNeedEval="$originalIsNeedEval"
    fi

    if [ -z "$originalBranch" ]; then
	echo >&2 'FATAL: Could not restore the previous iteration context.'
	exit 3
    fi
}

persistContext()
{
    useContextStore

    typeset -a originalCommands=("${commands[@]}")  # Persist under a different name so that the user can override the original commands.
    local originalIsNeedEval="$isNeedEval"

    typeset -p localBranches originalCommands originalIsNeedEval originalBranch \
	pager abortStatus abortComparison interruptStatus interruptComparison progressSink \
	isInteractive isSingleSuccess isStatus99Noop isQuiet isHeader errorRedir \
	colorArg isStashed anyCheckoutArgs iteratingCheckoutArgs \
	GIT_LOCALBRDO_HEADER_ID \
	| sed -e 's#^declare #&-g #' > "${usedContextStore:?}"	# The sourcing is done inside a function, so "declare -g" must be used to define the variables with global scope.
}

dirtyCheck()
{
    if git-dirty --print-error --error-message 'ERROR: Working copy is still dirty; please clean up and then retry with --continue.'; then
	persistContext
	exit 1
    fi
}

abortIfDesired()
{
    local status="${1:?}"; shift

    [ -n "$abortStatus" ] || return
    if [ "$status" $abortComparison $abortStatus ];then
	[ "$isQuiet" ] || printf >&2 'Note: Aborting iteration because the command failed (with exit status %d).\n' "$status"
	restoreOriginalBranch
	exit $status
    fi
}

interruptIfDesired()
{
    local status="${1:?}"; shift

    [ -n "$interruptStatus" ] || return
    if [ "$status" $interruptComparison $interruptStatus ];then
	persistContext

	[ "$isQuiet" ] || printf >&2 'Note: Interrupting iteration because the command failed (with exit status %d). Please check and then continue with --continue.\n' "$status"
	exit $status
    fi
}

restoreOriginalBranch()
{
    git-wrapper checkout --quiet "${anyCheckoutArgs[@]}" "$originalBranch" || return $?
    [ "$isQuiet" ] || printf >&2 "Restored branch '%s'\\n" "$originalBranch"

    [ -z "$usedContextStore" ] || \
	rm -- "$usedContextStore"	# Cleanup if the context had been persisted.
}

case "$iterationAction" in
    abort)
	readContext
	restoreOriginalBranch
	exit $?
	;;
    continue)
	if [ ! -e "$contextStoreFilespec" ]; then
	    echo >&2 'ERROR: Could not find any iteration that is in progress.'
	    exit 1
	fi

	readContext
	dirtyCheck
	;;
    '')
	if [ -e "$contextStoreFilespec" ]; then
	    printf >&2 'ERROR: It looks like another iteration is in progress; you can continue that one by adding --continue. Alternatively, please clean up first by passing --abort, or run $ rm -- %q\n' "$contextStoreFilespec"
	    exit 1
	fi

	if [ ${#sourceBranches[@]} -gt 0 ] && [ ! "$GIT_LOCALBRDO_SOURCE_SORTED" ]; then
	    localBranches=("${sourceBranches[@]}")
	else
	    readarray -t localBranches < <(eval "$GIT_LOCALBRDO_SOURCE_COMMAND" '"${gitLocalbrArgs[@]}" "${sourceBranches[@]}"')
	fi
	if [ ${#localBranches[@]} -eq 0 ]; then
	    echo >&2 'No local branches found!'
	    exit 99
	fi
	[ -n "$branchNum" ]  && [ $branchNum -lt ${#localBranches[@]} ] \
	    && localBranches=("${localBranches[@]:(-$branchNum)}")
	if [ ${#predicateCommands[@]} -gt 0 ]; then
	    typeset -a filteredLocalBranches=()
	    for branch in "${localBranches[@]}"
	    do
		(eval "${predicateCommands[@]//\{\}/$branch}")
		[ $? $predicateComparison 0 ] && filteredLocalBranches+=("$branch")
	    done
	    if [ ${#filteredLocalBranches[@]} -eq 0 ]; then
		echo >&2 'No local branches to consider.'
		exit 99
	    fi
	    localBranches=("${filteredLocalBranches[@]}")
	fi
	if [ ${#commands[@]} -eq 0 ]; then
	    printf '%s\n' "${localBranches[@]}"
	    exit 0
	fi

	originalBranch="$(git-orig-ref)" || exit 3
	;;
    *)	printf >&2 'Assert: Unhandled iterationAction %q\n' "$iterationAction"
	exit 3
	;;
esac

if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
    exec 3> >(progressNotification --to "$progressSink" --prepend-count 'local branch' --count-to "${#localBranches[@]}" 2>/dev/null)

    reportProgress()
    {
	trap 'reportProgress() { :; }; trap PIPE' PIPE
	printf '%s\n' "$*" >&3 2>/dev/null  # Silence "printf: write error: Broken pipe"
    }
else
    reportProgress() { :; }
fi

localbrdo()
{
    : ${GIT_LOCALBRDO_HEADER_ID:="localbrdo-$$-$RANDOM"}
    local isSuccess= status=
    while [ ${#localBranches[@]} -gt 0 ]
    do
	local branch="${localBranches[0]}"
	localBranches=("${localBranches[@]:1}")

	git-wrapper checkout --quiet "${anyCheckoutArgs[@]}" "${iteratingCheckoutArgs[@]}" "${branch}" || exit $?	# Suppress Git's checkout information with --quiet. We're probably not interested in stuff like "Your branch is up-to-date with ...", and we emulate the switch message itself:

	reportProgress "$branch"
	[ ! "$isInteractive" ] || header "${colorArg[@]}" --id "$GIT_LOCALBRDO_HEADER_ID" -- "$branch"

	if [ "$isNeedEval" ]; then
	    typeset -a c=("${commands[@]}")
	else
	    typeset -a c=('"${commands[@]}"')
	fi
	if (eval "${isHeader:+{}" "${c[@]}" "${isHeader:+; \} $errorRedir | withHeader "${colorArg[@]}" --id '$GIT_LOCALBRDO_HEADER_ID' -- '$branch'}"); then
	    local newStatus=0
	    dirtyCheck
	else
	    local newStatus=$?
	fi

	abortIfDesired $newStatus
	interruptIfDesired $newStatus

	[ $newStatus -eq 0 ] && isSuccess=t
	if [ "$isStatus99Noop" ]; then
	    status=$(status99Reduction "$status" $newStatus)
	else
	    case $newStatus in
		0)  : ${status:=0};;
		*)  status=$newStatus;;
	    esac
	fi
    done

    [ "$isQuiet" ] || echo >&2 'All local branches have been iterated over.'
    restoreOriginalBranch || status=$?

    if [ "$isSingleSuccess" ] && [ "$isSuccess" ]; then
	return 0
    else
	return ${status:-99}
    fi
}
eval "localbrdo ${pager:+$errorRedir |}" '"${pager[@]}"'
