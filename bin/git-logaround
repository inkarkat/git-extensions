#!/bin/bash

: ${GIT_LOGAROUND_DEFAULT_CONTEXTDURATION:=12h}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-u|--utc|--universal] [-d|--date DATE|TIME|-r|--revision REV] [-A|--after-duration "[Ww ][Dd |D-][HH:]MM:SS"|[+-]NUMBER[SUFFIX]] [-B|--before-duration ...] [-C|--context-duration ...] [<log-options>] [<revision range>] [[--] <path>...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show log of commits around DATE|TIME|REVISION that fall into a timespan of the
passed duration(s) (by default +/- ${GIT_LOGAROUND_DEFAULT_CONTEXTDURATION}).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --utc|--universal|-u
			Use Coordinated Universal Time (UTC) instead of local
			time for all dates.
    --date|-d DATE	Use DATE as the base date around which commits are
			logged.
    --revision|-r REVISION
			Use the commit date of REVISION as the base date around
			which commits are logged.
    --after-duration|-A "[Ww ][Dd |D-][HH:]MM:SS"|[+-]NUMBER[SUFFIX]
			Include commits done earlier than DATE|TIME within
			duration; i.e. go that much into the past.
    --before-duration|-B "[Ww ][Dd |D-][HH:]MM:SS"|[+-]NUMBER[SUFFIX]
			Include commits done later than DATE|TIME within
			duration; i.e. go that much into the future.
    --context-duration|-C "[Ww ][Dd |D-][HH:]MM:SS"|[+-]NUMBER[SUFFIX]
			Include commits done both earlier and later than
			DATE|TIME within duration; i.e. cover a timespan of 2x
			duration.
HELPTEXT
}

typeset -a gitArgs=()
typeset -a dateArgs=(--format '@%s')
afterDuration="$GIT_LOGAROUND_DEFAULT_CONTEXTDURATION"
beforeDuration="$GIT_LOGAROUND_DEFAULT_CONTEXTDURATION"
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--universal|--utc|-u)
			dateArgs+=("$1"); shift;;
	--after-duration|-A)
			shift; afterDuration="${1:?}"; shift;;
	--before-duration|-B)
			shift; beforeDuration="${1:?}"; shift;;
	--context-duration|-C)
			shift; afterDuration="${1:?}"; beforeDuration="${1:?}"; shift;;
	--date|-d)	shift; dateArgs+=(--to "${1:?}"); shift;;
	--revision|-r)	shift; revDate="$(git log --max-count=1 --pretty='tformat:@%ct' "${1:?}")" || exit $?; shift; dateArgs+=(--to "$revDate");;

	--)		gitArgs+=("$1"); shift; break;;
	*)		gitArgs+=("$1"); shift;;
    esac
done

beforeDate="$(dateadd "${dateArgs[@]}" "+$beforeDuration")" || exit $?
afterDate="$(dateadd "${dateArgs[@]}" "-$afterDuration")" || exit $?

exec git-wrapper ${GIT_LOGAROUND_LOG_COMMAND:-log} --since="$afterDate" --until="$beforeDate" "${gitArgs[@]}" "$@"
