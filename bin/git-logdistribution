#!/bin/bash
set -o pipefail
shopt -qs extglob

printShortUsage()
{
    local commonArguments='[--authors|--files|--turmoil]'
    local distributionOverAutorangeArguments='[--no-footer|--final-footer-only|footer-only-on-change|--footer-every N] [--force-legends] [--as colorbox-calendar|green-[large-]calendar|...] [--over day|month|year|year-weekly|--weekly]'
    local distributionAutolinearArguments='-l|--linear [--color=(always|auto|never)|--no-color] [-w|--width W] [--no-today-base-date|--base-date today|"YYYY MM DD"] [--no-start-date] [--no-end-date] [--days-per-slot N|--slots-per-day N] [--reversed] [--as colorbox-calendar|green-[large-]calendar]'
    local logArguments='[<log-options>] [<revision range>] [[--] <path>...]'
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s %s %s %s\n' "$(basename "$1")" "$commonArguments" "$distributionOverAutorangeArguments" "$logArguments" '[-?|-h|--help]'
    echo
    printf 'Usage: %q %s %s %s %s\n' "$(basename "$1")" "$commonArguments" "$distributionAutolinearArguments" "$logArguments" '[-?|-h|--help]'
    echo
    printf 'Usage: %q %s %s %s | %q --stdin %s %s\n' "$(basename "$1")" '--log-only' "$commonArguments" "$logArguments" "$(basename "$1")" "$commonArguments" "$distributionOverAutorangeArguments"
    echo
    printf 'Usage: %q %s %s %s | %q --stdin %s %s\n' "$(basename "$1")" '--log-only' "$commonArguments" "$logArguments" "$(basename "$1")" "$commonArguments" "$distributionAutolinearArguments"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print the distribution of the number of commits that fall into the logged range.
Depending on the span of time during which the commits were authored, this will
be the distribution over the day, month, or over year(s) (for anything longer).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --authors		Count the number of authors per day.
			Note that due to the data dressing, this cannot be used
			over days or year-weekly.
    --files		Count the number of affected files per day.
			Note that due to the data dressing, this cannot be used
			over days or year-weekly.
    --turmoil		Consider the impact of changes (i.e. total number of
			modified files, as well as number of added and deleted
			lines) instead of solely the number of commits.
    --linear|-l		Choose a linear representation in one line with
			auto-scaling of the time instead of the fixed reporting
			over day, month, years.
    --no-today-base-date
			Disable basing the end of the range on today (which
			makes for a uniform alignment of multiple graphs (unless
			reversed), but can squash the scale if the actual range
			is deep in the past).
SEE ALSO:
- git log
- distribution-over-autorange
- distribution-autolinear
HELPTEXT
}

action=printGraphFromObtainedLogs
distributionCommand=distribution-over-autorange
typeset -a distributionArgs=()
typeset -a distributionBaseDateArg=()
typeset -a distributionReversedArg=()
typeset -a gitArgs=()
typeset -a sourceLogCommand=(git log --pretty=tformat:'%ai')
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--linear|-l)	shift; distributionCommand=distribution-autolinear; distributionBaseDateArg=(--base-date today); distributionReversedArg=(--reversed);;
	--log-only)	shift; action=getLogs;;
	--stdin)	shift; action=printGraphFromInput;;

	-[S])           distributionArgs+=("$1"); shift;;
	--@(no-footer|final-footer-only|footer-only-on-change|no-splitting|weekly|force-legends|no-start-date|no-end-date|no-day-zoom|no-color|color=*))
			distributionArgs+=("$1"); shift;;
	-[w])           distributionArgs+=("$1" "$2"); shift; shift;;
	--@(footer-every|graph-legend|footer-legend|as|over|color|width|days-per-slot|slots-per-day))
			distributionArgs+=("$1" "$2"); shift; shift;;
	--base-date)	distributionBaseDateArg=("$1" "$2"); shift; shift;;
	--no-today-base-date)
			distributionBaseDateArg=(); shift;;
	--reversed)	shift; distributionReversedArg=();;

	--@(pretty|format)?(=*))
			echo >&2 'ERROR: Cannot influence the log format via --pretty|--format.'
			echo >&2
			printUsage "$0" >&2
			exit 2
			;;
	--authors)	shift
			sourceLogCommand=(logAuthorCounts)
			;;
	--files)	shift
			sourceLogCommand=(logFileCounts)
			;;
	--turmoil)	shift
			sourceLogCommand=(git turmoil --pretty=format:'%ai' --shortstat --join-shortstat ' ' --keep-turmoil)
			distributionArgs+=(--field-separator '[[:space:]:_/,-]' --count-field 9 --default-count 1)
			;;
	--)		gitArgs+=("$1"); shift; break;;
	*)		gitArgs+=("$1"); shift;;
    esac
done
gitArgs+=("$@")

logAuthorCounts()
{
    git log --date=format:%Y-%m-%d --pretty='format:%ad %aN' "$@" \
	| sort --unique | field 1
}

logFileCounts()
{
    git log --date=format:%Y-%m-%d --pretty=$'format:\t%ad' --name-only "$@" \
	| sed \
	    -e '/^\t[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$/{ h; d; }' \
	    -e '/^$/d' \
	    -e 'G; s#^\([^\n]*\)\n\t\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\)$#\2 \1#' \
	| field 1
}

getLogs()
{
    "${sourceLogCommand[@]}" "${gitArgs[@]}"
}

printGraphFromObtainedLogs()
{
    # The logged dates still need to be sorted, because sorting happens by commit
    # date, but we'd like to show the author date distribution. The
    # --split-graph-field would be disturbed by an earlier date reappeared after a
    # later date again.
    getLogs | sort --numeric-sort | printGraph
}

printGraphFromInput()
{
    sort --numeric-sort | printGraph
}

printGraph()
{
    $distributionCommand "${distributionBaseDateArg[@]}" "${distributionReversedArg[@]}" "${distributionArgs[@]}"
}

$action
