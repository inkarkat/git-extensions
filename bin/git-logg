#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Log only those commits where log messages match the specified text or /regexp/.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<log-options>] [<revision range>] [[--] <path>...] text|/regexp/ [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<log-options>] [<revision range>] [--invert-grep] --grep=<pattern> [[--] <path>...]'
}

typeset -a grepArgs=()
typeset -a logArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--grep)		grepArgs+=("$1" "$2"); shift; shift;;
	--grep=*)	grepArgs+=("$1"); shift;;
	--)		logArgs+=("$1"); shift; break;;
	*)		logArgs+=("$1"); shift;;
    esac
done
set -- "${logArgs[@]}" "$@"
if [ ${#grepArgs[@]} -eq 0 ]; then
    # No --grep given; the last argument is the text or /regexp/.
    if [ $# -eq 0 ]; then
	printUsage "$0"
	exit 2
    fi

    lastArg="${!#}"
    searchString=$(printf '%s' "$lastArg" | sed -ne 's/^\([^a-zA-Z0-9]\)\(.*\)\1$/\2/p')
    if [ -n "$searchString" ]; then
	grepArgs+=(--grep "$searchString")
    else
	grepArgs+=(--grep "$lastArg" --fixed-strings)
    fi
    set -- "${@:1:$(($#-1))}"
fi

exec git-wrapper ${GIT_LOGG_COMMAND:-log} "${grepArgs[@]}" "$@"
