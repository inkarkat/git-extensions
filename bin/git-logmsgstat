#!/bin/bash
set -o pipefail
shopt -qs nullglob

: ${GIT_LOGMSGSTAT_EXIT_STATUS_NO_COMMITS:=99}
: ${GIT_LOGMSGSTAT_EXCLUDE_PATTERN='^\(>$\|>[[:space:]]\|,----\||$\||[[:space:]]\|`----\)'}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    local outputOptions='[-s|--subject-only] [--all|([--include-prefixes] [--include-quotes] [--include-trailers])|--only-prefixes|--only-trailers] [-c|--bytes|-m|--chars|-w|--words|-l|--lines] [--raw]'
    local logArgs='[<log-options>] [<revision range>] [[--] <path>...]'
    printf 'Usage: %q %s %s %s\n' "$(basename "$1")" "$outputOptions" "$logArgs" '[-?|-h|--help]'
    echo
    printf 'Usage: %q %s %s | %q %s %s\n' "$(basename "$1")" '--log-only' "$logArgs" "$(basename "$1")" '--stdin' "$outputOptions"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
One-line statistics about the size of commit messages (excluding trailers and
quoted parts).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --subject-only|-s	Only consider the first (subject) line of the commit
			message.
    --all		Include all parts of the commit message, including
			quotes and trailers.
    --include-prefixes	Include commit title prefixes (like "Refactoring:") that
			appear at the beginning of the subject.
    --only-prefixes	Only count commit title prefixes (like "Refactoring:")
			that appear at the beginning of the subject.
    --include-quotes	Include quoted parts.
    --include-trailers	Include commit message trailers.
    --only-trailers	Only count the commit message trailers.
    --bytes|-c		Count bytes.
    --chars|-m		Count characters.
    --lines|-l		Count lines.
    --words|-w		Count words (non-zero-length sequence of printable
			characters delimited by white space). This is the
			default.
    --raw		Print just the bare, space-separated numbers.

SEE ALSO:
- git-whatdid provides a summary of commit title prefixes.
HELPTEXT
}

typeset -rA units=([c]=chars [m]=lines [w]=words)

typeset -a prefixFilter=(sed -e '/^\a$/!b' -e 'N; s@\n\([^:[:space:]]\+: \)*\([^:[:space:]]\+:\( \|$\)\)@\n@')
typeset -a filterArgs=(--invert-match)
trailerPattern="$(git-trailer-keys --as-regexp)"
typeset -a trailerMessageFilter=(); [ -z "$trailerPattern" ] || trailerMessageFilter=(-e "$trailerPattern")
typeset -a excludeMessageFilter=(); [ -z "$GIT_LOGMSGSTAT_EXCLUDE_PATTERN" ] || excludeMessageFilter=(-e "$GIT_LOGMSGSTAT_EXCLUDE_PATTERN")

action=logSplitAndStat
logFormat='%B'
unit=words
typeset -a wcArgs=(--words)
typeset -a statisticsArgs=()
typeset -a logArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--subject-only|-s)
			shift; logFormat='%s';;
	--all)		shift; filterArgs=(); trailerMessageFilter=(); excludeMessageFilter=();;
	--include-prefixes)
			shift; prefixFilter=();;
	--include-quotes)
			shift; excludeMessageFilter=();;
	--include-trailers)
			shift; trailerMessageFilter=();;
	--only-prefixes)
			shift
			logFormat='%s'
			filterArgs=(); trailerMessageFilter=(); excludeMessageFilter=()
			prefixFilter[-1]="${prefixFilter[-1]/%@\\n@/.*\$@\\n\\1\\2@}"
			prefixFilter+=(-e t -e d)
			;;
	--only-trailers)
			shift; filterArgs=(-e '^$'); excludeMessageFilter=();;
	--bytes|-c|--chars|-m|--lines|-l|--words|-w)
			wcArgs=("$1"); unit="${units["${1#-}"]:-${1#--}}"; shift;;
	--raw)		statisticsArgs=("$1"); shift;;
	--log-only)	shift; action=getCommitMessages;;
	--stdin)	shift; action=splitAndStat;;
	--)		logArgs+=("$1"); shift; break;;
	*)		logArgs+=("$1"); shift;;
    esac
done

log()
{
    git log --pretty=tformat:$'\a\n'"$logFormat" "${logArgs[@]}" "$@"
}

getCommitMessages()
{
    typeset -a grepArgs=("${trailerMessageFilter[@]}" "${excludeMessageFilter[@]}")
    eval 'log "$@"' \
	"${prefixFilter:+|}" '"${prefixFilter[@]}"' \
	"${grepArgs:+| grep "${filterArgs[@]}"}" '"${grepArgs[@]}"'
}

count()
{
    if printf '' | wc --total=never >/dev/null 2>&1; then
	wc "${wcArgs[@]}" --total=never -- "$@"
    else
	# Compatibility: wc (GNU coreutils) 8.30 on Ubuntu 20.04 does not understand
	# --total=never
	LC_ALL=C wc "${wcArgs[@]}" -- "$@" \
	    | sed -e '${ /[[:space:]]total$/d; }'
    fi
}

tempDirspec=''
splitAndStat()
{
    tempDirspec="$(mktemp --directory --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || { dirspec="${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM"; mkdir -p -- "$dirspec" && printf %s "$dirspec"; })" || exit $?
    [ "$DEBUG" ] || trap 'rm -rf "$tempDirspec" 2>/dev/null' EXIT

    csplit --quiet --elide-empty-files --prefix "${tempDirspec}/msg" --suppress-matched --digits 8 - '/^$/' '{*}' || exit $?

    typeset -a messageFilespecs=("${tempDirspec}"/msg*)
    [ ${#messageFilespecs[@]} -gt 0 ] || exit $GIT_LOGMSGSTAT_EXIT_STATUS_NO_COMMITS

    count "${messageFilespecs[@]}" \
	| field 1 \
	| summarize
}

summarize()
{
    if [ ${#statisticsArgs[@]} -eq 0 ]; then
	STATISTICS_PRECISION=0 statistics --unit-once " $unit"
    else
	STATISTICS_PRECISION=0 STATISTICS_SEP=$'\t' statistics "${statisticsArgs[@]}"
    fi
}

logSplitAndStat()
{
    getCommitMessages "$@" \
	| splitAndStat
}

$action "$@"
