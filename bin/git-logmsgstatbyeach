#!/bin/bash

: ${GIT_LOGMSGSTATBYEACH_GRAPH_SIZE:=1000,1000}
: ${GIT_LOGMSGSTATBYEACH_GRAPH_NOGUI:=dumb size ${COLUMNS:-80} $((${LINES:-25} - 3)) ansi}
: ${GIT_LOGMSGSTATBYEACH_GRAPH_GUI:=qt size $GIT_LOGMSGSTATBYEACH_GRAPH_SIZE}
: ${GIT_LOGMSGSTATBYEACH_GRAPH_OUTPUT:=}

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly etcDir="${projectDir}/etc/byeach"

printUsage()
{
    git-logmsgstat --help 2>&1 | sed \
	-e '1s#^.*$#Show one-line statistics about the size of commit messages (excluding trailers\nand quoted parts) for each user separately.#' \
	-e '2b removeFirstParagraphLoop' \
	-e '/^ *--raw/i\
    --graph		Graph the commit message counts per author.\
    --graph-stdin	Graph the raw data read from stdin.' \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ |]\+ \)*git-logmsgstat /\1\2[GIT_LOGMSGSTATBYEACH_GRAPH_SIZE=1000,1000] [GIT_LOGMSGSTATBYEACH_GRAPH_OUTPUT=FILE.(png,svg)] '"$(basename "$1")"' /; s/\[--raw\]/[--graph|--graph-stdin|--raw]/; }' \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop; }'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

isRaw=
typeset -a collector=(logmsgstatbyeach)
typeset -a grapher=()
typeset -a logArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--graph-stdin)	collector=();&
	--graph)	shift; logArgs+=(--raw); isRaw=t; grapher=(gnuplotWrapper);;
	--raw)		logArgs+=("$1"); shift; isRaw=t;;
	--)		logArgs+=("$1"); shift; break;;
	*)		logArgs+=("$1"); shift;;
    esac
done
typeset -a segregatedusercommandHeaderArgs=(--prefixed)
[ "$isRaw" ] || segregatedusercommandHeaderArgs+=(--tabular)

typeset -a logmsgstatCommand=(logmsgstat)
if [ -n "$GIT_LOGMSGSTATBYEACH_AGGREGATE_COMMAND" ]; then
    eval "typeset -a logmsgstatCommand=($GIT_LOGMSGSTATBYEACH_AGGREGATE_COMMAND)"
    set -- "$@" --  # Need a trailing -- to prevent that arguments from the aggregate command are parsed off as FILE(s) if it contains a -- itself. Passing <path>s for a multi-repo iteration likely doesn't make sense, anyway.
fi

gnuplotWrapper()
{
    case "${GIT_LOGMSGSTATBYEACH_GRAPH_OUTPUT##*.}" in
	png)
	    local terminalSettings="png size $GIT_LOGMSGSTATBYEACH_GRAPH_SIZE; set output '$GIT_LOGMSGSTATBYEACH_GRAPH_OUTPUT'"
	    ;;
	svg)
	    local terminalSettings="svg size $GIT_LOGMSGSTATBYEACH_GRAPH_SIZE background 'white'; set output '$GIT_LOGMSGSTATBYEACH_GRAPH_OUTPUT'"
	    ;;
	'') [ -n "$DISPLAY" ] \
		&& local terminalSettings="$GIT_LOGMSGSTATBYEACH_GRAPH_GUI" \
		|| local terminalSettings="$GIT_LOGMSGSTATBYEACH_GRAPH_NOGUI"
	    ;;
	*)  printf >&2 "ERROR: Unsupported output format '%s'.\\n" "${GIT_LOGMSGSTATBYEACH_GRAPH_OUTPUT##*.}"; exit 2;;
    esac

    local hasTerm=; [ -t 1 ] && hasTerm=t
    {
	printf '$data << EOD\n'
	if [ "$hasTerm" ]; then
	    tee >(sampleLines --inline-always --clear --count author --transform-exec field --unbuffered --field-separator $'\t' 1 \; > /dev/tty)
	else
	    cat
	fi
	printf 'EOD\ndata = "$data"\nset terminal %s\n\n' "$terminalSettings"
	cat -- "${etcDir}/candlestick-setup.gnuplot" "${etcDir}/logmsgstatbyeach.gnuplot"
    } | gnuplot --persist
}

logmsgstatbyeach()
{
    GIT_LOGMSGSTAT_EXIT_STATUS_NO_COMMITS=0 \
    GIT_SEGREGATEDUSERCOMMAND_PREFIX_SEPARATOR=$'\t' \
    STATISTICS_SEP=$'\t' \
	git-segregated-user-command "${segregatedusercommandHeaderArgs[@]}" --log-args-for-range --keep-position \
	    "${logmsgstatCommand[@]}" USERFILTER "${logArgs[@]}" "$@"
}

eval "\"\${collector[@]}\"${collector:+ "$@"}" \
    "${collector:+${grapher:+|}}" '"${grapher[@]}"'
