#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-%|--percentage-threshold PCT] [<log-options>] [<revision range>] [--] <path>|<commit> [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show log of commits that modify files that often get changed in commits that
modify files in <path> / the files affected by <commit>. So it doesn't just show
commits that modify the passed files, but also any commits that modify files
that are often modified together with the passed files, even if those commits
don't directly modify the passed files.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --percentage-threshold|-% PCT
			Show only files with a correlation of at least PCT%.
Files are considered if correlation is at least 10% / PCT.

RELATED COMMANDS:
- git-logoffiles only shows commits that modify the passed files without
  extending to any files modified together with them.
HELPTEXT
}

typeset -a relatedfilesArgs=()
typeset -a gitLogArgs=()
typeset -A files=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--percentage-threshold|-%)
			relatedfilesArgs+=("$1" "${2:?}"); shift; shift;;
	--)		shift; break;;
	*)		gitLogArgs+=("$1"); shift;;
    esac
done

addPathOrCommit()
{
    local pathOrCommit="${1?}"; shift
    if git rev-parse --verify --quiet "$pathOrCommit" >/dev/null; then
	while IFS=$'\n' read -r path
	do
	    files["$path"]=t
	done < <(git log --max-count 1 --diff-merges=first-parent --name-only --pretty=format: "$pathOrCommit")
    elif [ -e "$pathOrCommit" ]; then
	files["$pathOrCommit"]=t
    else
	return 1
    fi
}
if [ $# -eq 0 ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    gitLogArgs+=("$@")
    while [ ${#gitLogArgs[@]} -ne 0 ]
    do
	addPathOrCommit "${gitLogArgs[-1]}" || break
	gitLogArgs=("${gitLogArgs[@]:0:${#gitLogArgs[@]}-1}")
    done
    if [ ${#files[@]} -eq 0 ]; then
	echo >&2 'ERROR: No <path>|<commit> passed.'
	exit 2
    fi
else
    for arg
    do
	if ! addPathOrCommit "$arg"; then
	    printf >&2 'ERROR: Not a <path> or <commit>: %s\n' "$arg"
	    exit 2
	fi
    done
fi
typeset -a uniqueFiles=("${!files[@]}")
if [ ${#uniqueFiles[@]} -eq 0 ]; then
    echo >&2 'ERROR: No modified files found in the passed <commit>(s).'
    exit 1
fi

readarray -t relatedFiles < <(git-relatedfiles --no-percentage "${relatedfilesArgs[@]}" "${gitLogArgs[@]}" -- "${uniqueFiles[@]}"; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
[ ${relatedFiles[-1]} -ne 0 ] && exit ${relatedFiles[-1]}
unset 'relatedFiles[-1]'; [ -n "${relatedFiles[-1]}" ] || unset 'relatedFiles[-1]'

[ ${#relatedFiles[@]} -gt 0 ] || exit 1

exec git-wrapper ${GIT_LOGOFRELATEDFILES_COMMAND:-log} "${gitLogArgs[@]}" -- "${relatedFiles[@]}"
