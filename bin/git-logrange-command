#!/bin/bash
set -o noglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--revision REVISION] [--no-range|--with-range ...|--last-only] [--one-more] [--with-log-args|--with-log-args-except-last] [--invert-grep] ... text|/regexp/ [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--revision REVISION] [--no-range|--with-range ...|--last-only] [--one-more] [--invert-grep] --grep=<pattern> ...'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... LOGRANGE ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print / execute GIT-COMMAND with a revision range starting from the passed
REVISION / the first found revision where ${GIT_LOGRANGE_RANGE_WHAT:?} and including all such following commits where ${GIT_LOGRANGE_RANGE_WHAT:?}
- appended
- replacing LOGRANGE argument(s) anywhere
- replacing LOGRANGE in the following GIT-COMMAND and -(N-1) arguments
- replacing LOGRANGE in the following +(N) arguments and appending those
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --no-range	    Only use the earliest matching commit.
    --with-range ...
		    Use ... instead of .. as the range specifier.
    --last-only	    Only use the latest matching commit.
    --one-more	    Include the commit preceding the earliest matching commit.
    --with-log-args All GIT-COMMAND arguments should also be used when
		    determining the revision range.
    --with-log-args-except-last
		    All GIT-COMMAND arguments expect the very last should also
		    be used when determining the revision range.
HELPTEXT
}
revision=
range=..
isLastOnly=
isShowOneMore=
typeset -a grepArgs=()
typeset -a grepModificationArgs=()
withLogArgs=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		    shift; printLongUsage "$0"; exit 0;;
	--revision|-r)		    shift; revision="$1"; shift;;
	--grep)			    grepArgs+=("$1" "$2"); shift; shift;;
	--grep=*)		    grepArgs+=("$1"); shift;;
	--invert-grep)		    grepModificationArgs+=("$1"); shift;;
	--no-range)		    shift; range=;;
	--with-range)		    shift; range="$1"; shift;;
	--last-only)		    shift; isLastOnly=t; range=;;
	--one-more)		    shift; isShowOneMore=t;;
	--with-log-args)	    shift; withLogArgs=all;;
	--with-log-args-except-last)
				    shift; withLogArgs=except-last;;
	*)			    break;;
    esac
done
typeset -a finalGrepArg=()
if [ ${#grepArgs[@]} -eq 0 ]; then
    # No --grep given; the last argument is the text or /regexp/.
    if [ $# -eq 0 ]; then
	printUsage "$0"
	exit 2
    fi

    finalGrepArg=("${!#}"); [ $# -eq 0 ] && set -- || set -- "${@:1:$(($#-1))}"
fi

isCountedAppend=
typeset -a countedArgs=()
case "$1" in
    +[1-9])
	isCountedAppend=t;&
    -[1-9])
	typeset countedArgNum=${1#[+-]}
	typeset countedArgNum=${1#-}
	countedArgs=("${@:2:${countedArgNum}}")
	set -- "${@:$((2 + countedArgNum))}"

	executor()
	{
	    countedArgs=("${countedArgs[@]//LOGRANGE/${revisionRange}}")

	    [ "$isCountedAppend" ] \
		&& exec git-wrapper "$@" "${countedArgs[@]}" \
		|| exec git-wrapper "${countedArgs[@]}" "$@"
	}
	;;
    --keep-position)
	shift
	countedArgs=("$@"); set --

	executor()
	{
	    exec git-wrapper "${countedArgs[@]//LOGRANGE/${revisionRange}}"
	}
	;;
    *)	countedArgs=("$@"); set --
	executor()
	{
	    exec git-wrapper "${countedArgs[@]}" "$revisionRange"
	}
	;;
esac

typeset sharedLogArgs=()
case "$withLogArgs" in
    all)	    sharedLogArgs+=("$@");;
    except-last)    [ $# -eq 0 ] || sharedLogArgs+=("${@:1:$(($#-1))}");;
esac

if [ -z "$revision" ]; then
    revision="$(git ${GIT_LOGRANGE_RANGE_COMMAND:?} --max-count 1 --pretty=tformat:%H "${grepModificationArgs[@]}" "${grepArgs[@]}" "${sharedLogArgs[@]}" "${finalGrepArg[@]}")"
    if [ -z "$revision" ]; then
	echo >&2 'Could not find a matching commit.'
	exit 1
    fi
fi

startRevision=
< <(diff --unchanged-line-format= --old-line-format='%dn %L' --new-line-format= -- \
    <(git log --first-parent --pretty=tformat:%H "$revision" "${sharedLogArgs[@]}") \
    <(git ${GIT_LOGRANGE_RANGE_COMMAND:?} --first-parent --pretty=tformat:%H "${grepModificationArgs[@]}" "${grepArgs[@]}" "$revision" "${sharedLogArgs[@]}" "${finalGrepArg[@]}") # Fortunately, "git log <revision> --follow -- <path>" also works; else, we would have to split sharedLogArgs into options and path arguments.
) IFS=' ' read -r firstDifferentCount firstDifferentRevision

if [ -n "$firstDifferentRevision" ]; then
    if [ $firstDifferentCount -eq 1 ]; then
	printf >&2 'The %s revision already does not match.\n' "$revision"
	exit 1
    else
	startRevision="${firstDifferentRevision}${isShowOneMore:+^}"
    fi
fi

revisionSuffix=; [ "$isShowOneMore" ] && [ -z "$startRevision" -o -z "$range" ] && revisionSuffix='^'
if [ "$isLastOnly" ]; then
    revisionRange="${range:+${startRevision}${startRevision:+$range}}${revision}${revisionSuffix}"
else
    revisionRange="${startRevision}${startRevision:+$range}${range:+${revision}${revisionSuffix}}"
fi

if [ ${#countedArgs[@]} -eq 0 -a $# -eq 0 ]; then
    printf '%s\n' "$revisionRange"
    exit 0
else
    executor "$@"
fi
