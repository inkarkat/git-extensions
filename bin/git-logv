#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Verbose log that includes filenames (like "svn log -v"), and additional
committer vs. author information. Still shows all files of the commit even when
filtering commits for certain paths (whereas "git log --name-status" also
filters the file list itself).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<log-options>] [<revision range>] [[--] <path>...] [-?|-h|--help]'
}

typeset -a gitArgs=()
typeset -a gitPrettyArg=(--pretty=fuller)
typeset -a paths=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--pretty=*)	gitPrettyArg=("$1"); shift;;
	--)		gitArgs+=("$1"); shift; paths=("$@"); break;;
	*)		gitArgs+=("$1"); shift;;
    esac
done
if [ ${#paths[@]} -eq 0 ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    gitArgs+=("$@")
    while [ ${#gitArgs[@]} -ne 0 ]
    do
	lastArg="${gitArgs[-1]}"
	[ -e "$lastArg" ] || break

	paths=("$lastArg" "${paths[@]}")
	gitArgs=("${gitArgs[@]:0:${#gitArgs[@]}-1}")
    done
fi

if [ ${#paths[@]} -eq 0 ]; then
    exec git-log --name-status "${gitPrettyArg[@]}" "${gitArgs[@]}"
else
    # Pass all arguments except --pretty=... to the initial log for the limiting
    # (--max-count) and filtering (--author, --grep). The second show command
    # doesn't need these (filtering would be superfluous there), as all the
    # visualization is hard-coded.
    git log --topo-order --pretty=tformat:%H "${gitArgs[@]}" "${paths[@]}" | \
	xargs --no-run-if-empty --delimiter '\n' git-wrapper show --decorate --name-status "${gitPrettyArg[@]}"
fi
