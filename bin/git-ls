#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
List files under version control; skip unversioned files.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-l|--long [--date FORMAT|--relative-date]] [-r|--recursive|-d|--directory] [-f|--only-files|-D|--only-directories] [--no-classify] [--submodule name|ignore|recurse] [--] [<path> ...] [-?|-h|--help]'
}

typeset -a allSelfArgs=("$@")
isNeedLog=
formatPrefix=
formatSuffix=
minDepth=1
maxDepth=1
isOnly=
classifyDirectories=/
submodule=name
prefix=
typeset -a gitLogArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--long|-l)	shift; isNeedLog=t; formatPrefix='%h %<(12,trunc)%aN %<(22)%ad '; formatSuffix=;;
	--recursive|-r)	shift; maxDepth='';;
	--directory|-d)	shift; minDepth=0; maxDepth=0;;
	--only-files|-f)
			shift; isOnly=files;;
	--only-directories|-D)
			shift; isOnly=directories;;
	--date)			isNeedLog=t; gitLogArgs+=("$1" "$2"); shift; shift;;
	--date=*)		isNeedLog=t; gitLogArgs+=("$1"); shift;;
	--relative-date)	isNeedLog=t; gitLogArgs+=("$1"); shift;;
	--no-classify)		shift; classifyDirectories=;;
	--submodule)	shift; submodule="${1:?}"; shift;;
	--prefix)	shift; prefix="${prefix}$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
typeset -a allSelfOptions=("${allSelfArgs[@]:0:$((${#allSelfArgs[@]} - $#))}")

listFiles()
{
    local IFS=$' \t\n'
    [ $# -gt 0 ] || set -- .
    local arg; for arg
    do
	arg="${arg#${PWD}/}"
	if [ -d "$arg" ]; then
	    find "$arg" ${minDepth:+-mindepth $minDepth} ${maxDepth:+-maxdepth $maxDepth} -name .git -prune -o -type d -print \
		&& find "$arg" ${maxDepth:+-maxdepth 1} -name .git -prune -o -type f -print
	elif [ -e "$arg" ] || [ -n "$(git-stfiles -- "$arg" 2>/dev/null)" ] ; then
	    printf '%s\n' "$arg"
	else
	    find "$arg" ${maxDepth:+-maxdepth 0} -name .git -prune -o -type f -print
	fi
    done \
	| sort
}

typeset -A submodules=()
case "$submodule" in
    name) ;;
    ignore|recurse)
	while IFS=$'\n' read -r name
	do
	    submodules["$name"]=t
	done < <(git sublistr)
	;;
    *)	echo >&2 'ERROR: Invalid value for --submodule, must be one of name|ignore|recurse'
	echo >&2
	printUsage "$0" >&2
	exit 2
	;;
esac

gitLs()
{
    IFS=$'\n'
    for filespec in $(listFiles "$@")
    do
	[ "$filespec" = . ] && [ "$maxDepth" != 0 ] && continue
	filespec=${filespec#./}

	[ "${submodules["$filespec"]}" ] && case "$submodule" in
	    ignore)
		continue;;
	    recurse)
		(cd "$filespec" && exec "${BASH_SOURCE[0]}" "${allSelfOptions[@]}" --prefix "${filespec}/");;
	esac


	if [ "$isNeedLog" ]; then
	    # Optimization: git ls-files can sort out untracked files much faster
	    # than git log.
	    git ls-files --error-unmatch -- "$filespec" >/dev/null 2>/dev/null || [ -n "$(git-stfiles -- "$filespec" 2>/dev/null)" ] || continue

	    filespecSuffix=
	    if [ -d "$filespec" ]; then
		[ "$isOnly" = files ] && continue
		filespecSuffix="$classifyDirectories"
	    elif [ "$isOnly" = directories ]; then
		continue
	    fi
	    git log --pretty=tformat:"${formatPrefix}${prefix//%//%%}${filespec//%/%%}${filespecSuffix}${formatSuffix}" --max-count 1 "${gitLogArgs[@]}" -- "$filespec"
	else
	    if [ -d "$filespec" ]; then
		[ "$isOnly" = files ] && continue
		# Print directory (name) if it contains any tracked files.
		if git ls-files --error-unmatch -- "$filespec" >/dev/null 2>&1; then
		    printf '%s%s%s\n' "$prefix" "${filespec%/}" "$classifyDirectories"
		fi
	    elif [ "$isOnly" = directories ]; then
		continue
	    else
		eval 'git ls-files --error-unmatch -- "$filespec" 2>/dev/null || git-stfiles -- "$filespec" 2>/dev/null' "${prefix:+| prefix "$prefix"}"
	    fi
	fi
    done
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
eval 'gitLs "$@"' "${pager:+|}" '"${pager[@]}"'
