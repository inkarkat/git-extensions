#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
List unversioned files. Show a summary for unversioned directories or with -l
the entire subdir contents. With -x also files from the ignore list. With
-X|--orphaned-submodules also subdirectories that have a .git directory (likely
incompletely deregistered submodules or created by downloading another Git repo
into the working copy) - Git mentions those as "Would skip repository NAME".
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-l|--long|-D|--ignore-empty-directories] [-X|--orphaned-submodules] [-x] [--] [<path>] [-?|-h|--help]'
}
typeset -a gitCleanArgs=()
isLongFormat=
isIgnoreEmptyDirectories=
isOrphanedSubmodules=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--long|-l)	shift; isLongFormat=t;;
	--ignore-empty-directories|-D)
			shift; isIgnoreEmptyDirectories=t;;
	--orphaned-submodules|-X)
			shift; isOrphanedSubmodules=t;;
	--)		break;;
	*)		gitCleanArgs+=("$1"); shift;;
    esac
done

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()

# Deprecated: This is not issued any longer in Git 2.25.1
GIT_ORPHANED_REPOSITORY_MESSAGE_PREFIX='Would skip repository '
lsprivate()
{
    local status=1 filespec
    while read -r filespec
    do
	if [[ "$filespec" =~ ^"$GIT_ORPHANED_REPOSITORY_MESSAGE_PREFIX" ]]; then
	    if [ "$isOrphanedSubmodules" ]; then
		filespec="${filespec#$GIT_ORPHANED_REPOSITORY_MESSAGE_PREFIX}"
	    else
		printf '%s\n' "$filespec"
		continue
	    fi
	fi
	if [ -d "$filespec" ]; then
	    if [ "$isLongFormat" ]; then
		find "$filespec"
	    else
		local fileNum=$(find "$filespec" -type f | wc -l)
		if [ $fileNum -eq 0 ]; then
		    [ "$isIgnoreEmptyDirectories" ] && continue
		    local dirNum=$(find "$filespec" -mindepth 1 -type d | wc -l)
		    if [ $dirNum -eq 0 ]; then
			printf '%s [empty directory]\n' "$filespec"
		    else
			local dirNumPlural=s; [ $dirNum -eq 1 ] && dirNumPlural=
			printf '%s [directory with %d nested empty subdir%s]\n' "$filespec" "$dirNum" "$dirNumPlural"
		    fi
		else
		    local dirsize=$(du -s --human-readable -- "$filespec" | cut -f 1)
		    local fileNumPlural=s; [ $fileNum -eq 1 ] && fileNumPlural=
		    printf '%s [directory; %d file%s, %s]\n' "$filespec" "$fileNum" "$fileNumPlural" "$dirsize"
		fi
	    fi
	else
	    printf '%s\n' "$filespec"
	fi
	status=0
    done < <(
	LC_ALL=C git clean --dry-run -d "${gitCleanArgs[@]}" "$@" | sed -e 's/^Would \(not \)\?remove //'
	[ "$isOrphanedSubmodules" ] && findDirOf --drop-dot-slash "$@" -mindepth 2 -name .git
    )

    return $status
}
eval 'lsprivate "$@"' "${pager:+|}" '"${pager[@]}"'
