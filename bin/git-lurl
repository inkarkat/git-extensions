#!/bin/bash
set -o pipefail

: ${GIT_LURL_VIEW=commit}

printUsage()
{
    cat <<HELPTEXT
Log URLs (and commit summaries by default) to ${remote:-REMOTE} of all found commits.
You can pass your own --pretty, but the output should start with the commit ID
(or "commit <commit ID>"), e.g. a bare-bones --pretty=format:%H (which you'll
also get via -b|--bare).
HELPTEXT
    echo
    printf 'Usage: [GIT_LURL_VIEW=commit|commits|tree] %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [-s|--summarize-files] [-b|--bare] [<log-options>] [<revision range>] [[--] <path>...] [-?|-h|--help]"
    echo
    cat <<HELPTEXT
Turn commit IDs and modified files found in stdin into URLs to ${remote:-REMOTE}.
HELPTEXT
    echo
    printf 'Usage: git log [...] | [GIT_LURL_VIEW=commit|commits|tree] %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [-s|--summarize-files] [-b|--bare] -"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
remote="${1:?}"; shift

sourceCommand=log
hasColor=t
typeset -a colorArg=(--color=always)
prettyAdditions=' %s'
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ ! -t 1 ]; then
    hasColor=
    colorArg=()
    pager=()
    prettyAdditions=''
fi
isSummarizeFiles=
typeset -a logArgs=()
unset prettyArg
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=never)
			colorArg=("$1"); shift; hasColor=;;
	--color=always)	colorArg=("$1"); shift; hasColor=t;;
	--color=*)	colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1" "$2"); case "$2" in never) hasColor=;; always) hasColor=t;; esac; shift; shift;;

	--summarize-files|-s)
			shift; isSummarizeFiles=t; logArgs+=(--name-only);;
	--pretty=*)	prettyArg="$1"; shift;;
	--bare|-b)	shift; prettyAdditions='';;
	--)		logArgs+=("$1"); shift; break;;
	-)		shift; sourceCommand=;;
	*)		logArgs+=("$1"); shift;;
    esac
done
set -- "${logArgs[@]}" "$@"

: ${GIT_LURL_URL_PREFIX=}
: ${GIT_LURL_URL_SUFFIX=}
: ${GIT_LURL_HASH_PREFIX=}
: ${GIT_LURL_HASH_SUFFIX=}
: ${GIT_LURL_PATH_PREFIX=[35m}
: ${GIT_LURL_PATH_SUFFIX=[0m}
: ${GIT_LURL_FILE_PREFIX=[01;35m}
: ${GIT_LURL_FILE_SUFFIX=[0m}

if [ ! "$hasColor" ]; then
    # This is for us, to disable the highlighting {pre,suf}fixes. As git-log
    # understands it (and is inconsequential with our --pretty format), we don't
    # need to drop it from the arguments passed to it.
    GIT_LURL_URL_PREFIX=
    GIT_LURL_URL_SUFFIX=
    GIT_LURL_HASH_PREFIX=
    GIT_LURL_HASH_SUFFIX=
    GIT_LURL_PATH_PREFIX=
    GIT_LURL_PATH_SUFFIX=
    GIT_LURL_FILE_PREFIX=
    GIT_LURL_FILE_SUFFIX=
fi

if [ "$HUB" ]; then
    : ${prettyArg="--pretty=tformat:%h${prettyAdditions}"}
    view='@'
    url="$(hub-userrepo "$(git-remote-url "$remote")")" || exit $?
else
    : ${prettyArg="--pretty=tformat:%H${prettyAdditions}"}
    view="/${GIT_LURL_VIEW}/"
    url="$(git-remote-url "$remote")" || exit $?
fi

log()
{
    git log "${colorArg[@]}" "$prettyArg" "$@"
}

injectUrls()
{
    awk --field-separator ' ' \
	-v url="$url" \
	-v "isSummarizeFiles=$isSummarizeFiles" \
	-v urlPrefix="$GIT_LURL_URL_PREFIX" \
	-v urlSuffix="$GIT_LURL_URL_SUFFIX" \
	-v hashPrefix="$GIT_LURL_HASH_PREFIX" \
	-v hashSuffix="$GIT_LURL_HASH_SUFFIX" \
	-v pathPrefix="$GIT_LURL_PATH_PREFIX" \
	-v pathSuffix="$GIT_LURL_PATH_SUFFIX" \
	-v filePrefix="$GIT_LURL_FILE_PREFIX" \
	-v fileSuffix="$GIT_LURL_FILE_SUFFIX" \
	-v "view=${view//\\/\\\\}" \
'
@load "filefuncs"
BEGIN {
    for (i = 0; i <= 255; i++) {
	ord[sprintf("%c", i)] = i
    }
}
function urlencode(s, isFilespec, isKeepNewlines,      c, len, result)
{
    len = length(s)
    result = ""
    for (i = 1; i <= len; i++) {
	c = substr(s, i, 1);
	if (c ~ /[-_.~a-zA-Z0-9]/) {
	    result = result c
	} else if (c == "/") {
	    result = result (isFilespec ? c : sprintf("%02X", ord[c]))
	} else if (c ~ /\n/) {
	    result = result (isKeepNewlines ? c : sprintf("%02X", ord[c]))
	} else {
	    result = result "%" sprintf("%02X", ord[c])
	}
    }
    return result
}
function basename( filespec ) {
    sub(".*/", "", filespec)
    return filespec
}
function dirname( filespec ) {
    if (filespec !~ /\//) return ""
    sub("[^/]+$", "", filespec)
    return filespec
}
function handleFilespec( prefix, filespec, suffix ) {
    if (isSummarizeFiles) {
	filespecs[filespec] = 1
    } else {
	print prefix urlPrefix url "/blob/" urlencode(filespec, 1) urlSuffix suffix
    }
}

$1 ~ /^[0-9a-f]+$/ {
    $1 = urlPrefix url view urlSuffix hashPrefix $1 hashSuffix
    print
    next
}
{
    if ($0 == "" && isSummarizeFiles) {
	next
    } else if (match($0, /commit [0-9a-f]+/)) {
	commitId = substr($0, RSTART + 7, RLENGTH - 7)
	$0 = substr($0, 1, RSTART + 6) urlPrefix url view urlSuffix hashPrefix commitId hashSuffix substr($0, RSTART + RLENGTH)
	print
    } else if (stat($0, fdata) == 0) {
	handleFilespec("", $0, "")
    } else if (match($0, /^[A-Z][[:digit:]]*\t/)) {
	prefix = substr($0, RSTART, RLENGTH)
	filespec = substr($0, RSTART + RLENGTH)
	if (stat(filespec, fdata) == 0) {
	    handleFilespec(prefix, filespec, "")
	} else if (match(filespec, /^[^\t]+\t/)) {
	    prefix =  prefix substr(filespec, RSTART, RLENGTH)
	    filespec = substr(filespec, RSTART + RLENGTH)
	    if (stat(filespec, fdata) == 0) {
		handleFilespec(prefix, filespec, "")
	    } else {
		print
	    }
	} else {
	    print
	}
    } else {
	print
    }
}
END {
    asorti(filespecs)
    if (length(filespecs) > 0) print ""
    for (f in filespecs)
	print pathPrefix dirname(filespecs[f]) pathSuffix filePrefix basename(filespecs[f]) fileSuffix
}
'
}


eval "${sourceCommand}${sourceCommand:+ \"\$@\" | }injectUrls" "${pager:+|}" '"${pager[@]}"'
