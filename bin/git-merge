#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Join two or more development histories together.
    --no-submodule-update
			Do not consider submodules and automatically check out
			resulting versions.
    --ours		Force conflicting hunks to be auto-resolved cleanly by
			favoring our version. Changes from the other tree that
			do not conflict with our side are reflected in the merge
			result.
    --theirs		Force conflicting hunks to be auto-resolved cleanly by
			favoring the other tree's version. Changes from our side
			that do not conflict with the other tree are reflected
			in the merge result.
    --record-only	No-op merge that always uses the current branch head and
			ignores all changes from all other branches, effectively
			just recording that a merge has happened.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-submodule-update] [--ours|--theirs|--record-only] [<merge-args> ...] [-?|-h|--help]'
}

isSubmoduleUpdate=t
typeset -a mergeArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--no-submodule-update)
			shift; isSubmoduleUpdate=;;
	--ours)		shift; mergeArgs+=(--strategy=recursive --strategy-option=ours);;
	--theirs)	shift; mergeArgs+=(--strategy=recursive --strategy-option=theirs);;
	--record-only)	shift; mergeArgs+=(--strategy=ours);;
	--)		mergeArgs+=("$1"); shift; break;;
	*)		mergeArgs+=("$1"); shift;;
    esac
done

eval "typeset -a gitConfigArgs=($GIT_CONFIG_ARGS)"
git "${gitConfigArgs[@]}" merge "${mergeArgs[@]}" "$@" || exit $?

[ "$isSubmoduleUpdate" ] || exit 0
readarray -t mergedSubmodules < <(git subst)
[ ${#mergedSubmodules[@]} -gt 0 ] || exit 0

if [ ${#mergedSubmodules[@]} -eq 1 ]; then
    mergedSubmodulesArticle=This
    mergedSubmodulesAuxiliaryVerb=has
    mergedSubmodulesPlural=
else
    mergedSubmodulesArticle=These
    mergedSubmodulesAuxiliaryVerb=have
    mergedSubmodulesPlural=s
fi
printf '%s submodule%s %s been merged; checking out the resulting version%s now: %s\n' "$mergedSubmodulesArticle" "$mergedSubmodulesPlural" "$mergedSubmodulesAuxiliaryVerb" "$mergedSubmodulesPlural" "$(joinBy --last-separator ' and ' ', ' "${mergedSubmodules[@]}")"
git subwipe
