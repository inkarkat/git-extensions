#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Check whether the conditions for a merge are good. Fails if:
- there still exist fixup commit(s) (that should be squashed before the merge)
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '--merge-to TARGET-BRANCH|SOURCE-BRANCH [...] [-?|-h|--help]'
}
branchFormat='..%s'
typeset -a branches=()
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
    --merge-to)		shift
			branches+=("${1:?}"); shift
			branchFormat='%s..'
			if [ $# -gt 0 ]; then
			    printUsage "$0" >&2
			    exit 2
			fi
			;;
    --)			shift;;
    -*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
esac
branches+=("$@")
if [ ${#branches[@]} -eq 0 ]; then
    echo 'ERROR: No --merge-to TARGET-BRANCH or SOURCE-BRANCH(es) passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2

status=0
typeset -A badCommitTitlePatterns=(
    ['^\(amend\|fixup\|squash\)! ']=$'fixup! / amend! / squash!\nsquash'
    ['\(^\| \)TEST: ']=$'test\ndrop'
)
separator=
for branch in "${branches[@]}"
do
    branchHint=; [ ${#branches[@]} -gt 1 ] && branchHint="on $branch"

    printf -v branchRange "$branchFormat" "$branch"
    commitTitles="$(git log --pretty=tformat:%s "$branchRange")" || continue
    [ -n "$commitTitles" ] || continue

    for pattern in "${!badCommitTitlePatterns[@]}"
    do
	badCommitCount="$(printf '%s\n' "$commitTitles" | grep --count -e "$pattern")"
	if [ $badCommitCount -gt 0 ]; then
	    status=1

	    what="${badCommitTitlePatterns["$pattern"]}"
	    what="${badCommitTitlePatterns["$pattern"]%%$'\n'*}"
	    remedy="${badCommitTitlePatterns["$pattern"]#*$'\n'}"
	    if [ $badCommitCount -eq 1 ]; then
		printf '%sThere is still a %s commit%s; please %s it first:\n' "$separator" "$what" "${branchHint:+ }$branchHint" "$remedy"
	    else
		printf '%sThere are still %d %s commits%s; please %s them first:\n' "$separator" "$badCommitCount" "$what" "${branchHint:+ }$branchHint" "$remedy"
	    fi
	    separator=$'\n'

	    git-lghighlight --grep "$pattern" "$branchRange"
	fi
    done
done
exit $status
