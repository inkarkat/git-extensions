#!/bin/bash
shopt -qs extglob

: ${GIT_MERGELOCALBR_SOURCE_COMMAND:=git-localbr}

printUsage()
{
    cat <<HELPTEXT
Merge all / the last committed N local branches (except for the current
branch and master (and base branch if defined)).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--branches BRANCH [...] ;] [-q|--quiet] [-y|--yes] [--include-current] [--include-master] [--include-base] [--include-all] [-n N|--count N] [--no-commit] [--squash] [-s <strategy> | -s single | -s1 ] [-m <msg>] [-?|-h|--help]'
}

branchNum=
typeset -a directBranches=()
printf -v originalArgs '%q ' "${@//
/ }"
isQuiet=
isYes=
isOneByOneMerge=
typeset -a gitLocalbrArgs=()
typeset -a directBranches=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--quiet|-q)	shift; isQuiet=t;;
	--yes|-y)	shift; isYes=t;;
	--count|-n)	shift; branchNum="$1"; shift;;
	-s1)		shift; isOneByOneMerge=t;;
	-s)		if [ "$2" = 'single' ]; then shift; shift; isOneByOneMerge=t; else break; fi;;
	--include-*)	gitLocalbrArgs+=("$1"); shift;;
	--branches)	shift
			while [ $# -gt 0 -a "$1" != ';' ]
			do
			    directBranches+=("$1")
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo 'ERROR: --branches must be concluded with ;!'; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			;;
	--)		shift; break;;
	*)		break;;
    esac
done

getOneByOneMergeCommand()
{
    local gitArgs="$1"; shift
    local commandSeparator=
    local branch
    for branch
    do
	printf '%sgit merge%s%s %s' "$commandSeparator" "${gitArgs:+ }" "$gitArgs" "$branch"
	commandSeparator=' && '
    done
}

if [ ${#directBranches[@]} -gt 0 ]; then
    localBranches=("${directBranches[@]}")
else
    readarray -t localBranches < <(eval "$GIT_MERGELOCALBR_SOURCE_COMMAND" '"${gitLocalbrArgs[@]}"')
fi
if [ ${#localBranches[@]} -eq 0 ]; then
    echo >&2 'No local branches found!'
    exit 1
fi
[ -n "$branchNum" ]  && [ $branchNum -lt ${#localBranches[@]} ] \
    && localBranches=("${localBranches[@]:(-$branchNum)}")

if [ "$isOneByOneMerge" ]; then
    readarray -t mergeCommand < <(getOneByOneMergeCommand "$*" "${localBranches[@]}")
else
    typeset -a mergeCommand=(git-wrapper merge "$@" "${localBranches[@]}")
fi

IFS=$'\n'
if [ "$isYes" ]; then
    [ "$isQuiet" ] || echo >&2 "Merging:
${localBranches[*]}"
else
    userBinaryChoice --keep-prompt --introduction "Merging:
${localBranches[*]}" --question 'Really merge these branches?' --yes-no || exit 4
fi

eval "${mergeCommand[@]}"
if [ $? -eq 2 -a ! "$isOneByOneMerge" ]; then
    echo '
Hint: When the merge with strategy octopus fails, try merging sequentially:'
    printf 'git mergelocalbr %s-s1\n    or\n%s\n' "$originalArgs" "$(getOneByOneMergeCommand "$*" "${localBranches[@]}")"

    exit 2
fi
