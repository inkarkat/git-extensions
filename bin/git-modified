#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Test whether there are / list modified (staged and unstaged) files.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--] [<path>...] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
    --)			shift;;
esac

typeset -A stagedFiles=()
while IFS=$'\n' read -r filespec
do
    stagedFiles["$filespec"]=t
done < <(git-stifiles -- "$@")

readarray -t modifiedFiles < <(git-stIfiles HEAD -- "$@")
# Note: I could also use { git-stifiles; git-stIfiles; } | sort -u, but that
# requires another external command unconditionally.

if [ ${#stagedFiles[@]} -gt 0 ]; then
    for filespec in "${modifiedFiles[@]}"
    do
	unset "stagedFiles[$filespec]"
    done
fi

if [ ${#modifiedFiles[@]} -gt 0 -o ${#stagedFiles[@]} -gt 0 ]; then
    if [ ${#stagedFiles[@]} -eq 0 ]; then
	printf '%s\n' "${modifiedFiles[@]}"
    else
	# Some file(s) are staged, but the change is undone in the working copy,
	# so it's not contained in $modifiedFiles. We need to combine both
	# lists.
	printf '%s\n' "${modifiedFiles[@]}" "${!stagedFiles[@]}" | sort
    fi
else
    exit 1
fi
