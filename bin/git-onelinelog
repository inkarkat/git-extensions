#!/bin/bash
set -o pipefail
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
One-line author, date, tags and commit summary.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[<log-options>] [<revision range>] [[--] <path>...] [-?|-h|--help]'
}

isColorOff=
typeset -a graphLogArg=()
isDisjointed=
typeset -a reverseLogArg=()
isTerminatorSemantics=t
decorationFormat='%C(red bold)%d%Creset '
typeset -a decorateLogArg=(--decorate)
typeset -a logArgs=()
isPrintFormat=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;

	--no-color|--color=never)
			colorArg=("$1"); isColorOff=t; shift;;
	--color=*)	colorArg=("$1"); shift;;
	--color)	colorArg=("$1" "$2"); if [ "$2" = never ]; then isColorOff=t; fi; shift; shift;;

	--print-format)	shift; isPrintFormat=t;;
	--no-decorate)	decorateLogArg=("$1"); shift; decorationFormat='';;
	--decorate|--decorate=*)
			decorateLogArg=("$1"); shift;;
	--graph)	graphLogArg=("$1"); shift;;

	--date=*|--relative-date)
			logArgs+=("$1"); shift; GIT_ONELINELOG_DATEFORMAT=%ad;;
	--date)		logArgs+=("$1" "${2:?}"); shift; shift; GIT_ONELINELOG_DATEFORMAT=%ad;;

	--follow|-[GS]*|--grep|--grep=*)
			logArgs+=("$1"); shift; isDisjointed=t;;
	--reverse)	reverseLogArg+=("$1"); shift;;
	--name-status|--stat|--stat=*|--numstat|--shortstat)
			logArgs+=("$1"); shift; isTerminatorSemantics=;;
	--)		logArgs+=("$1"); shift; break;;
	*)		logArgs+=("$1"); shift;;
    esac
done

FORMAT="%C(cyan)%h%Creset %Cgreen(%aN, ${GIT_ONELINELOG_DATEFORMAT:-%ar})%Creset ${decorationFormat}%s"
if [ "$isColorOff" ]; then
    FORMAT=${FORMAT//%C\(+([^\)])\)/}
    FORMAT=${FORMAT//%C+([a-z])/}
fi
if [ "$isPrintFormat" ]; then
    printf '%s\n' "$FORMAT"
    exit 0
fi

reversePipeline=
if [ ${#graphLogArg[@]} -gt 0 ]; then
    if [ "$isDisjointed" ]; then
	# When filtering diffs, Git (2.7.4) adds "..." lines between each result
	# (presumably to indicate that the graph is disjointed; but that's also
	# the case with --grep and it's not happening there). These are
	# increasing the number of lines by almost 100% and are just confusing
	# to me. Instead of filtering them away, just drop the --graph, as it's
	# not useful for any kind of filtering, anyway.
	graphLogArg=()
    elif [ ${#reverseLogArg[@]} -gt 0 ]; then
	# Git (2.7.4) does not support this, but it can be useful for the one-line
	# logs here:
	# > fatal: cannot combine --reverse with --graph
	# We can emulate it easily:
	# - Reverse the lines.
	# - Flip the / \ graph symbols (as these are unlikely to appear in the
	#   commit summaries, let's do this globally for now).
	# - Pipe into pager as git log won't do this for us any longer.
	reversePipeline='tac | tr "/\\\\" "\\\\/"'
	if [ -t 1 ]; then
	    # Need to explicitly enable color because of the appended pipeline
	    # processing. Don't do this if the user explicitly turned it off,
	    # though.
	    [ "$isColorOff" ] || colorArg=('--color=always')
	    reversePipeline="$reversePipeline"' | "${PAGER:-less}" --RAW-CONTROL-CHARS'
	fi
	reverseLogArg=()
    fi
fi

eval 'git $GIT_ONELINELOG_DIRECT_ARG log --abbrev-commit "${colorArg[@]}" "${decorateLogArg[@]}" "${graphLogArg[@]}" "${reverseLogArg[@]}" --pretty="${isTerminatorSemantics:+t}format:${GIT_ONELINELOG_PREFORMAT:-}${FORMAT//${GIT_ONELINELOG_NOFORMAT:-}/}${GIT_ONELINELOG_POSTFORMAT:-}" "${logArgs[@]}" "$@"' \
    "${reversePipeline:+|}$reversePipeline"
