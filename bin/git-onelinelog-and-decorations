#!/bin/bash
shopt -qs extglob

: ${GIT_ONELINELOGANDDECORATIONS_ARGS_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--full-decorations] [--decorate-refs=<pattern> [-i|--include <pattern>] [-e|--exclude <pattern>]] [<log-options>] [<revision range>] ...'
    printf 'Usage: %q %s\n' "$(basename "$1")" "... [--commit-log-args <log-options> [...] ${GIT_ONELINELOGANDDECORATIONS_ARGS_END}] [--] <path> [...]"
    printf 'Usage: %q %s\n' "$(basename "$1")" "... [--full-decorations] --commit-log-args <log-options> [...] $GIT_ONELINELOGANDDECORATIONS_ARGS_END [--] [<path> ...]"
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --only-decorations [--] [<path> ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
One-line author, date, tags and commit summary for files in <path> and/or for
commits addressed by --commit-log-args <log-options>, plus any ref names, also
of commits not covered.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --full-decorations	Show all commits with decorations between addressed
			commits; by default, only one preceding and succeeding
			commit with decorations is shown around addressed
			commit(s), with [...] indicating that decorated commits
			have been dropped.
    --only-decorations	Only show commits that are decorated with any ref names.
			Other (not tagged, not tip of a branch) commits are
			omitted.
    --commit-log-args <log-options> [...] $GIT_ONELINELOGANDDECORATIONS_ARGS_END
			These log options are only used for filtering the
			non-decorated commits, as an alternative or supplement
			to filtering by <path>.
    --decorate-refs=<pattern>
			Only consider ref names matching <pattern>. This is
			often provided by an alias; use --include and --exclude
			to further refine matches.
    --include|-i <pattern>
			Append <pattern> to further restrict the ref names.
    --exclude|-e <pattern>
			Append <pattern> to exclude matching ref names.

This can be useful if tagging and development are done on separate branches, but
you want to find out which commits that changed a file were in a release.
Or to find out when a particular set of commits (e.g. by one author, done to one
subdir) happened related to releases.
HELPTEXT
}
unset decorationsFilterSedCommandSymbol
decorationsFilterSedCommandPrefix='s/^\([^\n]\+\)\n.*\n\([^\n]\+\)$/\1'
decorationsFilterSedCommandSymbol=' [01;31m[...][0;38;5;245m'
decorationsFilterSedCommandSuffix='\n\2/'
recolorDecorationsSedCommand='s#\x1b\[[0-9:;]*m##g; s#\[\(.*\)\]#[1;31m\1[0;38;5;245m#; s#^#[38;5;245m#g; s#$#[0m#'
filter=filterDecorationsAndCommits
isDecorationsOnly=
typeset -a decorateRefsPatterns=()
typeset -a excludePatterns=()
typeset -a includePatterns=()
typeset -a gitLogArgs=()
typeset -a gitCommitLogArgs=()
typeset -a gitGraphLogArg=()
unset files
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
isColor=
if [ -t 1 ]; then
    isColor=t
else
    pager=()
fi
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	--no-color|--color=never)
			isColor=; shift;;
	--color=always)	isColor=t; shift;;
	--color)	case "$2" in
			    always) isColor=t;;
			    never)  isColor=;;
			    *)	    echo >&2 "ERROR: Invalid --color arg: $2"
				    echo >&2
				    printUsage "$0" >&2
				    exit 2
				    ;;
			esac
			shift; shift
			;;

	--full-decorations)
			shift; decorationsFilterSedCommand='';;
	--only-decorations)
			shift; isDecorationsOnly=t; filter=filterDecorations;;

	--graph)	gitGraphLogArg=("$1"); shift;;
	--commit-log-args)
			shift
			while [ $# -gt 0 -a "$1" != "$GIT_ONELINELOGANDDECORATIONS_ARGS_END" ]
			do
			    gitCommitLogArgs+=("$1")
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --commit-log-args must be concluded with '${GIT_ONELINELOGANDDECORATIONS_ARGS_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			if [ ${#gitCommitLogArgs[@]} -eq 0 ]; then
			    echo 'ERROR: --commit-log-args must be followed by at least one <log-options>.'; echo; printUsage "$0"
			    exit 2
			fi >&2
			;;
	--decorate-refs)
			shift; decorateRefsPatterns+=("$1"); shift;;
	--decorate-refs=*)
			decorateRefsPatterns+=("${1#--decorate-refs=}"); shift;;
	--exclude|-e)	shift; excludePatterns+=("${1:?}"); shift;;
	--include|-i)	shift; includePatterns+=("${1:?}"); shift;;
	--)		shift; typeset -a files=("$@"); break;;
	*)		gitLogArgs+=("$1"); shift;;
    esac
done
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    gitLogArgs+=("$@")
    while [ ${#gitLogArgs[@]} -ne 0 ]
    do
	lastArg="${gitLogArgs[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	gitLogArgs=("${gitLogArgs[@]:0:${#gitLogArgs[@]}-1}")
    done
fi
if [ ${#files} -eq 0 -a ${#gitCommitLogArgs[@]} -eq 0 ] && [ ! "$isDecorationsOnly" ]; then
    echo 'ERROR: Neither --commit-log-args <log-options> nor <path> passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2

FORMAT='%C(cyan){%h}%Creset %Cgreen(%aN, %ar)%Creset %C(red bold)[%d]%Creset %s'
if [ "$isColor" ]; then
    gitLogArgs+=('--color=always')
else
    decorationsFilterSedCommandSymbol=' [...]'
    recolorDecorationsSedCommand=''

    FORMAT=${FORMAT//%C\(+([^\)])\)/}
    FORMAT=${FORMAT//%C+([a-z])/}
fi
: ${decorationsFilterSedCommand="${decorationsFilterSedCommandPrefix}${decorationsFilterSedCommandSymbol}${decorationsFilterSedCommandSuffix}"}

for pattern in "${decorateRefsPatterns[@]}"
do
    for i in "${includePatterns[@]:-}"
    do
	gitLogArgs+=(--decorate-refs="${pattern%/}/${i}")
    done
    for e in "${excludePatterns[@]}"
    do
	gitLogArgs+=(--decorate-refs-exclude="${pattern%/}/${e}")
    done
done

contains()
{
    needle=$1; shift
    for elem
    do
	[ "$needle" = "$elem" ] && return 0
    done
    return 1
}
containsGlob()
{
    local elem glob=$1; shift
    for elem
    do
	case "$elem" in
	    @($glob)) return 0;;
	esac
    done
    return 1
}

filterDecorations()
{
    sed -n \
	-e '//!d' \
	-e '/\[\]/!{ s/\[\|{\|}\|\]//g; p }'
}
filterDecorationsAndCommits()
{
    local IFS=' '
    local concatenatedCommits="$*"
    local concatenatedCommitsPattern="\\(${concatenatedCommits// /\\|}\\)"

    sed -n \
	-e '//!d' \
	-e '/\[\]/!{ '"${recolorDecorationsSedCommand}${recolorDecorationsSedCommand:+; }"'s/\[\|{\|}\|\]//g; H; }' \
	-e "/{${concatenatedCommitsPattern//\//\/}}/"'{ s/\[\|{\|}\|\]//g; x; s/^\n//; '"${decorationsFilterSedCommand}${decorationsFilterSedCommand:+; }"'G; s/^\n//; p; s/.*//; h; $b; }' \
	-e '${ g; /./!b; s/^\n//; '"${decorationsFilterSedCommand}${decorationsFilterSedCommand:+; }"'p; }'
}


typeset -a removeArgs=()
reversePipeline=
if [ ${#gitGraphLogArg[@]} -gt 0 ]; then
    if containsGlob '-[GS]*' "${gitLogArgs[@]}" || contains '--grep' "${gitLogArgs[@]}" || containsGlob '--grep=*' "${gitLogArgs[@]}"; then
	# When filtering diffs, Git (2.7.4) adds "..." lines between each result
	# (presumably to indicate that the graph is disjointed; but that's also
	# the case with --grep and it's not happening there). These are
	# increasing the number of lines by almost 100% and are just confusing
	# to me. Instead of filtering them away, just drop the --graph, as it's
	# not useful for any kind of filtering, anyway.
	gitGraphLogArg=()
    elif contains '--reverse' "${gitLogArgs[@]}"; then
	# Git (2.7.4) does not support this, but it can be useful for the one-line
	# logs here:
	# > fatal: cannot combine --reverse with --graph
	# We can emulate it easily:
	# - Reverse the lines.
	# - Flip the / \ graph symbols (as these are unlikely to appear in the
	#   commit summaries, let's do this globally for now).
	# - Pipe into pager as git log won't do this for us any longer.
	reversePipeline='tac | tr "/\\\\" "\\\\/"'
	removeArgs+=('--reverse')
    fi
fi

if [ ${#removeArgs[@]} -gt 0 ]; then
    typeset -a argsCopy=()
    for arg in "${gitLogArgs[@]}"
    do
	contains "$arg" "${removeArgs[@]}" || argsCopy+=("$arg")
    done
    gitLogArgs=("${argsCopy[@]}")
fi

if [ ! "$isDecorationsOnly" ]; then
    readarray -t commits < <(git log --pretty=tformat:%h "${gitCommitLogArgs[@]}" "${gitLogArgs[@]}" -- "${files[@]}")
    if [ ${#commits[@]} -eq 0 ]; then
	echo >&2 'No commits found.'
	exit 1
    fi
fi

git $GIT_ONELINELOG_DIRECT_ARG log --abbrev-commit --date=relative --decorate --pretty="tformat:${GIT_ONELINELOG_PREFORMAT:-}${FORMAT//${GIT_ONELINELOG_NOFORMAT:-}/}${GIT_ONELINELOG_POSTFORMAT:-}" "${gitGraphLogArg[@]}" "${gitLogArgs[@]}" | \
    eval "$filter" '"${commits[@]}"' "${reversePipeline:+|}$reversePipeline" "${pager:+|}" '"${pager[@]}"'
