#!/bin/bash
set -o pipefail
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Show (one-line) logs for the commits in the passed <range> and the first commit
[affecting FILE(s)] after the range as well.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--range-is-last] ... --since <date>|--max-count <number>|-n <number>|<range>|--range <range> [--range ...] [LOG-ARGS ...] [--] [FILE ...] [-?|-h|--help]'
}

isRangeLastArg=
typeset -a gitCommandArgs=()
unset files
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--range-is-last)
			shift; isRangeLastArg=t;;
	--)		shift; typeset -a files=("$@"); break;;
	*)		gitCommandArgs+=("$1"); shift;;
    esac
done
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    gitCommandArgs+=("$@")
    while [ ${#gitCommandArgs[@]} -ne 0 ]
    do
	lastArg="${gitCommandArgs[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	gitCommandArgs=("${gitCommandArgs[@]:0:${#gitCommandArgs[@]}-1}")
    done
fi
set -- "${gitCommandArgs[@]}"

typeset -a logArgs=()
typeset -a rangeArgs=()
if [ "$isRangeLastArg" ] && [ $# -gt 0 ]; then
    rangeArgs=("${!#}")
    set -- "${@:1:$(($#-1))}"
else
    while [ $# -ne 0 ]
    do
	case "$1" in
	    --since)	    rangeArgs+=("$1" "$2"); shift; shift;;
	    --max-count|-n) rangeArgs+=("$1" "$2"); shift; shift;;
	    --max-count=*|-+([0-9]))
			    rangeArgs+=("$1"); shift;;
	    --range)	    shift; rangeArgs+=("$1"); shift;;
	    --range=*)	    rangeArgs+=("${1#--range=}"); shift;;
	    --follow)	    logArgs+=("$1"); shift;;
	    *)		    if [ ${#rangeArgs[@]} -eq 0 ]; then
				rangeArgs+=("$1"); shift
			    fi
			    break
			    ;;
	esac
    done
fi
[ ${#rangeArgs[@]} -gt 0 ] || exit 1

readarray -t logLines < <(git log "${rangeArgs[@]}" "${logArgs[@]}" "$@" ${files:+--} "${files[@]}")
[ ${#logLines[@]} -gt 0 ] || exit 1

printf '%s\n' "${logLines[@]}"

lastLogLine="${logLines[-1]}"
[ -n "$lastLogLine" ] || exit 3
literalLastLogLine="$(printf %s "$lastLogLine" | sed -e 's/[][\$*.^/]/\\&/g')"

git-wrapper log "${logArgs[@]}" "$@" ${files:+--} "${files[@]}" \
    | sed -ne "/^${literalLastLogLine}$/{ N; s/^[^\n]*\n//; p; q; }"
