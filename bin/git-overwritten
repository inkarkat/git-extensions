#!/bin/bash
shopt -qs extglob

: ${GIT_OVERWRITTEN_COLOR_COMMIT=[36m}
: ${GIT_OVERWRITTEN_COLOR_AUTHOR=[32m}
: ${GIT_OVERWRITTEN_COLOR_DATE=[32m}
: ${GIT_OVERWRITTEN_COLOR_COUNT=[35m}
: ${GIT_OVERWRITTEN_COLOR_RESET=[0m}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, they can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--color=(always|auto|never)|--no-color] [--cached [<commit>]|<commit> [<commit>]|<commit>..<commit>|<commit>...<commit>|-<number>|-n <number>|--count=<number> [<commit>]] [<diff-options>] [--] [FILE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show aggregate blame information of lines that have been changed between
commits, commit and working tree, etc. [in FILE ...]
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --by-author		Sort commits by author name.
    --by-size		Sort commits by the number of lines affected.
Each line represents a past commit that the current change (partially)
overwrites consisting of:
- relative commit date
- number of lines from the commit that this change affects
- author name
- commit hash
- subject message

RELATED COMMANDS:
- Inspired by https://github.com/mislav/dotfiles/blob/master/bin/git-overwritten
HELPTEXT
}

isColor=t
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
if [ ! -t 1 ]; then
    isColor=
    pager=()
    formatter=()
fi

exitTooManyCommitsError()
{
    echo >&2 'ERROR: Too many <commit>s specified.'
    echo >&2
    printUsage >&2 "$0"
    exit 2
}

typeset -a commits=()
addCommit()
{
    commits+=("${1:-HEAD}")
}

count=
isWithStage=
typeset -a difflinesArgs=()
format=$'@%3$d\t%2$7d\t%1$s'
typeset -a formatColors=("$GIT_OVERWRITTEN_COLOR_DATE" "$GIT_OVERWRITTEN_COLOR_COUNT" "$GIT_OVERWRITTEN_COLOR_AUTHOR")
typeset -a sortArgs=(--key 1.2,1nr)
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=never)
			isColor=; shift;;
	--color=always)	isColor=t; shift;;
	--color=auto)	shift;;
	--color)	case "$2" in
			    always) isColor=t;;
			    never)  isColor=;;
			    auto)   ;;
			    *)	    echo >&2 "ERROR: Invalid --color arg: $2"
				    echo >&2
				    printUsage "$0" >&2
				    exit 2
				    ;;
			esac
			shift; shift
			;;
	--by-author)	shift; format=$'%1$s\t@%3$d\t%2$7d'; formatColors=("$GIT_OVERWRITTEN_COLOR_AUTHOR" "$GIT_OVERWRITTEN_COLOR_DATE" "$GIT_OVERWRITTEN_COLOR_COUNT"); sortArgs=(--key 1,1 --key 2.2,2nr);;
	--by-size)	shift; format=$'%2$7d\t@%3$d\t%1$s'; formatColors=("$GIT_OVERWRITTEN_COLOR_COUNT" "$GIT_OVERWRITTEN_COLOR_DATE" "$GIT_OVERWRITTEN_COLOR_AUTHOR"); sortArgs=(--key 1,1nr --key 2.2,2nr);;

	-+([bw]))	difflinesArgs+=("$1"); shift;;
	--@(histogram|ignore-all-space|ignore-blank-lines|ignore-cr-at-eol|ignore-space-at-eol|ignore-space-change|ignore-submodules|minimal|no-textconv|patience|text|textconv))
			difflinesArgs+=("$1"); shift;;
	-[I])		difflinesArgs+=("$1" "${2?}"); shift; shift;;
	--@(anchored|diff-algorithm|ignore-matching-lines|rotate-to|skip-to)=*)
			difflinesArgs+=("$1"); shift;;
	--@(anchored|diff-algorithm|ignore-matching-lines|rotate-to|skip-to))
			difflinesArgs+=("$1" "${2?}"); shift; shift;;

	--count|-n)	shift; count="$1"; shift;;
	--count=*)	count="${1#--count=}"; shift;;
	-+([0-9]))	count="${1#-}"; shift;;

	--cached)	difflinesArgs+=("$1"); shift; isWithStage=t;;

	--)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;

	*...*)		[ ${#commits[@]} -lt 2 ] || exitTooManyCommitsError
			endCommit="${1#*...}"
			startCommit="$(git merge-base "${1%%...*}" "$endCommit")" || exit $?
			addCommit "$startCommit"
			addCommit "$endCommit"
			shift
			;;
	*..*)		[ ${#commits[@]} -lt 2 ] || exitTooManyCommitsError
			addCommit "${1%%..*}"
			addCommit "${1#*..}"
			shift
			;;
	*)		if git rev-parse --verify --quiet "${1:?}" >/dev/null 2>&1; then
			    [ ${#commits[@]} -lt 2 ] || exitTooManyCommitsError
			    addCommit "$1"
			else
			    echo "ERROR: Unknown argument \"$1\"!"
			    echo
			    printUsage "$0"
			    exit 2
			fi >&2
			shift
			;;
    esac
done
if [ -n "$count" ]; then
    case ${#commits[@]} in
	0) addCommit "HEAD~${count}"; addCommit 'HEAD';;
	1) commits=("${commits[0]}~${count}" "${commits[0]}");;
	*) exitTooManyCommitsError;;
    esac
fi
if [ "$isWithStage" ] && [ ${#commits[@]} -gt 1 ]; then
    exitTooManyCommitsError
fi

if git diff --quiet "${difflinesArgs[@]}" "${commits[@]}" "$@"; then
    echo >&2 'No changes.'
    exit 1
fi

processBlame()
{
    local anyCommit="$(git rev-parse --verify --short HEAD)"	# Resolve what core.abbrev resolves to.
    local abbrevLen="${#anyCommit}"

    awk -v "abbrevLen=$abbrevLen" \
	-v "format=${format//\\/\\\\}" \
'
function getFollowingFields()
{
    $1 = ""; sub(OFS, ""); return $0
}
/^[[:xdigit:]]{40} [[:digit:] ]+$/ {
    hash = $1
    count[hash] += 1
}
/^author / { author[hash] = getFollowingFields() }
/^committer-time / { time[hash] = getFollowingFields() }
/^summary / { subject[hash] = getFollowingFields() }
END {
    for (hash in count) {
	printf(format "\t%4$s\t%5$s\n", author[hash], count[hash], time[hash], substr(hash, 0, abbrevLen), subject[hash])
    }
}
'
}

sortBy()
{
    sort --field-separator $'\t' "${sortArgs[@]}"
}

colorize()
{
    typeset -a colors=("$GIT_OVERWRITTEN_COLOR_RESET" "${formatColors[@]}" "$GIT_OVERWRITTEN_COLOR_COMMIT")
    local IFS=$'\n'
    awk --field-separator '\t' \
	-v "colorList=${colors[*]//\\/\\\\}" \
'
BEGIN {
    n = split(colorList, colors, "\n")
    OFS = "\t"
}
{
    for (i = 1; i <= n; i++) {
    	$i = colors[i + 1] $i (colors[i + 1] == "" ? "" : colors[1])
    }
    print
}
'
}

quotedBaseCommit=
if [ "$isWithStage" ]; then
    quotedBaseCommit=HEAD	# DWIM: There's no blaming of staged changes, so blame the last commit.
else
    case ${#commits[@]} in
	0)  quotedBaseCommit=HEAD;;
	*)  printf -v quotedBaseCommit %q "${commits[0]}";;	# blame the base commit
    esac
fi

git-difflines --only-old --number-format '-L%dn,%dn' \
	--command "git-wrapper blame --line-porcelain {} $quotedBaseCommit -- {+}" \
	"${difflinesArgs[@]}" "${commits[@]}" "$@" \
    | processBlame \
    | sortBy \
    | eval reldate \
    "${isColor:+| colorize}" \
    "${formatter:+|}" '"${formatter[@]}"' \
    "${pager:+|}" '"${pager[@]}"'
