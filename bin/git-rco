#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Checkout passed <branch> in ${remote:-REMOTE}; fetching if needed and ensuring
that an existing tracked branch doesn't contradict the request.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [--gui|--terminal|--none] [--submodule ignore|yes|recurse] [<checkout-args> ...] <branch> [-?|-h|--help]"
}
typeset -a logArgs=()
typeset -a checkoutArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--@(gui|terminal|none))
			logArgs+=("$1"); shift;;
	--submodule)	logArgs+=("$1" "$2"); shift; shift;;
	--)		checkoutArgs+=("$1"); shift; break;;
	*)		checkoutArgs+=("$1"); shift;;
    esac
done
set -- "${checkoutArgs[@]}" "$@"
if [ $# -eq 0 ]; then
    echo >&2 "ERROR: Must pass remote and branch name"
    exit 2
fi
remote="${1:?}"; shift

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
if [ $# -eq 0 ]; then
    echo "ERROR: Must pass branch name"
    exit 2
elif [[ "$1" = -[bB] ]]; then
    echo "ERROR: Don't pass -b|-B; a branch will be created, anyway."
    exit 2
fi >&2
branch="${!#}"
branch="${branch#${remote}/}"	# DWIM: Remove a prepended REMOTE.
set -- "${@:1:$(($#-1))}"
remoteBranch="${remote}/${branch:?}"

if ! git-existsbr -- "$remoteBranch"; then
    printf >&2 'Note: %s does not exist yet, try fetching it first...\n' "$remoteBranch"

    # Note: No git-fetch wrapper here, because we're only fetching a particular
    # branch, not a complete repository, and our hook so far is only concerned
    # with the latter.
    git fetch "$remote" "$branch" || exit $?
fi

exec git-checkout-remote-branch "${logArgs[@]}" "$@" "$remoteBranch"
