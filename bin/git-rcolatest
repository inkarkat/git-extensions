#!/bin/bash
set -o pipefail
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Checkout the latest (by last commit age) local branch from the passed ${remote:-REMOTE}
[matching pattern].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [--gui|--terminal|--none] [--submodule ignore|yes|recurse] [(--submodules|--queried-submodules) [--submodules-recursive]] [<branch-glob> ...] [-?|-h|--help]"
}

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: Must pass REMOTE.'
    exit 2
fi
remote="${1:?}"; shift

typeset -a checkoutArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--@(gui|terminal|none|submodules|queried-submodules|submodules-recursive))
			checkoutArgs+=("$1"); shift;;
	--submodule)	checkoutArgs+=("$1" "$2"); shift; shift;;
	*)		break;;
    esac
done

remoteBranch="$(git-rbr "$remote" --sort=committerdate "$@" | tail -n 1)" || exit $?
if [ -z "$remoteBranch" ]; then
    # git branch does not return an error if there are no matches for the passed pattern.
    printf >&2 'ERROR: No%s branch found in %s.\n' "${*:+ matching}" "$remote"
    exit 1
fi
exec git-checkout-remote-branch "${checkoutArgs[@]}" "${remoteBranch##+( )}"
