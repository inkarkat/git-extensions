#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Find a branch name that the detached commit is based on and check that out,
looking first to the commit itself, then the first branch that comes after the
detached commit, and thus contains it, then falling back to branch(es) that are
reachable from the detached commit.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet] [-y|--yes] [-f|--force] [--gui|--terminal|--none] [(--submodules|--queried-submodules) [--submodules-recursive]] [-?|-h|--help]'
}
isQuiet=
isYes=
typeset -a checkoutArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--quiet|-q)	shift; isQuiet=t;;
	--yes|-y)	shift; isYes=t;;
	--force|-f|--submodules|--queried-submodules|--submodules-recursive)
			checkoutArgs+=("$1"); shift;;
	--@(gui|terminal|none))
			checkoutArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
if ! git-isdetached; then
    printf >&2 "Not in a detached working copy; current branch is '%s'.\\n" "$(git-brname --real-branch-only)"
    exit 1
fi

branchName="$(git containedbranch HEAD 2>/dev/null)"
if [ -n "$branchName" ]; then
    if [ "$isYes" ] || git-equals "$branchName" HEAD; then
	: # Directly on the detached branch, go for it!
    else
	userBinaryChoice --keep-prompt --question "'${branchName}' contains the current revision; forward to and check out that?" --yes-no || branchName=''
    fi
fi

if [ -z "$branchName" ]; then
    while IFS=$'\n' read -r remoteBranch
    do
	if git-equals "$remoteBranch" HEAD; then
	    if [ "$isYes" ] \
		|| userBinaryChoice --keep-prompt --question "'${remoteBranch}' points to the current revision; check it out?" --yes-no
	    then
		exec git-checkout-remote-branch "${checkoutArgs[@]}" "$remoteBranch"
	    fi
	fi
    done < <(git-rbr '')
fi

if [ -z "$branchName" ]; then
    readarray -t containedBranches < <(comm -12 <(git-containsbranch | sort) <(git-localbr --include-all | sort))
    if [ ${#containedBranches[@]} -eq 0 ]; then
	echo >&2 'ERROR: No branch that is related to the detached working copy found.'
	exit 1
    elif [ ${#containedBranches[@]} -eq 1 ]; then
	branchName="${containedBranches[0]}"
	if [ ! "$isYes" ]; then
	    userBinaryChoice --keep-prompt --question "'${branchName}' is contained in the current revision; go back and check out that?" --yes-no || exit 4
	fi
    else
	if [ "$isYes" ]; then
	    echo >&2 'ERROR: Multiple contained candidate branches found.'
	    exit 1
	elif ! branchName="$(userchoiceFromList --keep-prompt --question 'Choose a contained branch to go back to:' -- "${containedBranches[@]}")"; then
	    exit 4
	fi
    fi
fi

exec git-checkout-with-logdelta "${checkoutArgs[@]}" "${branchName:?}"
