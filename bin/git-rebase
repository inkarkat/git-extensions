#!/bin/bash

: ${GIT_REBASE_EXEC_END=;}

printUsage()
{
    cat <<HELPTEXT
Reapply commits on top of another base tip.
Also considers submodules and automatically checks out resulting versions
(unless --no-submodule-update is given).
Supports my command-passing conventions (-c|--command and --exec ... ;)
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[--no-submodule-update] [-c|-x|--command COMMANDLINE|--exec SIMPLECOMMAND [...] ${GIT_REBASE_EXEC_END} [-c ...]]  [<rebase-args> ...] [-?|-h|--help]"
}

isSubmoduleUpdate=t
typeset -a rebaseArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--no-submodule-update)
			shift; isSubmoduleUpdate=;;
	--command|-c|-x)
			shift; rebaseArgs+=(--exec "${1:?}"); shift;;
	--exec)		shift
			if ! contains "$GIT_REBASE_EXEC_END" "$@"; then
			    # Also support the build-in --exec as well (though I prefer -c|--command).
			    rebaseArgs+=(--exec "$1"); shift
			    continue
			fi

			cmd=
			while [ $# -gt 0 -a "$1" != "$GIT_REBASE_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd+="${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${GIT_REBASE_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			rebaseArgs+=(--exec "$cmd")
			;;
	--)		rebaseArgs+=("$1"); shift; break;;
	*)		rebaseArgs+=("$1"); shift;;
    esac
done

eval "typeset -a gitConfigArgs=($GIT_CONFIG_ARGS)"
command git "${gitConfigArgs[@]}" rebase "${rebaseArgs[@]}" "$@" || exit $?

[ "$isSubmoduleUpdate" ] || exit 0
readarray -t rebasedSubmodules < <(git subst)
[ ${#rebasedSubmodules[@]} -gt 0 ] || exit 0

if [ ${#rebasedSubmodules[@]} -eq 1 ]; then
    mergedSubmodulesArticle=This
    mergedSubmodulesAuxiliaryVerb=has
    mergedSubmodulesPlural=
else
    mergedSubmodulesArticle=These
    mergedSubmodulesAuxiliaryVerb=have
    mergedSubmodulesPlural=s
fi
printf '%s submodule%s %s been rebased; checking out the resulting version%s now: %s\n' "$mergedSubmodulesArticle" "$mergedSubmodulesPlural" "$mergedSubmodulesAuxiliaryVerb" "$mergedSubmodulesPlural" "$(joinBy --last-separator ' and ' ', ' "${rebasedSubmodules[@]}")"
git subwipe
