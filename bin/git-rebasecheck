#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Check whether the commits that will be rebased contain merges or reference other
commits from that range via commit hashes in their commit messages. The history
rewriting runs the risk of destroying the merges / invalidating those
references.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--check-only] [REBASE-ARGS ...] [<upstream> [<branch>]] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '--check-range <revision-range> [...]'
}

isCheckOnly=
isAutosquash=
isInteractive=
severitySigil='Note'
unset isRebaseMerges
typeset -a range=()
typeset -a rebaseArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--check-range)	shift; range=("$@"); set --;&
	--check-only)	shift; isCheckOnly=t; severitySigil='ERROR';;
	--autosquash)	shift; isAutosquash=t;;
	--interactive|-i)
			shift; isInteractive=t;;
	--no-rebase-merges)
			shift; isRebaseMerges=;;
	--rebase-merges?(=*)|-r)
			shift; isRebaseMerges=t;;
	--)		break;;
	*)		rebaseArgs+=("$1"); shift;;
    esac
done

[ "$isCheckOnly" ] || [ "$isAutosquash" ] || [ "$isInteractive" ] || exit 0

if [ ${#range[@]} -gt 0 ]; then
    :
elif [ ${#rebaseArgs[@]} -ge 2 ] && git rev-parse --verify --quiet "${rebaseArgs[-1]}" >/dev/null 2>&1 && git rev-parse --verify --quiet "${rebaseArgs[-2]}" >/dev/null 2>&1; then
    # <upstream> <branch>
    range=("${rebaseArgs[-2]}..${rebaseArgs[-1]}")
elif [ ${#rebaseArgs[@]} -ge 1 ] && git rev-parse --verify --quiet "${rebaseArgs[-1]}" >/dev/null 2>&1; then
    # <upstream>
    range=("${rebaseArgs[-1]}..HEAD")
else
    exit 0
fi

typeset -A allProblematicCommits=()
typeset -a hints=()

mergeCheck()
{
    [ "$isRebaseMerges" ] && return 0	# Merges will be handled, no need to complain about them.

    typeset -A mergeCommits=()
    local commit; while IFS=$'\n' read -r commit
    do
	allProblematicCommits["$commit"]=t
	mergeCommits["$commit"]=t
    done < <(git-hasmerge --print "${range[@]}")

    if [ ${#mergeCommits[@]} -gt 0 ]; then
	mergeCommitsPlural=s; [ ${#mergeCommits[@]} -eq 1 ] && mergeCommitsPlural=
	printf >&2 '%s: %d merge commit%s would be destroyed by a rebase:\n' "$severitySigil" ${#mergeCommits[@]} "$mergeCommitsPlural"
	[ -n "${isRebaseMerges+t}" ] \
	    && hints+=('inverting --no-rebase-merges to -r|--rebase-merges[=(rebase-cousins|no-rebase-cousins)]') \
	    || hints+=('adding -r|--rebase-merges[=(rebase-cousins|no-rebase-cousins)]')
	hints+=("stopping short of the merge${mergeCommitsPlural}")
    fi
}

referenceCheck()
{
    typeset -A referencedCommits=()
    local hashesExpr='' hash='' message='' line
    while IFS=$'\n' read -r line
    do
	if [[ "$line" =~ ^[[:xdigit:]]+$ ]]; then
	    if [ -n "$message" ]; then
		referencedCommits["$hash"]="$message "
		hashesExpr+="${hashesExpr:+|}${hash}"
		message=''
	    fi
	    hash="${line:1}"
	elif [ -n "$line" ]; then
	    message+=" $line"
	fi
    done < <(git log --pretty=$'tformat:%h\n%B' "${range[@]}"; printf '00000000\n')

    typeset -A referencingCommits=()
    for hash in "${!referencedCommits[@]}"
    do
	if [[ "${referencedCommits["$hash"]}" =~ [^[:alnum:]](${hashesExpr})[[:xdigit:]]*[^[:alnum:]] ]]; then
	    allProblematicCommits["$hash"]=t
	    referencingCommits["$hash"]=t
	fi
    done

    if [ ${#referencingCommits[@]} -gt 0 ]; then
	referencedCommitsPlural=s; [ ${#referencedCommits[@]} -eq 1 ] && referencedCommitsPlural=
	if [ ${#referencingCommits[@]} -eq 1 ]; then
	    allReferencingCommitsPlural=
	    allReferencingCommitsVerbEnding=s
	else
	    allReferencingCommitsPlural=s
	    allReferencingCommitsVerbEnding=
	fi
	printf >&2 '%s: The following commit%s reference%s the commit%s that will be rebased:\n' "$severitySigil" "$allReferencingCommitsPlural" "$allReferencingCommitsVerbEnding" "$referencedCommitsPlural"
	hints+=('rewording those commits to update or remove the references')
    fi
}

mergeCheck
referenceCheck
[ ${#allProblematicCommits[@]} -gt 0 ] || exit 0

git-lghighlightedcommits "${!allProblematicCommits[@]}" "${range[@]}"

printf -v combinedHints '%s, ' "${hints[@]}"
if [ "$isCheckOnly" ]; then
    exit 1
elif [ "$isInteractive" ]; then
    printf >&2 'Consider %sor cancel the rebase by aborting the editor.\n' "$combinedHints"
    sleep 2 # Give the user a chance to read the message before the editor is invoked.
else
    userBinaryChoice --keep-prompt --question "Really continue with the squashing rebase without ${combinedHints%, }?" --yes-no
fi
