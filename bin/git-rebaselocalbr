#!/bin/bash
shopt -qs extglob

: ${GIT_REBASELOCALBR_BRANCHES_END=;}
: ${GIT_REBASELOCALBR_SOURCE_COMMAND:=git-localbr}

printUsage()
{
    cat <<HELPTEXT
Rebase all / the last committed N local branches (except for the current branch
and master (and base branch if defined)) to the updated passed (or configured in
branch.<name>.remote and branch.<name>.merge) head.
After that, you can push all branches via to the default (or passed, if you did
not pass a remote to this command) remote via git push -f --all.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" "[--continue|--skip|--abort] [--upstream <remote>/<branch>] [--push|--push-to <remote>] [--include-current] [--include-master] [--include-base] [--include-all] [--branches BRANCH [...] ${GIT_REBASELOCALBR_BRANCHES_END}] [-n N|--count N] [-i|--interactive] [-y|--yes] [options] [-?|-h|--help]"
}

branchNum=
upstreamBranch=
isPush=
pushRemote=
typeset -a sourceBranches=()
rebaseAction=
typeset -a gitLocalbrArgs=()
typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--include-*)	gitLocalbrArgs+=("$1"); shift;;
	--branches)	shift
			while [ $# -gt 0 -a "$1" != "$GIT_REBASELOCALBR_BRANCHES_END" ]
			do
			    sourceBranches+=("$1")
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --branches must be concluded with '${GIT_REBASELOCALBR_BRANCHES_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			;;
	--upstream)	shift; upstreamBranch="$1"; shift;;
	--push)		shift; isPush=t;;
	--push-to)	shift; isPush=t; pushRemote="$1"; shift;;
	--continue|--skip|--abort)
			rebaseAction="$1"; shift; break;;
	--count|-n)	shift; branchNum="$1"; shift;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	*)		break;;
    esac
done

typeset gitRebaseMergesArg=(--rebase-merges)
versionCompare "$(git --version 2>/dev/null)" -lt 2.18 2>/dev/null && gitRebaseMergesArg=(--preserve-merges)

gitDir="$(git rev-parse --git-dir 2>/dev/null)" || exit $?
origBranchStore="${gitDir}/rebaselocalorigbr"
branchStore="${gitDir}/rebaselocalbr" || exit $?
getNextBranch()
{
    [ -f "$branchStore" ] || return
    head -n 1 "$branchStore"
    sed -i '1d' "$branchStore"
    [ -s "$branchStore" ] || rm "$branchStore"
}

if [ ! "$rebaseAction" ]; then
    if [ ${#sourceBranches[@]} -gt 0 ] && [ ! "$GIT_REBASELOCALBR_SOURCE_SORTED" ]; then
	localBranches=("${sourceBranches[@]}")
    else
	readarray -t localBranches < <(eval "$GIT_REBASELOCALBR_SOURCE_COMMAND" '"${gitLocalbrArgs[@]}" "${sourceBranches[@]}"')
    fi
    if [ ${#localBranches[@]} -eq 0 ]; then
	echo >&2 'No local branches found!'
	exit 1
    fi
    [ -n "$branchNum" ]  && [ $branchNum -lt ${#localBranches[@]} ] \
	&& localBranches=("${localBranches[@]:(-$branchNum)}")

    typeset -a branches=()
    for candidateBranch in "${localBranches[@]}"
    do
	if [ ! "$upstreamBranch" ] || [ "$(git rev-list "${candidateBranch}..${upstreamBranch}")" ]; then
	    branches+=("$candidateBranch")
	else
	    printf 'Branch %s is up to date.\n' "$candidateBranch"
	fi
    done
    if [ ${#branches[@]} -eq 0 ]; then
	echo >&2 'All local branches are up to date!'
	exit 1
    fi

    echo "Rebasing${upstreamBranch:+ to ${upstreamBranch}}:
${branches[*]}
"
    commandSeparator=
    for branch in "${branches[@]}"
    do
	printf '%sgit rebase -p ' "$commandSeparator"
	commandSeparator=' && '
	[ "$upstreamBranch" ] && printf '%q ' "$upstreamBranch"
	[ $# -eq 0 ] || printf '%q ' "$@"
	printf '%q' "$branch"
    done
    printf '\n'

    userBinaryChoice --keep-prompt --console --question "Really rebase ${isPush:+and then push }these branches${pushRemote:+ to $pushRemote}?" --yes-no || exit 4

    printf '%s\n' "${branches[@]}" > "$branchStore" || exit $?
    git-orig-ref > "$origBranchStore"
else
    git-wrapper rebase "$rebaseAction" || exit $?
fi

[ "$upstreamBranch" ] && set -- "$upstreamBranch" "$@"
status=0
while :
do
    branch="$(getNextBranch)"
    if [ ! "$branch" ]; then
	echo >&2 'All local branches have been rebased.'

	if [ -f "$origBranchStore" ]; then
	    git checkout "$(<"$origBranchStore")"
	    rm --force -- "$origBranchStore" 2>/dev/null
	fi

	exit $status
    fi

    git-wrapper rebase "${gitRebaseMergesArg[@]}" "$@" "$branch" || exit $?
    [ "$(git ls-files --unmerged)" ] && exit 1

    if [ "$isPush" ]; then
	if [ -n "$pushRemote" ]; then
	    targetRemote="$pushRemote"
	    target="${targetRemote}/$branch"
	    typeset -a targetBranchArg=("$branch")
	else
	    target="$(git-tracks 2>/dev/null)"
	    targetRemote="${target%%/*}"
	    typeset -a targetBranchArg=()
	fi

	if git-existsbr -- "$target"; then
	    printf -v quotedBranch %q "$branch"
	    git-remote-mutate "$targetRemote" --message 'Push rebased branch' --argument "$branch" --context-command "git rev-range-outgoing $targetRemote --color=always --one-more-command greyonelinelog --one-more-only-to-terminal lg --branch $quotedBranch" "${gitRemoteMutateArgs[@]}" \
		push --force "$targetRemote" "${targetBranchArg[@]}" || status=$?   # Need to use --force because rebasing changed history.
	fi
    fi
done
