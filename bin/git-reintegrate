#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${GIT_REINTEGRATE_COMMAND_JOINER=&&}
: ${GIT_REINTEGRATE_EXEC_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--[no-]push] [--no-delete] [--rebase-single|--rebase|--ff|--ff-only|--no-ff|<merge-args> ...] [--ff-target-to-tracked] [--no-submodule-update] [--ignore-dirty-submodules] [-y|--yes] -b|--branch <branch> [...] | [--] <branch> [...] [-?|-h|--help]'
    echo
    printf 'Usage: GIT_REINTEGRATE_CHECK_COMMAND=CMD|GIT_CHECK_COMMAND=CMD %q %s\n' "$(basename "$1")" '[...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] --no-checks | -c|--command \"CHECK-COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] $GIT_REINTEGRATE_EXEC_END [--exec ...]"
    printf 'Usage: echo CHECK-COMMANDLINES | %q %s\n' "$(basename "$1")" "[...] [--bare|$(runWithPrompt --get-short-usage 2>/dev/null)] -"
    printf 'Usage: %q %s - <<EOF\n  CHECK-COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Merge / rebase <branch> to the current branch, run CHECK-COMMAND(s), and if all
succeed (for -c|--commands|--exec, for stdin: only with --worst-status, else if
the last succeeds) then delete it from the local repository as well as a tracked
remote (if it exists there).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --push		Push the current branch (to a writable upstream, tracked
			remote, origin) before deleting the reintegrated
			branch(es). GitHub needs this to detect that the branch
			has been merged.
    --no-push		Don't push the current branch even when invoked as a hub
			command (but still check pull requests etc.)
    --no-delete		Don't delete the reintegrated branch(es) from local
			repository and tracked remote.
    --rebase-single	Rebase only if it's a single non-merge commit, else
			merge.
    --ff-target-to-tracked
			Automatically fast-forward the current branch to its
			tracked remote branch if it's behind; this skips the
			query that normally happens.
    --no-submodule-update
			Don't automatically check out resulting submodule
			versions.
    --ignore-dirty-submodules
			Don't complain if submodules are dirty. (This happens
			when reintegrateto --no-submodule-checkout is used.)
    --no-checks		Don't run any default \$GIT_REINTEGRATE_CHECK_COMMAND /
			\$GIT_CHECK_COMMAND.
    --yes		Don't query for confirmation of remote mutations.
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT
The answers to some questions can be preconfigured via these boolean config
settings; when not configured (true or false), the user will be prompted every
time:
- reintegrate.fastforward-single    fast-forward a single commit
- reintegrate.fastforward	    fast-forward multiple commits
- reintegrate.rebase-single	    rebase a single commit instead of creating a
				    merge commit
HELPTEXT
}

typeset -a allArgs=("$@")
isContinue=
isKeepBranches=
unset isPush
hasMergeResolutionArg=
isRebase=
isRebaseSingle=
isFastForwardToTracked=
typeset -a branches=()
typeset -a fastForwardArgs=()
typeset -a mergeArgs=()
typeset -a mergeMessageArgs=()
typeset -a mergeNoEditMessageArgs=()
mergeMessageTemplate=
typeset -a rebaseArgs=()
isBare=
isDisableChecks=
isCheckFromStdin=
typeset -a checkCommandArgs=()
checkCommands=
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
typeset -a continueArgs=()
typeset -a gitRemoteMutateArgs=()
typeset -a gitDirtyArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--continue)	shift; isContinue=t;;
	--no-delete)	continueArgs+=("$1"); shift; isKeepBranches=t;;
	--push)		continueArgs+=("$1"); shift; isPush=t;;
	--no-push)	continueArgs+=("$1"); shift; isPush=;;
	--branch|-b)	shift; branches+=("$1"); shift;;
	--rebase)	continueArgs+=("$1"); shift; hasMergeResolutionArg=t; isRebase=t;;
	--rebase-single)
			shift; hasMergeResolutionArg=t; isRebaseSingle=t;;
	--ff|--no-ff|--ff-only)
			hasMergeResolutionArg=t; fastForwardArgs=("$1"); shift;;
	--ff-target-to-tracked)
			shift; isFastForwardToTracked=t;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--no-checks)	checkCommandArgs+=("$1"); shift; isDisableChecks=t;;
	--command|-c)	checkCommandArgs+=("$1" "$2"); shift; checkCommands+="${checkCommands:+ $GIT_REINTEGRATE_COMMAND_JOINER }$1"; shift;;
	--exec)		checkCommandArgs+=("$1"); shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$GIT_REINTEGRATE_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    checkCommandArgs+=("$1"); shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${GIT_REINTEGRATE_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			checkCommandArgs+=("$1"); shift
			checkCommands+="${checkCommands:+ $GIT_REINTEGRATE_COMMAND_JOINER }${cmd}"
			;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;

	--message|-m|--file|-F)
			mergeMessageArgs+=("$1" "$2"); shift; shift;;
	--no-edit)	mergeNoEditMessageArgs+=("$1"); shift;;
	--merge-message-template)
			shift; mergeMessageTemplate="${1?}"; shift;;
	-[sX])		mergeArgs+=("$1" "$2"); shift; shift;;
	--@(strategy|strategy-option|gpg-sign)=*)	mergeArgs+=("$1"); shift;;
	--@(strategy|strategy-option|gpg-sign))		mergeArgs+=("$1" "$2"); shift; shift;;
	--no-submodule-update)				mergeArgs+=("$1"); rebaseArgs+=("$1"); shift;;
	--ignore-dirty-submodules)			shift; gitDirtyArgs+=(--ignore-submodules=all);;

	--)		shift; break;;
	--*)		mergeArgs+=("$1"); shift;;
	-)		shift; isCheckFromStdin=t; break;;
	-*)		mergeArgs+=("$1"); shift;;
	*)		break;;
    esac
done
if [ "${!#}" = '-' ]; then
    isCheckFromStdin=t
    set -- "${@:1:$(($#-1))}"
fi
if [ "$isCheckFromStdin" ] && [ -n "$checkCommands" ]; then
    echo 'ERROR: Cannot combine CHECK-COMMANDLINE from stdin (-) with -c|--command|--exec.'
    echo
    printUsage "$0"
    exit 2
fi >&2
if [ "$isDisableChecks" ]; then
    echo 'Checks are disabled.'
    checkCommands=''
else
    if [ "$isCheckFromStdin" ]; then
	:
    elif [ -n "$GIT_REINTEGRATE_CHECK_COMMAND" -a -z "$checkCommands" ]; then
	checkCommands="$GIT_REINTEGRATE_CHECK_COMMAND"
	checkCommandArgs+=(--command "$GIT_REINTEGRATE_CHECK_COMMAND")
    elif [ -n "$GIT_CHECK_COMMAND" -a -z "$checkCommands" ]; then
	checkCommands="$GIT_CHECK_COMMAND"
	checkCommandArgs+=(--command "$GIT_CHECK_COMMAND")
    else
	echo 'No checks to run.'
    fi
fi
if [ -z "${isPush+t}" -a -n "$HUB" ]; then
    # Need to push to remote first so that GitHub recognizes that the branch has
    # been merged. If the branch is first deleted, GitHub marks a corresponding
    # pull request as "closed".
    isPush=t
fi

branches+=("$@")
if [ ${#branches[@]} -eq 0 ]; then
    echo 'Need (at least one) <branch> to merge!'
    exit 2
elif ! git-existsbr --verbose "${branches[@]}"; then
    exit 1
elif git-dirty --print-error "${gitDirtyArgs[@]}"; then
    exit 1
fi >&2

branchesPlural=es
branchesSubject=them
branchesSubjectAuxiliaryVerb='branches have'
verbPlural=
if [ ${#branches[@]} -eq 1 ]; then
    branchesPlural=
    branchesSubject=it
    branchesSubjectAuxiliaryVerb='the branch has'
    verbPlural=s
fi


typeset -a contextShortener=(headtail --separator-cutline)
confirmFastForward()
{
    local question="Your $targetBranch branch is not up-to-date with ${targetTrackedRemote}, but can be fast-forwarded."
    typeset -a additionalChoices=()
    if ! git-inout --is-ahead "${branches[-1]}" "$targetTracks" >/dev/null \
	&& similarCommitNum=$(git-similarcommits --count "HEAD..${branches[-1]}" "HEAD..${targetTracks}") \
	&& [ $similarCommitNum -gt 0 ]
    then
	local commitNum=$(git-count "HEAD..${branches[-1]}")
	local commitNumPlural=s; [ $commitNum -eq 1 ] && commitNumPlural=
	local branchNum=${#branches[@]}; [ $branchNum -eq 1 ] && branchNum=
	question="Your $targetBranch branch is not up-to-date with ${targetTrackedRemote}, but $((100 * similarCommitNum / commitNum))% of the $commitNum commit$commitNumPlural on the ${branchNum}${branchNum:+ }branch$branchesPlural look similar to what you have on ${targetTrackedRemote}. If you're redoing a previously merged (and pushed) branch, please decline."
	additionalChoices=("Show [D]ifference between ${targetTrackedRemote} and $targetBranch branch")
    fi

    local choice; choice="$(userchoiceFromList --question "$question Fast-forward now?" --no-cancel --ignore-case -- '[Y]es' '[N]o' 'Show [C]ontext' "${additionalChoices[@]}" '[S]hell')" || exit $?
    case "$choice" in
	Yes) ;;
	No) return 4;;
	Show\ Context)
	    echo "Context${contextShortener[*]:+ (abbreviated)}:"
	    eval "git-inout --color=always --one-more --base $targetTracks" "${contextShortener:+|}" '"${contextShortener[@]}"'
	    typeset -a contextShortener=()
	    confirmFastForward "$@"
	    ;;
	Show\ Difference\ between\ *)
	    echo 'Difference:'
	    git-inout --color=always --one-more --base "$targetTracks" "${branches[-1]}"
	    confirmFastForward "$@"
	    ;;
	Shell)
	    echo "Pending: Fast-forward of $targetBranch branch to ${targetTrackedRemote}, unless you do a non-successful exit."
	    "${SHELL:-bash}" -i || return $?
	    ;;
	*)  printf >&2 'ASSERT: Unhandled choice: %s\n' "$choice"; exit 3;;
    esac
}
isAheadOfTracked()
{
    local ahead
    ahead=$(git-inout --is-ahead --base "$targetTracks") || return 1
    aheadPlural=s; [ $ahead -eq 1 ] && aheadPlural=
    printf 'Note: Your %s branch is %d commit%s ahead of %s.\n' "$targetBranch" $ahead "$aheadPlural" "$targetTrackedRemote"
}

confirmMerge()
{
    local aheadBehind="$(GIT_INOUT_INDICATOR_PREFIX='is ' GIT_INOUT_INDICATOR_SUFFIX=' vs.' git ab --indicator-only --base "$targetTracks")"
    local choice; choice="$(userchoiceFromList --keep-prompt --question "Your $targetBranch branch ${aheadBehind:-has diverged from} ${targetTrackedRemote}; do you want to stop here and merge that first?" --no-cancel --ignore-case -- '[Y]es' '[N]o' 'Show [C]ontext' '[S]hell')" || exit $?
    case "$choice" in
	Yes) ;;
	No) return 4;;
	Show\ Context)
	    echo "Context${contextShortener[*]:+ (abbreviated)}:"
	    eval "git-inout --color=always --one-more --base $targetTracks" "${contextShortener:+|}" '"${contextShortener[@]}"'
	    typeset -a contextShortener=()
	    confirmMerge "$@"
	    ;;
	Shell)
	    echo "Pending: Merge of $targetTrackedRemote into the $targetBranch branch, unless you do a non-successful exit."
	    "${SHELL:-bash}" -i || return $?
	    ;;
	*)  printf >&2 'ASSERT: Unhandled choice: %s\n' "$choice"; exit 3;;
    esac
}
canRebase()
{
    for branch in "${branches[@]}"
    do
	if git-count -gt 1 --max-count 2 --no-merges "..$branch"; then
	    # At least one branch has more than one non-merge commit.
	    return 1
	fi
    done
    return 0
}
printContinueCommand()
{
    local quotedConfigVariables='';  [ -n "$GIT_REINTEGRATE_PRE_PUSH_COMMAND" ] && printf -v quotedConfigVariables 'GIT_REINTEGRATE_PRE_PUSH_COMMAND=%q' "$GIT_REINTEGRATE_PRE_PUSH_COMMAND"
    local gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
    local -r scriptName="$(basename -- "${BASH_SOURCE[0]}")"
    [ "$isCheckFromStdin" ] && printf >&2 'echo CHECK-COMMANDLINES | '
    printf >&2 '$ %s%s%s %q' "${1}${1:+ && }" "${quotedConfigVariables}${quotedConfigVariables:+ }" "$gitCommand" "${scriptName#git-}"
    printf >&2 ' %q' '--continue' ${isBare:+--bare} "${runWithPromptArgs[@]}" "${continueArgs[@]}" "${gitRemoteMutateArgs[@]}" "${checkCommandArgs[@]}"
    printf >&2 -- ' --branch %q'  "${branches[@]}"
    [ "$isCheckFromStdin" ] && printf >&2 ' -'
    printf >&2 '\n'
}

choiceEvaluate()
{
    local configKey="${1:?}"; shift
    local choice="${1:?}"; shift
    local messagePrefix="${1:?}"; shift
    local positiveMessage="${1:?}"; shift
    local negativeMessage="${1:?}"; shift
    case "$choice" in
	true)	printf '%s %s (based on the %s config).\n' "$messagePrefix" "$positiveMessage" "$configKey"; return 0;;
	false)	printf '%s %s (based on the %s config).\n' "$messagePrefix" "$negativeMessage" "$configKey"; return 1;;
	*)	printf >&2 'ASSERT: Invalid choice: %s\n' "$choice"; exit 3;;
    esac
}

targetBranch="$(git-brname --real-branch-only)" || exit $?
targetTracks="$(git-tracks 2>/dev/null)"
targetTrackedRemote="${targetTracks%%/*}"

gitSubmoduleUpdateCommand=; git hassubmodules && gitSubmoduleUpdateCommand='git subwipe'
branchMergeMessage=

if [ "$isContinue" ]; then
    joinBy --prefix 'Finalizing reintegration of ' --suffix $':\n' --last-separator ' and ' ', ' "${branches[@]}" 2>/dev/null
else
    joinBy --prefix 'Reintegrating ' --suffix $':\n' --last-separator ' and ' ', ' "${branches[@]}" 2>/dev/null

    # Ensure that the branch(es) are good for merging.
    git-mergecheck "${branches[@]}" || exit $?

    if [ ! "$isRebase" ] && [ ${#mergeMessageArgs[@]} -eq 0 ]; then
	if [ -n "$HUB" ] && {
	    # Try to obtain corresponding pull requests based on the passed branches'
	    # HEAD commits and seed the merge message with it / them (as the PR title
	    # already summarizes the changeset and makes for a great merge title). This
	    # saves the user from opening the PR and copy-and-pasting it.
	    typeset -a prefixCommands=()
	    type -t timeout >/dev/null && prefixCommands=(timeout 10 "${prefixCommands[@]}")
	    type -t invocationMessage >/dev/null && prefixCommands=(invocationMessage --message 'Searching for PR...' --success FOUND --fail NONE -- "${prefixCommands[@]}")
	    pullRequestTitles="$("${prefixCommands[@]}" hub-prtitle --as-merge-message "${branches[@]}")"
	    [ -n "$pullRequestTitles" ]
	}; then
	    branchMergeMessage="$pullRequestTitles"
	else
	    branchMergeMessage="${mergeMessageTemplate}${mergeMessageTemplate:+$'\n\n'}$(git-mergeBranchMessage "$targetBranch" "${branches[@]}")" || exit 3
	fi
    fi

    if [ -n "$targetTracks" ] && ! git-equals HEAD "$targetTracks"; then
	if git-ffdryrun "$targetTracks"; then
	    if [ "$isFastForwardToTracked" ] || confirmFastForward; then
		git-wrapper merge --ff-only "${mergeArgs[@]}" -- "$targetTracks" || {
		    status=$?
		    echo >&2 'Fast-forwarding unexpectedly failed.'
		    exit $status
		}
	    fi
	elif isAheadOfTracked; then
	    :
	elif confirmMerge; then
	    exit 0
	else
	    printf "Okay, I'll reintegrate into %s locally and you'll then have to merge with %s after that.\\n" "$targetBranch" "$targetTracks"
	fi
    fi

    if [ ${#branches[@]} -eq 1 ] && git-equals "${branches[0]}" HEAD; then
	printf >&2 'Branch %s is already even with %s\n' "${branches[0]}" "$targetBranch"

	# Don't run the checks.
	checkCommands=''
	isCheckFromStdin=
    else
	if [ ! "$hasMergeResolutionArg" ]; then
	    if git-ffdryrun "${branches[@]}"; then
		commitNum=$(git-count "HEAD..${branches[-1]}")
		commitNumPlural=s; [ $commitNum -eq 1 ] && commitNumPlural=
		branchNum=${#branches[@]}; [ $branchNum -eq 1 ] && branchNum=

		fastForwardInsteadOfMergeConfigKey='reintegrate.fastforward'; [ $commitNum -eq 1 ] && fastForwardInsteadOfMergeConfigKey='reintegrate.fastforward-single'
		if choice="$(git config --type bool --get "$fastForwardInsteadOfMergeConfigKey")"; then
		    choiceEvaluate "$fastForwardInsteadOfMergeConfigKey" "$choice" "The $commitNum commit$commitNumPlural on the ${branchNum}${branchNum:+ }branch$branchesPlural will be" "fast-forwarded instead of merged" "merged, not fast-forwarded"
		else
		    userBinaryChoice --keep-prompt --console --question "The $commitNum commit$commitNumPlural on the ${branchNum}${branchNum:+ }branch$branchesPlural can be fast-forwarded instead of merged. Fast-forward?" --yes-no
		fi && fastForwardArgs=(--ff-only)
	    elif canRebase; then
		typeset -a hubAdditionalOption=(); hubNote=
		if [ "$HUB" ] && [ -n "$pullRequestTitles" ]; then
		    readarray -t pullRequestUrls < <("${prefixCommands[@]}" hub-prtitle --url "${branches[@]}")
		    hubAdditionalOption=('[P]ull')
		    hubNote="Note: GitHub cannot detect the rebase and will say that the PR has been closed. If you need proper indication, either merge or directly rebase in GitHub itself ($(joinBy ' ' "${pullRequestUrls[@]}")) now and choose ${hubAdditionalOption[*]} then."
		    if [ "$isCheckFromStdin" ] || [  -n "$checkCommands" ]; then
			hubNote+=" (But be aware that the CHECK-COMMAND(s) will only be executed after the rebase then, so either an additional commit or $targetTrackedRemote history rewrite would be necessary to fix any problems.)"
		    fi
		fi
		if choice="$(git config --type bool --get reintegrate.rebase-single)"; then
		    choiceEvaluate reintegrate.rebase-single "The single commit on the ${branchNum}${branchNum:+ }branch$branchesPlural will be" "rebased instead of merged" "merged, not rebased"
		else
		    choice="$(userchoiceFromList --keep-prompt --question "The branch$branchesPlural only consist$verbPlural of a single commit. Rebase $branchesSubject instead of creating a separate merge commit?${hubNote:+$'\n'}${hubNote}" --no-cancel --ignore-case -- '[Y]es' '[N]o' "${hubAdditionalOption[@]}" '[Q]uit')" || exit $?
		fi
		case "$choice" in
		    true|Yes)
			isRebase=t;;
		    Pull)
			prePullCommit="$(git rev-parse HEAD)"
			git-wrapper pull "$targetTrackedRemote" || {
			    status=$?
			    echo >&2 'Looks like the pull failed. You can try again via'
			    printContinueCommand
			    exit $status
			}
			if git-equals "$prePullCommit" HEAD; then
			    echo >&2 'Nothing got pulled. You can try again via'
			    printContinueCommand
			    exit 99
			fi
			isContinue=t	# Don't do any merge or rebase here.
			isPush=	# Skip pushing; we've just pulled.
			;;
		    Quit)
			if [ -n "$hubNote" ]; then
			    echo "After rebasing in GitHub, you can delete the branch$branchesPlural via:"
			    printf 'git oldelete -f'
			    printf ' %q' "${branches[@]}"
			    printf '\n'
			fi >&2
			exit 1
			;;
		esac
	    fi
	elif [ "$isRebaseSingle" ]; then
	    if canRebase; then
		isRebase=t
		continueArgs+=(--rebase)
	    fi
	fi


	if [ "$isContinue" ]; then
	    :
	elif [ "$isRebase" ]; then
	    origRef="$(git-orig-ref)" || exit $?

	    for branch in "${branches[@]}"
	    do
		git-wrapper rebase "${rebaseArgs[@]}" HEAD "$branch" && git checkout "$origRef" || {
		    status=$?
		    if [ "$branch" = "${branches[-1]}" ]; then
			echo >&2 "After this branch has been successfully rebased (see above), you can merge $branchesSubject and ${isCheckFromStdin:+run checks and }${checkCommands:+run checks and }${isPush:+push and }${isKeepBranches:+not }delete $branchesSubject via"
			printf >&2 'git checkout %q && ' "$origRef"
			printf >&2 'git-merge --ff-only '
			printf >&2 '%q ' "${mergeArgs[@]}" -- "$branch"
			printf >&2 '&& '
			printContinueCommand
		    else
			typeset -a missingBranches=("${branches[@]}")
			while [ "${missingBranches[0]}" != "$branch" ]
			do
			    missingBranches=("${missingBranches[@]:1}")
			done
			missingBranches=("${missingBranches[@]:1}")

			echo >&2 "After this branch has been successfully rebased (see above), you can continue rebasing, merge $branchesSubject and ${isCheckFromStdin:+run checks and }${checkCommands:+run checks and }${isPush:+push and }${isKeepBranches:+not }delete $branchesSubject via"
			printf >&2 'git checkout %q && ' "$origRef"
			printf >&2 'git-merge --ff-only '
			printf >&2 '%q ' "${mergeArgs[@]}" -- "$branch"
			printf >&2 '&& %q --rebase --no-delete ' "$(basename "$0")"
			printf >&2 -- '--branch %q ' "${missingBranches[@]}"
			printf >&2 '&& '
			printContinueCommand
		    fi
		    exit $status
		}
		git-wrapper merge --ff-only "${mergeArgs[@]}" -- "$branch" || exit $?
	    done
	else
	    if [ ${#mergeMessageArgs[@]} -eq 0 -a -n "$branchMergeMessage" ]; then
		mergeMessageArgs=(--message "$branchMergeMessage")
		[ ${#mergeNoEditMessageArgs[@]} -gt 0 ] || mergeMessageArgs+=(--edit)
	    fi

	    git-wrapper merge "${fastForwardArgs[@]:---no-ff}" "${mergeMessageArgs[@]}" "${mergeNoEditMessageArgs[@]}" "${mergeArgs[@]}" -- "${branches[@]}" || {
		status=$?
		echo >&2 "After $branchesSubjectAuxiliaryVerb been merged (see above), you can continue (${isCheckFromStdin:+run checks and }${checkCommands:+run checks and }${isPush:+push and }${isKeepBranches:+not }delete ${branchesSubject}) via"
		printContinueCommand "$gitSubmoduleUpdateCommand"
		exit $status
	    }
	fi
    fi
fi  # End of actual merge; continue finalization from here.


if [ "$isCheckFromStdin" ]; then
    if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	bash "${bashArgs[@]}" -
    else
	${runWithCommand:?} "${runWithPromptArgs[@]}"
    fi
elif [ -n "$checkCommands" ]; then
    (eval "$checkCommands")
fi || {
    status=$?
    echo >&2 "Checks failed; $branchesSubjectAuxiliaryVerb been reintegrated, but not ${isPush:+pushed or }${isKeepBranches:+not }deleted yet."
    echo >&2 'Correct the problem by amending or adding commits, then invoke'
    printContinueCommand
    exit $status
}

status=0
if [ "$isPush" ]; then
    if [ -n "$GIT_REINTEGRATE_PRE_PUSH_COMMAND" ]; then
	eval "$GIT_REINTEGRATE_PRE_PUSH_COMMAND" || {
	    status=$?
	    echo >&2 "Push preparation failed; $branchesSubjectAuxiliaryVerb been reintegrated, but not pushed or ${isKeepBranches:+not }deleted yet."
	    echo >&2 'Correct the problem, then invoke'
	    isCheckFromStdin=; checkCommandArgs=(--no-checks)  # No need to re-run checks.
	    printContinueCommand
	    exit $status
	}
    fi

    printf '\nPushing merged branch%s:\n' "$branchesPlural"
    hub-push-this-branch "${gitRemoteMutateArgs[@]}" || status=$?
fi
case $status in
    0)	;;
    99) # Still continue with the branch deletion when there's no upstream
	# configured.
	;;
    *)	# Any real push errors abort; don't continue with branch deletion.
	printf >&2 'Push of the merged branch%s failed.\n' "$branchesPlural"
	if [ ${#branches[@]} -eq 1 ] \
	    && contains --ff-only "${allArgs[@]}" \
	    && contains --no-checks "${allArgs[@]}"
	then
	    echo >&2 'This looks like a fast-forward integration. If updates were rejected because the remote contains work that you do not have locally, you can update and reattempt the fast-forward integration via'
	    gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
	    printf >&2 '$ git fetch %q && %s reffintegrate' "$targetTrackedRemote" "$gitCommand"
	    printf >&2 ' %q' --branch "${branches[0]}" "${gitRemoteMutateArgs[@]}"
	    printf >&2 '\n%s\n' "Note: Don't forget to pass any CHECK-COMMANDLINE arguments."
	fi
	exit $status;;
esac

[ ! "$isKeepBranches" ] || exit $status

printf '\nDeleting merged branch%s:\n' "$branchesPlural"
hub-delete-merged-branches "${gitRemoteMutateArgs[@]}" -- "${branches[@]}" || status=$?

printf '\n✓ Branch%s completely reintegrated.\n' "$branchesPlural"
exit $status
