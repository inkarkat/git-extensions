#!/bin/bash

: ${GIT_REMOTEMUTATE_REMOTES=upstream}
typeset -A confirmRemotes=()
read -r -d '' -a remotes <<< "$GIT_REMOTEMUTATE_REMOTES"
for remote in "${remotes[@]}"
do
    confirmRemotes["$remote"]=t
done

printUsage()
{
    local IFS=/
    cat <<HELPTEXT
Wrapper for SIMPLECOMMAND that mutates (push, delete branch) REMOTE; queries for
confirmation if REMOTE is ${!confirmRemotes[*]} (unless --yes is given).
HELPTEXT
    echo
    printf 'Usage: [GIT_REMOTEMUTATE_REMOTES="origin ..."] %q %s\n' "$(basename "$1")" 'REMOTE [--message MESSAGE] [--argument ARG|--arguments ARG1 [...] ;] [--context-command COMMANDLINE] [-y|--yes] [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
remote="${1:?}"; shift

message=
isYes=
typeset -a arguments=()
typeset -a contextCommands=()
typeset -a contextShortener=(headtail --separator-cutline)
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--message|-m)	shift; message="${1:?}"; shift;;
	--argument)	shift; arguments+=("$1"); shift;;
	--arguments)	shift
			while [ $# -gt 0 -a "$1" != ';' ]
			do
			    arguments+=("$1"); shift
			done
			if [ $# -eq 0 ]; then
			    echo 'ERROR: --arguments command must be concluded with ;!'; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			;;
	--context-command)
			shift; contextCommands+=(${contextCommand:+;} "$1"); shift;;
	--yes|-y)	shift; isYes=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

isUpToDate()
{
    if [ "$1" = push -a "$2" = "$remote" ] && {
	    [ $# -eq 2 ] \
		&& [ "$(git-trackedremote)" = "$remote" ] \
		&& trackedBranch="$(git-tracks)"
	} || {
	    [ $# -eq 3 ] \
		&& trackedBranch="${remote}/$(git-brname --real-branch-only 2>/dev/null)"
	} \
	    && git-equals HEAD "$trackedBranch"
    then
	printf >&2 'Note: %s is already up-to-date.\n' "$trackedBranch"
	return 0
    else
	return 1
    fi

}

confirmMutation()
{
    concatenatedArguments="$(joinBy --empty "with $*" --last-separator ' and ' ', ' "${arguments[@]}")"
    choice="$(userchoiceFromList --keep-prompt --question "${remote:?}: ${message:-Mutate}${concatenatedArguments:+ }${concatenatedArguments}" --no-cancel --ignore-case -- '[Y]es' '[N]o' ${contextCommands[*]:+'Show [C]ontext'} '[S]hell')" || exit $?
    case "$choice" in
	Yes) ;;
	No) return 4;;
	Show\ Context)
	    echo "Context${contextShortener[*]:+ (abbreviated)} for: ${remote:?}: ${message:-Mutate}${concatenatedArguments:+ }${concatenatedArguments}"
	    eval "${contextCommands[@]}" "${contextShortener:+|}" '"${contextShortener[@]}"'
	    contextShortener=()
	    confirmMutation "$@"
	    ;;
	Shell)
	    echo "Pending: ${remote:?}: ${message:-Mutate}${concatenatedArguments:+ }${concatenatedArguments}, unless you do a non-successful exit."
	    "${SHELL:-bash}" -i || return $?
	    ;;
	*)  printf >&2 'ASSERT: Unhandled choice: %s\n' "$choice"; exit 3;;
    esac
}

if [ ! "$isYes" ] && [ "${confirmRemotes["$remote"]}" ]; then
    isUpToDate "$@" && exit 0
    confirmMutation "$@" || exit $?
fi

exec git-wrapper "$@"
