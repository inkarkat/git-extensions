#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [--detached-effective-branch] [--] [<branch> [...]] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print corresponding ${remote:-REMOTE}/BRANCH for the current / passed branch(es) (or return error).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --detached-effective-branch
			If there's a (not necessarily the only) local branch
			for the detached commit, print that one instead of the
			hash.
HELPTEXT
}

case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
esac
remote=${1:?}; shift

isDetachedEffectiveBranch=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--detached-effective-branch)
			shift; isDetachedEffectiveBranch=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    if [ "$isDetachedEffectiveBranch" ] && git-isdetached; then
	# On a detached checkout, use a branch that coincides with the detached
	# commit (assuming that there's only one).
	branch="$(git-brname --real-branch-only --detached-effective-branch --raw)" || exit $?
    else
	branch="$(git-brname --real-branch-only)" || exit $?
    fi

    set -- "$branch"
fi

status=0
for branch
do
    trackedBranch=$(git-tracks "$branch" 2>/dev/null)
    if [ "${trackedBranch%%/*}" = "$remote" ]; then
	remoteCandidate=$trackedBranch
    else
	remoteCandidate="${remote}/$branch"
    fi

    if git-existsbr -- "$remoteCandidate"; then
	printf '%s\n' "$remoteCandidate"
    else
	if git-existsremote "$remote"; then
	    printf >&2 '%s does not have a branch for %s.\n' "$remote" "$branch"
	else
	    printf >&2 '%s does not exist as a remote.\n' "$remote"
	fi
	status=1
    fi
done
exit $status
