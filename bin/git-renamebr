#!/bin/bash

: ${GIT_RENAMEBR_PREFIX_PATTERN=}	# Optional POSIX-style extended regular expression anchored to the beginning of the branch name whose match is kept at the beginning.
: ${GIT_RENAMEBR_SUFFIX_PATTERN=}	# Optional POSIX-style extended regular expression anchored to the end of the branch name whose match is kept at the end.

printUsage()
{
    cat <<HELPTEXT
Rename the current branch / <oldbranch> to <newbranch>.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[--] [<oldbranch>] <newbranch>|(OLD=NEW|^=PREFIX|+=SUFFIX [...]) [-?|-h|--help]"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
    --)			shift;;
esac
if git-existsbr -- "$1"; then
    oldBranch="$1"; shift
else
    oldBranch="$(git-brname --real-branch-only)" || exit $?
fi
if [ $# -eq 0 ]; then
    echo >&2 'Need <newbranch> target!'
    exit 2
fi

newBranch="$(replaceWith \
	${GIT_RENAMEBR_PREFIX_PATTERN:+--keep-prefix-pattern "$GIT_RENAMEBR_PREFIX_PATTERN"} \
	${GIT_RENAMEBR_SUFFIX_PATTERN:+--keep-suffix-pattern "$GIT_RENAMEBR_SUFFIX_PATTERN"} \
	-- "$oldBranch" "$@" 2>/dev/null \
    || printf %s "$1"
)"
[ "$oldBranch" != "$newBranch" ] || exit 4

exec git branch -m "${oldBranch:?}" "${newBranch:?}"
