#!/bin/bash

readonly prefixPattern="${GIT_RENAMEBR_PREFIX_PATTERN-$GIT_BRANCH_PREFIX_PATTERN}"  # Optional POSIX-style extended regular expression anchored to the beginning of the branch name whose match is kept at the beginning.
readonly suffixPattern="${GIT_RENAMEBR_SUFFIX_PATTERN-$GIT_BRANCH_SUFFIX_PATTERN}"  # Optional POSIX-style extended regular expression anchored to the end of the branch name whose match is kept at the end.

printUsage()
{
    cat <<HELPTEXT
Rename the current branch / <oldbranch> to <newbranch>.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[--] [<oldbranch>] <newbranch>|(OLD=NEW|^=PREFIX|+=SUFFIX [...]) [-?|-h|--help]"
    echo
    cat <<HELPTEXT
Just print the resulting new branch name.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "-p|--print ..."
}

action=renameBranch
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--print|-p)	shift; action=printBranch;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if git-existsbr -- "$1"; then
    oldBranch="$1"; shift
else
    oldBranch="$(git-brname --real-branch-only)" || exit $?
fi
if [ $# -eq 0 ]; then
    echo >&2 'Need <newbranch> target!'
    exit 2
fi

renameBranch()
{
    local newBranch="${1:?}"; shift
    exec git branch -m "${oldBranch:?}" "$newBranch"
}

printBranch()
{
    local newBranch="${1:?}"; shift
    printf '%s\n' "$newBranch"
}

newBranch="$(replaceWith --pattern-is-optional \
	${prefixPattern:+--keep-prefix-pattern "$prefixPattern"} \
	${suffixPattern:+--keep-suffix-pattern "$suffixPattern"} \
	-- "$oldBranch" "$@" 2>/dev/null \
    || printf %s "$1"
)"
[ "$oldBranch" != "$newBranch" ] || exit 4

$action "$newBranch"
