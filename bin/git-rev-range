#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Print / execute GIT-COMMAND with a revision range starting from the passed
REVISION (with --no-range, only the starting revision will be used); possibly
including one previous commit, ending at HEAD or the passed END-REVISION
- appended
- replacing RANGE argument(s) anywhere
- replacing RANGE in the following GIT-COMMAND and -(N-1) arguments
- replacing RANGE in the following +(N) arguments and appending those

A different GIT-COMMAND2 can be used for the --one-more revision via
--one-more-command.
With a ^, ^1, ^2 argument to --one-more-command, the modifier instead is
appended to the revision, and there's only one invocation of GIT-COMMAND, unlike
with --one-more, where there are two. Some clients (like rbi) really need a
single previous revision. On the other hand, --one-more just shows a single
additional command, whereas --one-more-command ^ may include a whole set of
merge commits.
--one-more-with-padding introduces an empty line between GIT-COMMAND and the
one-more-output invocation / GIT-COMMAND2. This helps keeping the separator (vs.
terminator) semantics of e.g. "git log". This also deals with the possible
reversal (git log --reverse), where the one-more command comes first, and is
therefore better than passing in a customized command that adds the padding
itself.
--one-more-only-to-terminal invokes one-more only when output is to a terminal.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-r|--revision REVISION [-e|--end-revision END-REVISION [--last-only]|--no-range|--with-range RANGE] [--reverse] [+1|--one-more|--one-more-output|--one-more-command GIT-COMMAND2|^[1|2] [--one-more-with-padding] [--one-more-only-to-terminal] ... [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... RANGE ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [...]'
}

typeset -a colorArg=()
isShowOneMore=
isShowOneMoreOutput=
showOneMoreCommand=
isOneMorePadding=
isOneMoreOnlyToTerminal=
isLastOnly=
unset revision
revisionModifier=
endRevision=
range=..
isReverse=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--revision|-r)	shift; revision="${1?}"; shift;;
	--end-revision|-e)	shift; endRevision="$1"; shift;;
	--one-more|+1)	shift; isShowOneMore=t;;
	--one-more-output)
			shift; isShowOneMoreOutput=t;;
	--one-more-command)
			shift
			if [ "${1:0:1}" = '^' ]; then
			    revisionModifier="$1"
			else
			    isShowOneMoreOutput=t; showOneMoreCommand="$1"
			fi
			shift
			;;
	--one-more-with-padding)
			shift; isOneMorePadding=t;;
	--one-more-only-to-terminal)
			shift; isOneMoreOnlyToTerminal=t;;
	--no-range)	shift; range=''; [ "$isLastOnly" ] && { printUsage "$0" >&2; exit 2; };;
	--with-range)	shift; range="$1"; shift; [ "$isLastOnly" ] && { printUsage "$0" >&2; exit 2; };;
	--last-only)	shift; isLastOnly=t; [ "$range" = .. ] || { printUsage "$0" >&2; exit 2; };;
	--reverse)	shift; isReverse=t;;
	--)		shift; break;;
	*)		break;;
    esac
done
if [ -z "${revision+t}" ]; then
    echo "ERROR: Missing REVISION!"
    echo
    printUsage "$0"
    exit 2
elif [ -z "$range" ] && [ -n "$endRevision" ]; then
    echo "ERROR: --end-revision cannot be combined with --no-range!"
    echo
    printUsage "$0"
    exit 2
fi >&2

contains()
{
    needle=$1
    shift
    for elem
    do
	[ "$needle" = "$elem" ] && return 0
    done
    return 1
}
getIndex()
{
    local i=1 elem needle=$1; shift
    for elem
    do
	if [ "$needle" = "$elem" ]; then
	    echo "$i"
	    return 0
	fi
	let i+=1
    done
    return 1
}
getIndexOfLastOptionArg()
{
    [ $# -eq 0 ] && return 1

    # Trust the "args -- files" separator.
    getIndex '--' "$@" && return 0

    lastArg=${!#}
    [ -e "$lastArg" ] || return 1   # No file arguments.

    for ((i=$# - 1; i > 0; i--))
    do
	lastArg=${@:$i:1}
	[ -e "$lastArg" ] || break
    done

    echo $((i + 1))
    return 0
}
wrapper()
{
    git-wrapper "$@"
}

oneMore()
{
    if [ -n "$showOneMoreCommand" ]; then
	shift
	eval "set -- $showOneMoreCommand \"\$@\""
    fi
    wrapper "$@"
}

checkRange="${range:-..}"; [[ "$checkRange" =~ ^\.+$ ]] || checkRange='..'	# Custom ranges won't work with rev-list.
if [ -z "$(git rev-list "${revision}${revision:+${checkRange:-..}}${endRevision:-HEAD}" -- 2>/dev/null)" ] && [ -n "$range" ]; then
    # Resulting range is empty (but we want a range); abort. Especially with
    # --one-more, we otherwise would use a single commit, and that could be
    # really confusing.
    exit 4
fi

if [ -z "$revision" ]; then
    # No start revision means from the very first commit. Since we cannot go "one more" beyond it, completely drop the range.
    revisionModifier=''
    if [ -z "$range" ]; then
	# No range means use the very first commit.
	revision="$(git-firstcommit)" || exit 3
    else
	# Can't use a completely empty revision range; need to have at least an end revision.
	: ${endRevision:=HEAD}
    fi
    range=''
    isShowOneMore=
    isShowOneMoreOutput=
    showOneMoreCommand=
    isOneMorePadding=
    isOneMoreOnlyToTerminal=
elif [ "$isLastOnly" ]; then
    revisionModifier=''
    range=''
    isShowOneMore=
    isShowOneMoreOutput=
    showOneMoreCommand=
    isOneMorePadding=
    isOneMoreOnlyToTerminal=
fi

# Note: Only reversing after the checks.
if [ "$isReverse" ]; then
    tmp="$revision"
    revision="$endRevision"
    endRevision="$tmp"
fi
[ "$isLastOnly" ] && revision=''

if [ $# -eq 0 ]; then
    printf '%s%s%s\n' "$revision" "${revisionModifier}${isShowOneMore:+^}" "${range}${endRevision}"
    exit 0
fi

typeset -a countedArgs=()
isCountedAppend=
case "$1" in
    +[1-9])
	isCountedAppend=t;&
    -[1-9])
	typeset countedArgNum=${1#[+-]}
	typeset countedArgNum=${1#-}
	countedArgs=("${@:2:${countedArgNum}}")
	set -- "${@:$((2 + countedArgNum))}"

	executor()
	{
	    local wrapper="${1:?}"; shift
	    typeset -a appendedArgs=()
	    for arg in "${countedArgs[@]}"
	    do
		if [ "$arg" = 'RANGE' ]; then
		    appendedArgs+=("${rangeArgs[@]}")
		else
		    appendedArgs+=("$arg")
		fi
	    done

	    [ "$isCountedAppend" ] \
		&& $wrapper "$@" "${appendedArgs[@]}" \
		|| $wrapper "${appendedArgs[@]}" "$@"
	}
	;;
    --keep-position)
	shift

	executor()
	{
	    local wrapper="${1:?}"; shift
	    typeset -a appendedArgs=()
	    for arg
	    do
		if [ "$arg" = 'RANGE' ]; then
		    appendedArgs+=("${rangeArgs[@]}")
		else
		    appendedArgs+=("$arg")
		fi
	    done

	    $wrapper "${appendedArgs[@]}"
	}
	;;
    *)
	executor()
	{
	    local wrapper="${1:?}"; shift
	    $wrapper "$@" "${rangeArgs[@]}"
	}
	;;
esac

potentialPadding()
{
    [ ! "$isOneMorePadding" ] || echo
}
revRangeWithOneMore()
{
    local mergeBase; [ -n "$revision" -a -n "$endRevision" ] && mergeBase="$(git merge-base "$revision" "$endRevision")"

    if contains '--reverse' "${countedArgs[@]}" "$@"; then
	# The (log) output is in reverse order, so the "one more" also needs to
	# come first instead of last.
	typeset -a rangeArgs=(--max-count 1 "${colorArg[@]}" "${mergeBase:-$revision}")
	executor oneMore "$@" \
	    && potentialPadding \
	    && { rangeArgs=("${colorArg[@]}" "${revision}${revisionModifier}"$range"${endRevision:-${range:+HEAD}}"); executor wrapper "$@"; }
    else
	typeset -a rangeArgs=("${colorArg[@]}" "${revision}${revisionModifier}"$range"${endRevision:-${range:+HEAD}}")
	executor wrapper "$@" \
	    && potentialPadding \
	    && { rangeArgs=(--max-count 1 "${colorArg[@]}" "${mergeBase:-$revision}"); executor oneMore "$@"; }
    fi
}
if [ "$isShowOneMoreOutput" ] && [ ! "$isOneMoreOnlyToTerminal" -o -t 1 ]; then
    # Because of the piping into the pager, we need to explicitly enable color.
    # Don't do this if the user explicitly turned it off, though.
    isNeedColorArgumentWhenPiping "${colorArg[@]}" && colorArg=(--color=always)

    typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
    eval 'revRangeWithOneMore "$@"' "${pager:+|}" '"${pager[@]}"'
else
    typeset -a rangeArgs=("${colorArg[@]}" "${revision}${revisionModifier}${isShowOneMore:+^}"$range"${endRevision:-${range:+HEAD}}")
    executor wrapper "$@"
fi
