#!/bin/bash

printUsage()
{
    git-rev-range --help 2>&1 | sed \
	-e '1s#^.*$#Print / execute GIT-COMMAND with the revision range that comprises the current / passed BRANCH until the commit that started the branch#' \
	-e '2,/^- /{ /^- /p; d; }' \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*git-rev-range /\1\2'"$(basename "$1")"' /; s/ -r|--revision REVISION \[-e|--end-revision END-REVISION / [--base BASE] [-b|--branch BRANCH /; s/ GIT-COMMAND \[\.\.\.\]/& [-b|--branch BRANCH]/; }'
}

# -b|--branch can also be passed after GIT-COMMAND; need to parse that
# separately.
startRev=
typeset -a args=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--branch|-b)	shift; startRev="$1"; shift;;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

typeset -a gitFirstCommitArgs=()
typeset -a revRangeArgs=()
isWithRange=t
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--start-rev)	shift; startRev="$1"; shift;;
	--base)		gitFirstCommitArgs+=("$1" "$2"); shift; shift;;
	--no-range)	revRangeArgs+=("$1"); shift; isWithRange=;;
	--keep-position|[+-][0-9])
			revRangeArgs+=("$1"); shift; break;;
	*)		revRangeArgs+=("$1"); shift;;
    esac
done

if ! firstCommit="$(git-brfirstcommit "${gitFirstCommitArgs[@]}" "${startRev:-HEAD}")"; then
    exit 2
fi

[ "$isWithRange" ] || startRev=''   # Prevent "ERROR: --end-revision cannot be combined with --no-range!"; we don't need the end revision, as --no-range drops that, anyway.

exec git-rev-range --revision "$firstCommit" ${startRev:+--end-revision} $startRev "${revRangeArgs[@]}" "$@"
