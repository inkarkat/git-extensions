#!/bin/bash

printUsage()
{
    git-rev-range --help 2>&1 | sed \
	-e '1s#^.*$#Print / execute GIT-COMMAND with the revision range to the previous [N] merge commit#' \
	-e '2,/^- /{ /^- /p; d; }' \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*git-rev-range /\1\2'"$(basename "$1")"' /; s/ -r|--revision REVISION \[-e|--end-revision END-REVISION|/ [-n|--merge-number N] [-b|--branch BRANCH] [/; s/ GIT-COMMAND \[\.\.\.\]/& [-b|--branch BRANCH]/; }'
}

# -b|--branch can also be passed after GIT-COMMAND; need to parse that
# separately.
startRev=
typeset -a args=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--branch|-b)	shift; startRev="$1"; shift;;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

let mergeNumber=1
typeset -a revRangeArgs=()
isWithRange=t
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)			shift; printUsage "$0"; exit 0;;
	--merge-number|-n)		shift; mergeNumber="$1"; shift;;
	--start-rev)			shift; startRev="$1"; shift;;
	--no-range)			revRangeArgs+=("$1"); shift; isWithRange=;;
	--keep-position|[+-][0-9])	revRangeArgs+=("$1"); shift; break;;
	*)				revRangeArgs+=("$1"); shift;;
    esac
done

rev="$(git-commitid "${startRev:-HEAD}")" || exit 1
for ((previousCommitCnt = 1, mergeCnt = 0; mergeCnt < mergeNumber; previousCommitCnt++))
do
    mergeRev="${rev}~${previousCommitCnt}"
    git-ismerge "$mergeRev" 2>/dev/null
    case $? in
	0)	let mergeCnt+=1;;
	1)	continue;;
	*)	exit $?;;
    esac
done

[ "$isWithRange" ] || startRev=''   # Prevent "ERROR: --end-revision cannot be combined with --no-range!"; we don't need the end revision, as --no-range drops that, anyway.

exec git-rev-range --revision "$(git-commitid "$mergeRev")" ${startRev:+--end-revision} $startRev "${revRangeArgs[@]}" "$@"
