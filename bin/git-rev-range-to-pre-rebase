#!/bin/bash

printUsage()
{
    git-rev-range --help 2>&1 | sed \
	-e "1s#^.*\$#Print / execute GIT-COMMAND with the revision range to the [N]'th previous start of a rebase#" \
	-e '2,/^- /{ /^- /p; d; }' \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*git-rev-range /\1\2'"$(basename "$1")"' /; s/ -r|--revision REVISION \[-e|--end-revision END-REVISION|/ [-n|--rebase-number N] [-b|--branch BRANCH] [/; s/ GIT-COMMAND \[\.\.\.\]/& [-b|--branch BRANCH]/; }'
}

# -b|--branch can also be passed after GIT-COMMAND; need to parse that
# separately.
startRev=
typeset -a args=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--branch|-b)	shift; startRev="$1"; shift;;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

let rebaseNumber=1
typeset -a revRangeArgs=()
isWithRange=t
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)			shift; printUsage "$0"; exit 0;;
	--rebase-number|-n)		shift; rebaseNumber="$1"; shift;;
	--start-rev)			shift; startRev="$1"; shift;;
	--no-range)			revRangeArgs+=("$1"); shift; isWithRange=;;
	--keep-position|[+-][0-9])	revRangeArgs+=("$1"); shift; break;;
	*)				revRangeArgs+=("$1"); shift;;
    esac
done

let rebaseCnt=0
preRebaseRev=
while IFS=$'\t' read -r rev subject
do
    if [[ "$subject" =~ ^'rebase (start):' ]]; then
	let rebaseCnt+=1
	continue    # The original commit is the reflog entry before the rebase start.
    elif [ $rebaseCnt -eq $rebaseNumber ]; then
	preRebaseRev="$rev"
	break
    fi
done < <(git reflog show --pretty=tformat:'%H	%gs' "${startRev:-HEAD}")

if [ -z "$preRebaseRev" ]; then
    if [ $rebaseCnt -eq 0 ]; then
	echo >&2 'ERROR: No rebase found in reflog.'
    else
	rebaseCntPlural=s; [ $rebaseCnt -eq 1 ] && rebaseCntPlural=
	printf >&2 'ERROR: Only %d rebase%s found in reflog.\n' $rebaseCnt "$rebaseCntPlural"
    fi
    exit 1
fi

[ "$isWithRange" ] || startRev=''   # Prevent "ERROR: --end-revision cannot be combined with --no-range!"; we don't need the end revision, as --no-range drops that, anyway.

exec git-rev-range --revision "$preRebaseRev" ${startRev:+--end-revision} $startRev "${revRangeArgs[@]}" "$@"
