#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Obtain the last checked-in revision of FILE(s) (just before it got deleted or
renamed) from the log and restore it as an untracked file / just print its
contents with -p|--print.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n|--dry-run|-p|--print] [--no-renames|-M<n>|--find-renames[=<n>]] [--] [./]FILESPEC|FILENAME [...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[...] [<log-options>] [<revision-range>] [[--] <path> ...] -- [./]FILESPEC|FILENAME [...] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Obtain the last checked-in revision of files that got deleted or renamed within
<revision-range> and restore them as an untracked files.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '--all [...] <log-options>|<revision-range> [...] [[--] <path> ...] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
RELATED COMMANDS:
- git-logdeletions shows deletions in the log.
HELPTEXT
}

typeset -a otherArgs=()
typeset -a renameArgs=(--no-renames)	# Don't check for renames by default so that renames are listed as deletion (+ addition), and therefore renamed files will be revived by default.
action=revive
isAll=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;

	--dry-run|-n)	shift; action=dryRun;;
	--print|-p)	shift; action=print;;
	--all)		shift; isAll=t; typeset -A revivedFilespecs=();;
	--no-renames)	shift; renameArgs=(--find-renames);;	# The toggling works the other way around here: By finding renames, those files aren't listed as deleted, and therefore evade our filter.
	--find-renames|--find-renames=*|-M?*)
			renameArgs+=("$1"); shift;;
	--)		break;;
	*)		otherArgs+=("$1"); shift;;
    esac
done
set -- "${otherArgs[@]}" "$@"
typeset -A filenames=() filespecs=()
[ "$isAll" ] || while [ $# -gt 0 ]
do
    lastArg="${!#}"
    set -- "${@:1:$(($#-1))}"
    [ "$lastArg" = '--' ] && break

    case "$lastArg" in
	./+([^/]))  filenames["${lastArg#./}"]=t;;
	*/*)	    filespecs["$lastArg"]=t;;
	*)	    filenames["$lastArg"]=t;;
    esac
done
if [ "$isAll" ]; then
    if [ $# -eq 0 ]; then
	echo 'ERROR: Need <revision-range> or a <log-option> that limits the range when --all is given.'
	echo
	printUsage "$0"
	exit 2
    fi
elif [ ${#filenames[@]} -eq 0 -a ${#filespecs[@]} -eq 0 ]; then
    printUsage "$0"
    exit 2
fi >&2

dryRun()
{
    local deletionCommit="${1:?}"; shift
    local commit="${deletionCommit}^"
    local filespec="${1:?}"; shift

    printf 'Would revive %s from %s.\n' "$filespec" "$(git rev-parse --short "$commit")"
}

print()
{
    local deletionCommit="${1:?}"; shift
    local commit="${deletionCommit}^"
    local filespec="${1:?}"; shift

    [ -t 1 ] && header ${isFirst:+--first} "$filespec (as of $(git rev-parse --short "$commit"))"
    git-cat "$commit" "$filespec"
}

revive()
{
    local deletionCommit="${1:?}"; shift
    local commit="${deletionCommit}^"
    local filespec="${1:?}"; shift

    git-cat "$commit" "$filespec" > "$filespec" && \
	printf 'Revived %s from %s.\n' "$filespec" "$(git rev-parse --short "$commit")"
}

isFirst=t
while IFS=$'\n' read -r line
do
    if [ -z "$line" ]; then
	continue
    elif [[ "$line" =~ ^/[[:xdigit:]]+$ ]]; then
	commit="${line#/}"
    elif [ "$isAll" ]; then
	filespec="$line"
	[ "${revivedFilespecs["$filespec"]}" ] || \
	    $action "$commit" "$filespec" && revivedFilespecs["$filespec"]=t
    else
	filespec="$line"
	filename="$(basename -- "$filespec")"
	if [ "${filespecs["$filespec"]}" ]; then
	    $action "$commit" "$filespec" && unset "filespecs[$filespec]" && isFirst=
	elif [ "${filenames["$filename"]}" ]; then
	    $action "$commit" "$filespec" && unset "filenames[$filename]" && isFirst=
	fi && [ ${#filenames[@]} -eq 0 ] && [ ${#filespecs[@]} -eq 0 ] && \
	    exit 0
    fi
done < <(git-logmodifications --deleted --pretty='format:/%H' --name-only "${renameArgs[@]}" "$@")
