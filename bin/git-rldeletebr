#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Delete <branch> from the local repository as well as ${remote:-REMOTE}.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [-f|--force] [-i|--ignore-missing-in-${remote}] [-y|--yes] [--] <branch> [...] [-?|-h|--help]"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
remote="${1:?}"; shift

branchDeleteOption=-d
isIgnoreMissingInRemote=
typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	-f|--force)	shift; branchDeleteOption=-D;;
	--ignore-missing-in-${remote}|-i)
			shift; isIgnoreMissingInRemote=t;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--)		shift; break;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    echo 'Need (at least one) <branch> to delete!'
    echo
    printUsage "$0"
    exit 2
fi >&2


# Need to determine remote branch names before deleting the local branches.
if [ "$isIgnoreMissingInRemote" ]; then
    readarray -t remoteBranches < <(git-remotebr "$remote" "$@" 2>/dev/null)
else
    readarray -t remoteBranches < <(git-remotebr "$remote" "$@")
fi

# Note: Process all passed branches in one fell swoop; this avoid re-querying
# (on push) the remote repository credentials for each branch. When one branch
# is invalid, an error is returned, but following (valid) branches are still
# processed: just as we'd like.
status=0

# If not all branches have remotes in $remote, this is a failure of this
# command; the branch(es) have already been printed to stderr by git-remotebr.
[ ! "$isIgnoreMissingInRemote" -a ${#remoteBranches[@]} -lt $# ] && status=1

# Remove remote branches first; else, we might get Git errors about unmerged
# changes:
# > warning: not deleting branch 'foo' that is not yet merged to
# >          'refs/remotes/$remote/foo', even though it is merged to HEAD.
# > error: The branch 'foo' is not fully merged.
# > If you are sure you want to delete it, run 'git branch -D foo'.
# We're not interested in the merge state with regards to $remote; that one will
# be deleted anyway, but we like the merge check with HEAD. Simply untracking
# $remote doesn't work, so (contrary to usual precedence), we have to start with
# remote branches first. That's not so bad: if it really turns out that we want
# to keep the branch (both locally and remote), we need to manually opublish it
# again.
if [ ${#remoteBranches[@]} -gt 0 ]; then
    git-remote-mutate "$remote" --message 'Delete branch(es)' --arguments "${remoteBranches[@]#${remote}/}" \; "${gitRemoteMutateArgs[@]}" \
	push "$remote" --delete "${remoteBranches[@]#${remote}/}" || status=$?
fi

git branch $branchDeleteOption "$@" || status=$?

exit $status
