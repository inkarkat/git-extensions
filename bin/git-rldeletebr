#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [-f|--force] [-i|--ignore-missing-in-${remote}] [-I|--ignore-missing-local] [-y|--yes] [--] <branch> [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Delete <branch> from the local repository as well as ${remote:-REMOTE}.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --force|-f		Allow deleting the branch irrespective of its merged
			status, or whether it even points to a valid commit.
    --ignore-missing-in-${remote}|-i
			No error if a branch does not exist in ${remote:-REMOTE}.
    --ignore-missing-local|-I
			No error if there's no local branch.
EXIT STATUS:
    0	Complete success.
    1	Failed to delete some branch(es).
    2	Bad invocation, wrong or missing command-line arguments.
    99	Missing branches are ignored and nothing got deleted.
HELPTEXT
}
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
remote="${1:?}"; shift

branchDeleteOption=-d
isIgnoreMissingInRemote=
isIgnoreMissingLocal=
typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	-f|--force)	shift; branchDeleteOption=-D;;
	--ignore-missing-in-${remote}|-i)
			shift; isIgnoreMissingInRemote=t;;
	--ignore-missing-local|-I)
			shift; isIgnoreMissingLocal=t;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--)		shift; break;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    echo 'Need (at least one) <branch> to delete!'
    echo
    printUsage "$0"
    exit 2
fi >&2


# Need to determine remote branch names before deleting the local branches.
if [ "$isIgnoreMissingInRemote" ]; then
    readarray -t remoteBranches < <(git-remotebr "$remote" -- "$@" 2>/dev/null)
else
    readarray -t remoteBranches < <(git-remotebr "$remote" -- "$@")
fi

# Note: Process all passed branches in one fell swoop; this avoid re-querying
# (on push) the remote repository credentials for each branch. When one branch
# is invalid, an error is returned, but following (valid) branches are still
# processed: just as we'd like.
remoteStatus=0

if [ "$isIgnoreMissingInRemote" ]; then
    # Status is 99 if all remote branches are missing (and the user chose to
    # ignore this).
    [ ${#remoteBranches[@]} -eq 0 ] && remoteStatus=99
elif [ ${#remoteBranches[@]} -lt $# ]; then
    # If not all branches have remotes in $remote, this is a failure of this
    # command; the branch(es) have already been printed to stderr by
    # git-remotebr.
    remoteStatus=1
fi

# Remove remote branches first; else, we might get Git errors about unmerged
# changes:
# > warning: not deleting branch 'foo' that is not yet merged to
# >          'refs/remotes/$remote/foo', even though it is merged to HEAD.
# > error: The branch 'foo' is not fully merged.
# > If you are sure you want to delete it, run 'git branch -D foo'.
# We're not interested in the merge state with regards to $remote; that one will
# be deleted anyway, but we like the merge check with HEAD. Simply untracking
# $remote doesn't work, so (contrary to usual precedence), we have to start with
# remote branches first. That's not so bad: if it really turns out that we want
# to keep the branch (both locally and remote), we need to manually opublish it
# again.
if [ ${#remoteBranches[@]} -gt 0 ]; then
    git-remote-mutate "$remote" --message 'Delete branch(es)' --arguments "${remoteBranches[@]#${remote}/}" \; "${gitRemoteMutateArgs[@]}" \
	push "$remote" --delete "${remoteBranches[@]#${remote}/}" || remoteStatus=$?
fi


# Remove local branches.
if [ "$isIgnoreMissingLocal" ]; then
    typeset -a existingBranches=()
    for branch
    do
	git-existsbr -- "$branch" && existingBranches+=("$branch")
    done
    [ ${#existingBranches[@]} -gt 0 ] \
	|| exit $(status99Reduction $remoteStatus 99)

    set -- "${existingBranches[@]}"
fi

git branch $branchDeleteOption -- "$@"; localStatus=$?
exit $(status99Reduction $remoteStatus $localStatus)
