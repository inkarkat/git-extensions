#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Rename the current branch / <oldbranch> to <newbranch> in both local repository
and ${remote:-REMOTE}.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "${remote:-REMOTE} [-y|--yes] [--] [<oldbranch>] <newbranch>|(OLD=NEW ^=PREFIX +=SUFFIX [...]) [-?|-h|--help]"
}

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
remote="${1:?}"; shift

typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    echo >&2 'Need <newbranch> target!'
    exit 2
fi
if git-existsbr "$1"; then
    oldBranch="$1"; shift
else
    oldBranch="$(git-brname --real-branch-only)" || exit $?
fi
newBranch="$(replaceWith -- "$oldBranch" "$@" 2>/dev/null || printf %s "$1")"

git branch -m "${oldBranch:?}" "${newBranch:?}" || exit $?
oldRemoteBranch="$oldBranch"
tracks="$(git-tracks "$newBranch" 2>/dev/null)"
if [ "${tracks%%/*}" = "$remote" ]; then
    # The local branch tracks a branch from $remote; we assume it is the one to
    # be renamed. (It may have a name different than the local one, e.g. if we
    # did a purely local rename before.) We have to delete it using its remote
    # name, and then untrack it, or else the push with the new name will somehow
    # recognize the tracking branch and keep pushing to the old name.
    git branch --unset-upstream "$newBranch"
    oldRemoteBranch="${tracks#*/}"
fi
exec git-remote-mutate "$remote" --message "Rename $oldRemoteBranch to $newBranch" "${gitRemoteMutateArgs[@]}" \
    push --set-upstream "$remote" "$newBranch" ":$oldRemoteBranch"
