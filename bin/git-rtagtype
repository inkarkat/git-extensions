#!/bin/bash
set -o pipefail

readonly EXCLUDED_TAGS_CONFIG_KEY='uptodate.excludedTags'

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "${remote:-REMOTE} all|annotated|lightweight [--with-ref] [[-l|--list] <pattern> [...]] [-e|--exclude <pattern> [-e ...]] [--version-tags-only|--no-version-tags] [--sort-by-age] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
List all / only those tags of the passed (annotated or lightweight) type in ${remote:-REMOTE}.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --with-ref		Include the commit hash.
    --exclude|-e <pattern>
			Only print tags not matching <pattern>.
    --version-tags-only	Only print tags that are considered versions; i.e. do
			not match the $EXCLUDED_TAGS_CONFIG_KEY config setting.
    --no-version-tags	Omit tags that are considered versions.
    --sort-by-age	Sort by tag date (ascending, oldest first) instead of
			the default version number sorting. Note: Corresponding
			commits must have been fetched already for this to work.
HELPTEXT
}
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
remote="${1:?}"; shift
case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
    all)		tagType=all;;
    annotated)		tagType=tag;;
    lightweight)	tagType=commit;;
    *)			printf >&2 'ERROR: Invalid tag type %s; must be either all, annotated, or lightweight.\n' "$1"; exit 2;;
esac; shift
isWithRef=
filter=
typeset -a patterns=()
typeset -a excludedPatterns=()
sortField='version:refname'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--with-ref)	shift; isWithRef=t;;
	--list|-l)	shift; filter='matcher'; patterns+=("$1"); shift;;

	--exclude|-e)	shift; excludedPatterns+=("${1:?}"); shift; filter='matcher';;
	--exclude=*)	excludedPatterns+=("${1#--exclude=}"); shift; filter='matcher';;
	-e*)		excludedPatterns+=("${1#-e}"); shift; filter='matcher';;
	--version-tags-only)
			shift
			readarray -t excludedPatterns -O ${#excludedPatterns[@]} < <(git config --get-all "$EXCLUDED_TAGS_CONFIG_KEY")
			filter='matcher'
			;;
	--no-version-tags)
			shift
			readarray -t patterns -O ${#patterns[@]} < <(git config --get-all "$EXCLUDED_TAGS_CONFIG_KEY")
			filter='matcher'
			;;

	--sort-by-age)	shift; sortField='creatordate';;
	*)		break;;
    esac
done
if [ $# -gt 0 ]; then
    filter='matcher'; patterns+=("$@"); set --
fi

matcher()
{
    local tagName pattern
    while IFS=$'\n' read -r tagName
    do
	for pattern in "${excludedPatterns[@]}"
	do
	    case "$tagName" in
		$pattern)   continue 2;;
	    esac
	done
	if [ ${#patterns[@]} -eq 0 ]; then
	    printf '%s\n' "$tagName"
	else
	    for pattern in "${patterns[@]}"
	    do
		case "$tagName" in
		    $pattern)   printf '%s\n' "$tagName"; continue;;
		esac
	    done
	fi
    done
}
tagtype()
{
    git ls-remote --tags --sort="$sortField" "$remote" \
	| awk -v "isWithRef=$isWithRef" -v tagType="$tagType" \
'
$2 ~ /^refs\/tags\// {
    tag = substr($2, 11)
    if (tag ~ /\^\{\}$/) {
	tag = substr(tag, 1, length(tag) - 3)
	# This is an annotated dereferenced tag; we should have already seen the tag itself.
	if (tagRefs[tag] == "") {
	    print "ERROR: Annotated dereferenced tag " $2 " without a corresponding tag."
	    exit 3
	}
	annotated[tag] = 1
    } else {
	tags[n++] = tag
	tagRefs[tag] = $1
    }
}
END {
    for (i = 0; i < n; i++) {
	if ((tagType == "commit" && tags[i] in annotated) \
	    || (tagType == "tag" && !(tags[i] in annotated)) \
	) continue

	if (isWithRef) {
	    printf "%s\t%s\n", tags[i], tagRefs[tags[i]]
	} else {
	    print tags[i]
	}
    }
}
'
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
if [ ! -t 1 ]; then
    pager=()
    formatter=()
fi
[ "$isWithRef" ] || formatter=()	# We only need formatting with multi-column output.

eval tagtype \
    "${filter:+|} $filter" \
    "${formatter:+|}" '"${formatter[@]}"' \
    "${pager:+|}" '"${pager[@]}"'
