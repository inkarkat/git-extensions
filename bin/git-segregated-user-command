#!/bin/bash
set -o noglob -o pipefail

: ${GIT_SEGREGATEDUSERCOMMAND_PREFIX_SEPARATOR:=:}
literalAuthorMarker='{}'   # Note: Internal use only, no need to be configurable.

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly libDir="${projectDir}/lib"
source "${libDir}/logArgParser.sh" || exit 3

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-pager] [--prefixed [--tabular]|--with-header [--no-git-color]] [--committer] [--log-args-for-range|--log-args-only-for-range] [--files-for-range|--files-for-command] [--except-last] ... [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... BASE ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute GIT-COMMAND for each user that authored commits separately with the user
filter
- appended
- replacing USERFILTER argument(s) anywhere
- replacing USERFILTER in the following GIT-COMMAND and -(N-1) arguments
- replacing USERFILTER in the following +(N) arguments and appending those
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --no-pager		Do not page the output (so contents will scroll out of
			view if there's too much output).
    --prefixed		Put the author name before each line produced by
			GIT-COMMAND, followed by a : (like grep -H|--with-filename).
    --tabular		Render (tab-separated) output as a table with aligned
			columns.
    --with-header	Print a header containing the author name before
			GIT-COMMAND output if GIT-COMMAND produces output.
    --no-git-color	Do not pass a --color=... to GIT-COMMAND.
    --committer		Use committers and pass --committer instead of --author
			to GIT-COMMAND.
    --log-args-for-range
			All GIT-COMMAND log arguments should also be used when
			determining the authors.
    --log-args-only-for-range
			All GIT-COMMAND log arguments should exclusively be used
			when determining the authors but not passed to
			GIT-COMMAND.
    FILE arguments by default are both used to determine the revision range and
    passed to GIT-COMMAND.
    --files-for-range	Only use FILE arguments to determine the revision range,
			do not pass them to GIT-COMMAND.
    --files-for-command Pass FILE arguments only to GIT-COMMAND, do not use them
			to determine the revision range.
    --except-last	The very last argument is special and should not be
			parsed as log-args or FILE(s).
HELPTEXT
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
typeset -a formatter=()
isGitColor=t
typeset -a colorArg=()
filter=author
subjectPlaceholder='%a'
contextCommand=
typeset -a specialLastArg=()
typeset otherArgs=()
typeset -a logArgsForRange=()
typeset -a logArgsForCommand=()
isLogArgsForRange=
isLogArgsForCommand=t
isFilesForRange=t
isFilesForCommand=t
unset files
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-pager)	shift; pager=();;
	--prefixed)	shift
			printf -v prefixSeparator %q "$GIT_SEGREGATEDUSERCOMMAND_PREFIX_SEPARATOR"
			contextCommand="prefix --skip-empty -- ${literalAuthorMarker}${prefixSeparator}"
			;;
	--tabular)	shift; formatter=(column -s $'\t' -t);;
	--with-header)	shift; contextCommand="withHeader \"\${colorArg[@]}\" --id 'git-segregated-user-command-$$' -- ${literalAuthorMarker}";;
	--no-git-color)	shift; isGitColor=;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	colorArg=("$1" "$2"); shift; shift;;
	--committer)	shift; filter=committer; subjectPlaceholder='%c';;
	--log-args-for-range)
			shift; isLogArgsForRange=t;;
	--log-args-only-for-range)
			shift; isLogArgsForRange=t; isLogArgsForCommand=;;
	--files-for-range)
			shift; isFilesForCommand=;;
	--files-for-command)
			shift; isFilesForRange=;;
	--except-last)
			shift
			if [ $# -gt 0 ]; then
			    specialLastArg=("${!#}")
			    set -- "${@:1:$(($#-1))}"
			fi
			;;
	--)		shift
			# Only capture files after the last -- (to support intermediate wrapping GIT-COMMAND(s)).
			if contains -- "$@"; then
			    otherArgs+=(--)
			else
			    typeset -a files=("$@")
			    set --
			    break
			fi
			;;
	*)		if { [ "$isLogArgsForRange" ] || [ ! "$isLogArgsForCommand" ]; } \
			    && { countLogArgs '' "$1"; argCount=$?; [ $argCount -gt 0 ]; }
			then
			    # Drop log arguments that influence the output for the range of authors
			    # determination; anything other than the author names would interfere with the
			    # iteration.
			    isLogArgInfluencingOutput=; [ "$isLogArgsForRange" ] && ! countLogArgsInfluencingOutput "$1" && isLogArgInfluencingOutput=t
			    while ((argCount-- > 0))
			    do
				[ "$isLogArgsForRange" ] && [ ! "$isLogArgInfluencingOutput" ] && logArgsForRange+=("$1")
				[ "$isLogArgsForCommand" ] && logArgsForCommand+=("$1")
				[ ! "$isLogArgsForCommand" ] || otherArgs+=("$1")
				shift
			    done
			else
			    otherArgs+=("$1")
			    shift
			fi
			;;
    esac
done
set -- "${otherArgs[@]}"
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    while [ $# -gt 0 ]
    do
	lastArg="${!#}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	set -- "${@:1:$(($#-1))}"
    done
fi

if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi

# Remove any --author= argument; these are only useful for limiting the source
# user list, but would wreak havoc on the iteration. Do this in a second
# iteration as --committer may be passed (by the user) after an --committer
# parameter.
typeset -a args=()
while [ $# -ne 0 ]
do
    case "$1" in
	--${filter})	shift; shift;;
	--${filter}=*)	shift;;
	--)		break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}"

isCountedAppend=
typeset -a countedArgs=()
case "$1" in
    +[1-9])
	isCountedAppend=t;&
    -[1-9])
	typeset countedArgNum=${1#[+-]}
	typeset countedArgNum=${1#-}
	countedArgs=("${@:2:${countedArgNum}}")
	set -- "${@:$((2 + countedArgNum))}"

	executor()
	{
	    typeset -a interpolatedCountedArgs=("${countedArgs[@]//USERFILTER/--$filter="${escapedAuthor:?}"}")

	    if [ "$isCountedAppend" ]; then
		git-wrapper "$@" "${interpolatedCountedArgs[@]}"
	    else
		git-wrapper "${interpolatedCountedArgs[@]}" "$@"
	    fi
	}
	;;
    --keep-position)
	shift
	countedArgs=("$@"); set --

	executor()
	{
	    git-wrapper "${countedArgs[@]//USERFILTER/--$filter="${escapedAuthor:?}"}" "$@"
	}
	;;
    *)	countedArgs=("$@"); set --
	executor()
	{
	    git-wrapper "${countedArgs[@]}" --$filter="${escapedAuthor:?}" "$@"
	}
	;;
esac

# With piping into withHeader / pager, we need to explicitly enable color for
# Git, unless this command's output itself is redirected. Also don't do this if
# the user explicitly turned off color.
gitColorArg=()
if [ -n "$pager" -o -n "$contextCommand" ] && isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    colorArg=(--color=always)	# Force for withHeader
    [ "$isGitColor" ] && gitColorArg=(--color=always)	# Force for Git
fi

readarray -t authors < <(
    git log --pretty="tformat:${subjectPlaceholder}N" "${logArgsForRange[@]}" ${isFilesForRange:+-- "${files[@]}"} \
	| sort --unique
)
[ ${#authors[@]} -gt 0 ] || exit 99

typeset -A escapedAuthors=()
for ((i = 0; i < ${#authors[@]}; i++))
do
    IFS=$'\n' read -r escapedValue || { printf >&2 'ASSERT: Missing value for element %d = %s\n' "$i" "${authors[$i]}"; exit 3; }
    escapedAuthors["${authors[$i]}"]="$escapedValue"
done < <(printf '%s\n' "${authors[@]}" | sed -e 's/[][\$*.^]/\\&/g')

iterateUsers()
{
    status=0
    for author in "${authors[@]}"
    do
	escapedAuthor="^${escapedAuthors["$author"]} <"
	eval 'executor "${logArgsForCommand[@]}" "$@" "${gitColorArg[@]}" ${isFilesForCommand:+${files:+--} "${files[@]}"} "${specialLastArg[@]}"' \
		"${contextCommand:+|}${contextCommand//"$literalAuthorMarker"/\"${author:?}\"}" \
	    || status=$?
    done
    return $status
}

eval 'iterateUsers "$@"' \
    "${formatter:+|}" '"${formatter[@]}"' \
    "${pager:+|}" '"${pager[@]}"'
