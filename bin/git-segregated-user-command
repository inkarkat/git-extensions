#!/bin/bash
set -o noglob -o pipefail

: ${GIT_SEGREGATEDUSERCOMMAND_PREFIX_SEPARATOR:=:}
authorMarker='{}'   # Note: Internal use only, no need to be configurable.

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly libDir="${projectDir}/lib"
source "${libDir}/logArgParser.sh" || exit 3

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-pager] [--prefixed|--with-header [--no-git-color]] [--committer] [--with-log-args|--with-log-args-except-last] ... [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... BASE ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute GIT-COMMAND for each user that authored commits separately with the user
filter
- appended
- replacing USERFILTER argument(s) anywhere
- replacing USERFILTER in the following GIT-COMMAND and -(N-1) arguments
- replacing USERFILTER in the following +(N) arguments and appending those
    --no-pager		Do not page the output (so contents will scroll out of
			view if there's too much output).
    --prefixed		Put the author name before each line produced by
			GIT-COMMAND, followed by a : (like grep -H|--with-filename).
    --with-header	Print a header containing the author name before
			GIT-COMMAND output if GIT-COMMAND produces output.
    --no-git-color	Do not pass a --color=... to GIT-COMMAND.
    --committer		Use committers and pass --committer instead of --author
			to GIT-COMMAND.
    --with-log-args	All GIT-COMMAND log arguments should also be used when
			determining the authors.
    --with-log-args-except-last
			All GIT-COMMAND log arguments expect the very last
			should also be used when determining the authors.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

HELPTEXT
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
isGitColor=t
typeset -a colorArg=()
filter=author
subjectPlaceholder='%a'
contextCommand=
withLogArgs=
typeset otherArgs=()
typeset -a logArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-pager)	shift; pager=();;
	--prefixed)	shift
			printf -v prefixSeparator %q "$GIT_SEGREGATEDUSERCOMMAND_PREFIX_SEPARATOR"
			contextCommand="prefix --skip-empty -- ${authorMarker}${prefixSeparator}"
			;;
	--with-header)	shift; contextCommand="withHeader \"\${colorArg[@]}\" --id 'git-segregated-user-command-$$' -- ${authorMarker}";;
	--no-git-color)	shift; isGitColor=;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	colorArg=("$1" "$2"); shift; shift;;
	--committer)	shift; filter=committer; subjectPlaceholder='%c';;
	--with-log-args)
			shift; withLogArgs=all;;
	--with-log-args-except-last)
			shift; withLogArgs=except-last;;
	--)		break;;
	*)		if { [ "$withLogArgs" = all ] || [ "$withLogArgs" = except-last -a $# -gt 1 ]; } \
			    && { countLogArgs '' "$1"; argCount=$?; [ $argCount -gt 0 ]; }
			then
			    while ((argCount-- > 0))
			    do
				logArgs+=("$1")
				otherArgs+=("$1")
				shift
			    done
			else
			    otherArgs+=("$1")
			    shift
			fi
			;;
    esac
done
set -- "${otherArgs[@]}" "$@"
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi

# Remove any --author= argument; these are only useful for limiting the source
# user list, but would wreak havoc on the iteration. Do this in a second
# iteration as --committer may be passed (by the user) after an --committer
# parameter.
typeset -a args=()
while [ $# -ne 0 ]
do
    case "$1" in
	--${filter})	shift; shift;;
	--${filter}=*)	shift;;
	--)		break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}"

isCountedAppend=
typeset -a countedArgs=()
case "$1" in
    +[1-9])
	isCountedAppend=t;&
    -[1-9])
	typeset countedArgNum=${1#[+-]}
	typeset countedArgNum=${1#-}
	countedArgs=("${@:2:${countedArgNum}}")
	set -- "${@:$((2 + countedArgNum))}"

	executor()
	{
	    countedArgs=("${countedArgs[@]//USERFILTER/--$filter="$author"}")

	    [ "$isCountedAppend" ] \
		&& exec git-wrapper "$@" "${countedArgs[@]}" \
		|| exec git-wrapper "${countedArgs[@]}" "$@"
	}
	;;
    --keep-position)
	shift
	countedArgs=("$@"); set --

	executor()
	{
	    exec git-wrapper "${countedArgs[@]//USERFILTER/--$filter="$author"}"
	}
	;;
    *)	countedArgs=("$@"); set --
	executor()
	{
	    exec git-wrapper "${countedArgs[@]}" --$filter="$author"
	}
	;;
esac

# With piping into withHeader / pager, we need to explicitly enable color for
# Git, unless this command's output itself is redirected. Also don't do this if
# the user explicitly turned off color.
gitColorArg=()
if [ -n "$pager" -o -n "$contextCommand" ] && isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    colorArg=(--color=always)	# Force for withHeader
    [ "$isGitColor" ] && gitColorArg=(--color=always)	# Force for Git
fi

readarray -t authors < <(git log --pretty="tformat:${subjectPlaceholder}N" "${logArgs[@]}" | sort --unique)
[ ${#authors[@]} -gt 0 ] || exit 99

iterateUsers()
{
    status=0
    for author in "${authors[@]}"
    do
	eval 'executor "${gitColorArg[@]}" "${gitCommandArgs[@]}" "$@"' "${contextCommand:+|}${contextCommand//"$authorMarker"/\"${author}\"}" || status=$?
    done
    return $status
}

eval 'iterateUsers "$@"' \
    "${pager:+|}" '"${pager[@]}"'
