#!/bin/bash
set -o pipefail
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Execute GIT-COMMAND for the commit interactively chosen / last commit from the
commits where log messages match the specified text or /regexp/.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--last-only] [--accept-single] [--single-only] [--range-is-last] [--pass-file-args] [--explicit-file-args] ... --since <date>|--max-count <number>|-n <number>|<range> [GIT-COMMAND-ARGS ...] [--] [FILE ...] text|/regexp/ [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--last-only] [--accept-single] [--single-only] [--range-is-last] [--pass-file-args] [--explicit-file-args] ... [--invert-grep] --grep=<pattern> [GIT-COMMAND-ARGS ...] [--] [FILE ...]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [GIT-COMMAND-ARGS ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... COMMITS ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [...]'
}

typeset -a loggArgs=()
typeset -a selectedCommitArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--grep)		loggArgs+=("$1" "$2"); shift; shift;;
	--grep=*)	loggArgs+=("$1"); shift;;
	--)		selectedCommitArgs+=("$1"); shift; break;;
	*)		selectedCommitArgs+=("$1"); shift;;
    esac
done
set -- "${selectedCommitArgs[@]}" "$@"
if [ ${#loggArgs[@]} -eq 0 ]; then
    # No --grep given; the last argument is the text or /regexp/.
    if [ $# -eq 0 ]; then
	printUsage "$0"
	exit 2
    fi

    # Need to transform the final argument into a --grep argument as in git-logg
    # itself because git-selectedcommit-command will still append any passed files.
    lastArg="${!#}"
    searchString=$(printf '%s' "$lastArg" | sed -ne 's/^\([^a-zA-Z0-9]\)\(.*\)\1$/\2/p')
    if [ "$searchString" ]; then
	loggArgs+=(--grep "$searchString")
    else
	loggArgs+=(--grep "$lastArg" --fixed-strings)
    fi
    set -- "${@:1:$(($#-1))}"
fi

printf -v quotedLoggCommand '%q ' ${GIT_SELECTEDGCOMMIT_COMMAND:-logg} "${loggArgs[@]}"
GIT_SELECTEDCOMMIT_NO_MANDATORY_RANGE=t \
    GIT_SELECTEDCOMMIT_COMMAND="$quotedLoggCommand" \
    exec git-selectedcommit-command "$@"
