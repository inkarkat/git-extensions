#!/bin/bash

: ${SHELL:=bash}
: ${GIT_SHELL_NOOP_EXIT:=99}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet] [--on-dirty|--on-wips [--wip-check +NAME] [...]] [--pre-command "COMMANDLINE" [...]] [--with-status] [--with-diff] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Launch an interactive shell (${SHELL}). That alone wouldn't be very
interesting, but is valuable in combination with git-wcdo and the selective
invocation based on the provided options.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
	--quiet|-q	Suppress any information printed from the dirty or WIP
			check.
	--on-dirty	Invoke only if the working copy has uncommitted changes.
	--on-wips	Invoke only if there's some sort of work in progress.
	--wip-check +NAME|-NAME
			Select / deselect the WIP check with NAME.
The following rely on the evaluation of \$INIT_COMMANDS in the shell's rc file:
	--pre-command "COMMANDLINE"
			Execute COMMANDLINE after entering the shell.
	--with-status	Show the Git status after entering the shell.
	--with-diff	Show the unstaged changes in working copy after entering
			the shell.
EXIT STATUS
    *   any exit status from the interactive shell session
    $GIT_SHELL_NOOP_EXIT	No invocation has happened.

Example:
HELPTEXT
    local commandName="$(basename "$1")"
    printf 'git-wcs-in-dir-do-command dev "my development projects" ~/dev -- %q\n' "${commandName#git-}"
}

isQuiet=
typeset -a predicate=()
typeset -a predicateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--quiet|-q)	shift; isQuiet=t;;
	--on-dirty)	shift; predicate=(git-dirty --quiet);;
	--on-wips)	shift; predicate=(git-wips);;
	--wip-check)	shift; predicateArgs+=("$1"); shift;;
	--pre-command)	shift; export INIT_COMMANDS+="${INIT_COMMANDS:+; }$1"; shift;;
	--with-status)	shift; export INIT_COMMANDS+="${INIT_COMMANDS:+; }git status${GIT_SHELL_STATUS_ARGS:+ }$GIT_SHELL_STATUS_ARGS";;
	--with-diff)	shift; export INIT_COMMANDS+="${INIT_COMMANDS:+; }git diff${GIT_SHELL_DIFF_ARGS:+ }$GIT_SHELL_DIFF_ARGS";;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

if [ ${#predicate[@]} -gt 0 ]; then
    eval "${isQuiet:+>/dev/null}" '"${predicate[@]}" "${predicateArgs[@]}" || exit $GIT_SHELL_NOOP_EXIT'
fi

exec ${GIT_SHELL_ENV:+env} $GIT_SHELL_ENV "$SHELL" -i
