#!/bin/bash
set -o pipefail

# Sources:
#   http://stackoverflow.com/questions/1552340/git-show-all-changed-files-between-two-commits
#   http://stackoverflow.com/questions/3144647/git-show-all-files-changed-between-two-commits

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly libDir="${projectDir}/lib"
source "${libDir}/logArgParser.sh" || exit 3

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--intermediate] [-s|--status [--[no-]renames] [-M<n>|--find-renames[=<n>]] [-C<n>|--find-copies[=<n>]|--find-copies-harder] ([-a|--added] [-c|--copied] [-d|--deleted] [-m|--modified] [-r|--renamed] [-t|--retyped] ... | [-A|--not-added] [-C|--not-copied] [-D|--not-deleted] [-M|--not-modified] [-R|--not-renamed] [-T|--not-retyped] ...) ([--cached] [--to COMMIT])|<since>..<until>|--since <date>|--max-count <number>|-n <number>|COMMIT-LIMITING-ARGS] [[--] <path>...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show the files modified in passed commit or commit range.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --intermediate  files that are again the same, but were changed and then
		    changed back, are included, too
    -s|--status	    includes the status (added, modified, etc.), as a first
		    column
    --added|-a --copied|-c --deleted|-d --modified|-m --renamed|-r --retyped|-t
		    Only list added / copied / deleted / modified / renamed /
		    changed in type files (can be combined). If you want renames
		    / copies to be counted as added / deleted, pass
		    --no-renames.
    --not-added|-A --not-copied|-C --not-deleted|-D --not-modified|-M
    --not-renamed|-R --not-retyped|-T
		    Don't list added / copied / deleted / modified / renamed /
		    changed in type files (can be combined). If you want renames
		    / copies to be counted as added / deleted, pass
		    --no-renames.
HELPTEXT
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
typeset -a diffRange=()
typeset -a logRange=()
isIncludeIntermediate=
typeset -a gitNameStatusArg=(--name-only)
sorter='sort -u'
statusFilter=
typeset -a allargs=()
typeset -a renameArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--cached)	diffRange+=("$1"); shift;;
	--to)		shift; diffRange+=("${1:?}"); shift;;
	--intermediate)	shift; isIncludeIntermediate=t;;
	--status|-s)	shift; gitNameStatusArg=(--name-status); sorter='sort -k 2 -u';;
	--no-renames|--renames|--find-renames|--find-renames=*|-M?*|--find-copies|--find-copies=*|-C?*|--find-copies-harder)
			renameArgs+=("$1"); shift;;
	--added|-a)	shift; statusFilter+='A';;
	--not-added|-A)	shift; statusFilter+='a';;
	--copied|-c)	shift; statusFilter+='C';;
	--not-copied|-C)
			shift; statusFilter+='c';;
	--deleted|-d)	shift; statusFilter+='D';;
	--not-deleted|-D)
			shift; statusFilter+='d';;
	--modified|-m)	shift; statusFilter+='M';;
	--not-modified|-M)
			shift; statusFilter+='m';;
	--renamed|-r)	shift; statusFilter+='R';;
	--not-renamed|-R)
			shift; statusFilter+='r';;
	--retyped|-t)	shift; statusFilter+='T';;
	--not-retyped|-T)
			shift; statusFilter+='t';;

	# XXX: Semantics of r1..r2 and r1...r2 are swapped between rev-range and
	# diff.
	#
	# For diff, r1..r2 is synonymous to r1 r2; i.e. changes between the two
	# commits are shown. r1...r2 views the changes on the branch containing
	# and up to the r2, starting at a common ancestor of both r1 and r2.
	# "git diff r1...r2" is equivalent to "git diff $(git merge-base r1 r2)
	# r2"
	#
	# For log / rev-parse, r1..r2 means reachable from r2 but not r1.
	# r1...r2 is the symmetric difference of r1 and r2 and is defined as r1
	# r2 --not $(git merge-base --all r1 r2). It is the set of commits that
	# are reachable from either one of r1 (left side) or r2 (right side) but
	# not from both.
	#
	# So, the symmetric one is ... for log, but .. for diff, and the one
	# that excludes changes from the first is .. for log but ... for diff.
	# WTF.
	*...*)		logRange=("$1"); range='..'; shift;;
	*..*)		logRange=("$1"); range='...'; shift;;

	--)		break;;
	*)		if countDiffArgs "$1"; argCount=$?; [ $argCount -gt 0 ]
			then
			    while ((argCount-- > 0))
			    do
				shift
			    done
			else
			    allargs+=("$1")
			    shift
			fi
			;;
    esac
done

typeset -a statusFilterArg=(); [ -z "$statusFilter" ] || statusFilterArg=(--diff-filter="$statusFilter")

if [ "$isIncludeIntermediate" ]; then
    git-subdir-relativizer log --pretty='format:' "${gitNameStatusArg[@]}" "${renameArgs[@]}" "${statusFilterArg[@]}" "${allargs[@]}" "${logRange[@]}" "$@"
elif [ -n "$range" ]; then
    if [ ${#diffRange[@]} -gt 0 ]; then
	printUsage "$0" >&2
	exit 2
    fi
    # Source: http://stackoverflow.com/a/1552353/813602
    GIT_LOGLIMITTORANGECOMMAND_RANGE="$range" \
	git-subdir-relativizer loglimit-to-range-command -2 \
	    diff LIMITRANGE "${gitNameStatusArg[@]}" "${renameArgs[@]}" "${statusFilterArg[@]}" "${allargs[@]}" "${logRange[@]}" "$@"
elif [ ${#diffRange[@]} -gt 0 ]; then
    # Source: http://stackoverflow.com/a/1552353/813602
    git-subdir-relativizer diff "${gitNameStatusArg[@]}" "${renameArgs[@]}" "${statusFilterArg[@]}" "${allargs[@]}" "${diffRange[@]}" "$@"
else
    # Need to convert tags to commit ids, to avoid that "git show" also shows
    # details about the tag itself.
    typeset -a argsWithResolvedCommitIds=()
    for arg in "${allargs[@]}" "$@"
    do
	argsWithResolvedCommitIds+=("$(git-commitid --no-error -- "$arg" || printf %s "$arg")")
    done
    git-subdir-relativizer loglimit-to-range-command -2 \
	show LIMITRANGE --pretty='format:' "${gitNameStatusArg[@]}" "${renameArgs[@]}" "${statusFilterArg[@]}" "${argsWithResolvedCommitIds[@]}"
fi \
    | eval "$filter ${filter:+|}" \
	"$sorter" \
	"| sed -e '/^\$/d'" \
	"${pager:+|}" '"${pager[@]}"'
