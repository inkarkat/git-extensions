#!/bin/bash
set -o noglob

printUsage()
{
    cat <<HELPTEXT
Execute GIT-COMMAND with the files modified in the last commit / passed
-r|--revision REVISION
- appended
- replacing FILES argument(s) anywhere
- replacing FILES in the following GIT-COMMAND and -(N-1) arguments
- replacing FILES in the following +(N) arguments and appending those
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-c ...] GIT-COMMAND [...] [-r|--revision REVISION] [...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-option-name] --keep-position GIT-COMMAND [... FILES ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-option-name] [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-option-name] [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [...]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

revision=
typeset -a args=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--revision|-r)	if [ -n "$revision" ]; then
			    args+=("$1" "$2"); shift; shift
			else
			    shift; revision="${1:?}"; shift
			fi
			;;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi

readarray -t files < <(eval "${GIT_LASTFILES_COMMAND:-git-showfiles}" '"${revision:-HEAD}"'; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
[ ${files[-1]} -ne 0 ] && exit ${files[-1]}
unset "files[$((${#files[@]}-1))]"
[ -z "${files[-1]}" ] && unset "files[$((${#files[@]}-1))]"
if [ ${#files[@]} -eq 0 ]; then
    echo >&2 'ERROR: No files.'
    exit 1
fi

isCountedAppend=
case "$1" in
    +[1-9])
	isCountedAppend=t;&
    -[1-9])
	typeset countedArgNum=${1#[+-]}
	typeset -a countedArgs=("${@:2:${countedArgNum}}")
	set -- "${@:$((2 + countedArgNum))}"

	typeset -a appendedArgs=()
	for arg in "${countedArgs[@]}"
	do
	    if [ "$arg" = 'FILES' ]; then
		appendedArgs+=("${files[@]}")
	    else
		appendedArgs+=("$arg")
	    fi
	done

	[ "$isCountedAppend" ] \
	    && exec git-wrapper "$@" "${appendedArgs[@]}" \
	    || exec git-wrapper "${appendedArgs[@]}" "$@"
	;;
    --keep-position)
	shift

	typeset -a appendedArgs=()
	for arg
	do
	    if [ "$arg" = 'FILES' ]; then
		appendedArgs+=("${files[@]}")
	    else
		appendedArgs+=("$arg")
	    fi
	done

	exec git-wrapper "${appendedArgs[@]}"
	;;
    *)
	exec git-wrapper "$@" -- "${files[@]}"
	;;
esac
