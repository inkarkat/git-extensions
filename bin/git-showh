#!/bin/bash
set -o pipefail

: ${GIT_SHOWH_COLOR_FILE=[36m}
: ${GIT_SHOWH_COLOR_HUNK=[0m}
: ${GIT_SHOWH_COLOR_SEPARATOR=[38;5;245m}
: ${GIT_SHOWH_FILE_HUNK_SEPARATOR=: }
: ${GIT_SHOWH_COLOR_RESET=[0m}

printUsage()
{
    cat <<HELPTEXT
Log together with just the modified file followed by the "TEXT" portion(s) of
patch hunk headers of the diff for a particular commit. Condenses identical
"TEXT" portions of hunks and completely omits logs that have no "TEXT" portion.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[options] <object> <object> [...] [[--] <path>...] [-?|-h|--help]'
}

typeset -a objects=()
unset files
isColor=t
typeset -a colorArg=(--color=always)
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ ! -t 1 ]; then
    isColor=
    colorArg=()
    pager=()
fi
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=never)
			colorArg=("$1"); shift; isColor=;;
	--color=always)	colorArg=("$1"); shift; isColor=t;;
	--color=*)	colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1" "$2"); case "$2" in never) isColor=;; always) isColor=t;; esac; shift; shift;;
	--)		shift; typeset -a files=("$@"); break;;
	*)		objects+=("$1"); shift;;
    esac
done
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    objects+=("$@")
    while [ ${#objects[@]} -ne 0 ]
    do
	lastArg="${objects[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	objects=("${objects[@]:0:${#objects[@]}-1}")
    done
fi
[ ${#objects[@]} -gt 0 ] || objects=(HEAD)
[ "$isColor" ] || unset "${!GIT_SHOWH_COLOR_@}"

showh()
{
    local isFirst=t status=0 object; for object in "${objects[@]}"
    do
	local hunkHeaders; hunkHeaders="$(
	    git-wrapper log --patch --max-count 1 --no-color --pretty= "$object" ${files[*]:+--} "${files[@]}" \
		| sed -n \
		    -e '/^--- /{ N; /\n+++ /{ s/^[^\n]*\n//; s#^+++ \([biw]/\)\?##; h; }; }' \
		    -e 't next' -e :next \
		    -e 's/^@@ .* @@ \(.\+\)$/\1/' \
		    -e T \
		    -e 'G; s#^\([^\n\]*\)\n\([^\n]*\)$#'"${GIT_SHOWH_COLOR_FILE}\\2${GIT_SHOWH_COLOR_RESET}${GIT_SHOWH_COLOR_SEPARATOR}${GIT_SHOWH_FILE_HUNK_SEPARATOR}${GIT_SHOWH_COLOR_RESET}${GIT_SHOWH_COLOR_HUNK}\\1${GIT_SHOWH_COLOR_RESET}"'#; p' \
		| uniqueStable
	    )" || status=$?

	    if [ -n "$hunkHeaders" ]; then
		[ "$isFirst" ] || printf '\n'; isFirst=

		git show --no-patch "${colorArg[@]}" "$object" \
		    && printf '\n%s\n' "$hunkHeaders" \
		    || status=$?
	    fi
    done
    return $status
}

eval showh "${pager:+|}" '"${pager[@]}"'
