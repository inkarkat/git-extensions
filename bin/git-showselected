#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Log together with diff [for FILE(s)] for the commit interactively chosen from
the commits [that cover FILE ...] in the passed <range>.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '--since <date>|--max-count <number>|-n <number>|<range> [<show-args> ...] [--] [FILE ...] [-?|-h|--help]'
}
typeset -a gitCommandArgs=()
typeset -a files=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--)		shift; files=("$@"); break;;
	*)		gitCommandArgs+=("$1"); shift;;
    esac
done
if [ ${#files[@]} -eq 0 ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    gitCommandArgs+=("$@")
    while [ ${#gitCommandArgs[@]} -ne 0 ]
    do
	lastArg="${gitCommandArgs[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	gitCommandArgs=("${gitCommandArgs[@]:0:${#gitCommandArgs[@]}-1}")
    done
fi
set -- "${gitCommandArgs[@]}"

typeset -a rangeArgs=()
typeset -a rangeModificationArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--since)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count|-n)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count=*|-+([0-9]))
			rangeArgs+=("$1"); shift;;
	--follow)	rangeModificationArgs+=("$1"); shift;;
	*)		if [ ${#rangeArgs[@]} -eq 0 ]; then
			    rangeArgs+=("$1"); shift
			fi
			break
			;;
    esac
done
if [ ${#rangeArgs[@]} -eq 0 ]; then
    echo >&2 'ERROR: Need <range>.'
    exit 2
fi

readarray -t commits < <(
    git log --pretty='tformat:%H %s' "${rangeModificationArgs[@]}" "${rangeArgs[@]}" ${files:+--} "${files[@]}" | \
    truncate-trailing -w | commandWithHiddenId --stdin -p -c 'commandOnSelected --stdin'
    printf '\n%d\n' "$?"
)   # Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
status=${commits[-1]}
unset 'commits[-1]'
[ -z "${commits[-1]}" ] && unset 'commits[-1]'

if [ $status -eq 124 ]; then
    echo >&2 'ERROR: No commits available.'
    exit 1
elif [ $status -ne 0 ]; then
    exit $status
fi

exec git-wrapper ${GIT_SHOWSELECTED_COMMAND:-show} "$@" "${commits[@]}" ${files:+--} "${files[@]}"
