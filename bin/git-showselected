#!/bin/bash
set -o pipefail
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--last-only] [--pass-file-args] --since <date>|--max-count <number>|-n <number>|<range> [<show-args> ...] [--] [FILE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Log together with diff [for FILE(s)] for the commit interactively chosen / last
commit from the commits [that cover FILE ...] in the passed <range>.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --last-only	    Choose the last commit in the range without querying.
    --pass-file-args
		    Pass FILE arguments also to git show, and not just use them
		    to determine the commits. I.e. also limit the diff to the
		    passed FILE(s).
HELPTEXT
}

typeset -a gitCommandArgs=()
unset files
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--)		shift; typeset -a files=("$@"); break;;
	*)		gitCommandArgs+=("$1"); shift;;
    esac
done
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    gitCommandArgs+=("$@")
    while [ ${#gitCommandArgs[@]} -ne 0 ]
    do
	lastArg="${gitCommandArgs[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	gitCommandArgs=("${gitCommandArgs[@]:0:${#gitCommandArgs[@]}-1}")
    done
fi
set -- "${gitCommandArgs[@]}"

action=getSelected
isPassFileArgs=
typeset -a rangeArgs=()
typeset -a rangeModificationArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--last-only)	shift; action=getLast;;
	--pass-file-args)
			shift; isPassFileArgs=t;;
	--since)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count|-n)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count=*|-+([0-9]))
			rangeArgs+=("$1"); shift;;
	--follow)	rangeModificationArgs+=("$1"); shift;;
	*)		if [ ${#rangeArgs[@]} -eq 0 ]; then
			    rangeArgs+=("$1"); shift
			fi
			break
			;;
    esac
done
if [ ${#rangeArgs[@]} -eq 0 ]; then
    echo >&2 'ERROR: Need <range>.'
    exit 2
fi

commitSource()
{
    git log "$@" "${rangeModificationArgs[@]}" "${rangeArgs[@]}" ${files:+--} "${files[@]}"
}

typeset -a commits=()
getSelected()
{
    readarray -t commits < <(
	commitSource --pretty='tformat:%H %s' \
	    | truncate-trailing -w \
	    | commandWithHiddenId --stdin -p -c 'commandOnSelected --stdin'
	printf '\n%d\n' "$?"
    )   # Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
    local status=${commits[-1]}
    unset 'commits[-1]'
    [ -z "${commits[-1]}" ] && unset 'commits[-1]'

    if [ $status -eq 124 ]; then
	echo >&2 'ERROR: No commits available.'
	return 1
    elif [ $status -ne 0 ]; then
	return $status
    fi
}

getLast()
{
    readarray -t commits < <(commitSource --pretty='tformat:%H')
    if [ ${#commits[@]} -eq 0 ]; then
	echo >&2 'ERROR: No commits available.'
	return 1
    fi
    commits=("${commits[$((${#commits[@]}-1))]}")
}

$action || exit $?
[ "$isPassFileArgs" ] || files=()
exec git-wrapper ${GIT_SHOWSELECTED_COMMAND:-show} "$@" "${commits[@]}" ${files:+--} "${files[@]}"
