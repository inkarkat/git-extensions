#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Log together with side-by-side diff for a particular commit.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[options] <object> <object> [...] [[--] <path>...] [-?|-h|--help]'
}
typeset -a objects=()
unset files
typeset -a colorArg=(--color=always)
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ ! -t 1 ]; then
    colorArg=()
    pager=()
fi
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--color=auto)	shift;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1" "$2"); shift; shift;;
	--)		shift; typeset -a files=("$@"); break;;
	*)		objects+=("$1"); shift;;
    esac
done
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    objects+=("$@")
    while [ ${#objects[@]} -ne 0 ]
    do
	lastArg="${objects[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	objects=("${objects[@]:0:${#objects[@]}-1}")
    done
fi
[ ${#objects[@]} -gt 0 ] || objects=(HEAD)

showy()
{
    local status=0 object; for object in "${objects[@]}"
    do
	git show "${colorArg[@]}" --no-patch "$object" \
	    && git dpy "${colorArg[@]}" "$object" ${files[*]:+--} "${files[@]}" \
	    || status=$?
    done
    return $status
}

eval showy "${pager:+|}" '"${pager[@]}"'
