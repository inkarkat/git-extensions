#!/bin/bash
set -o noglob -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--revision REVISION] [--author=<pattern>|--committer=<pattern> ...] [--no-range|--with-range ...] [--one-more] [--with-log-args|--with-log-args-except-last|--pass-file-args] ... [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [... --author=<pattern>|--committer=<pattern> [-r|--revision REVISION] ...] '
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... USERRANGE ... --author=<pattern>|--committer=<pattern> [-r|--revision REVISION] ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [... --author=<pattern>|--committer=<pattern> [-r|--revision REVISION] ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [... --author=<pattern>|--committer=<pattern> [-r|--revision REVISION] ...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print / execute GIT-COMMAND with a revision range starting from the current HEAD
/ passed REVISION to the very first commit from the passed author / committer(s)
(or the author (+ committer if different) from the start revision)
- appended
- replacing USERRANGE argument(s) anywhere
- replacing USERRANGE in the following GIT-COMMAND and -(N-1) arguments
- replacing USERRANGE in the following +(N) arguments and appending those
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --no-range	    Only use the first commit from the passed author.
    --with-range ...
		    Use ... instead of .. as the range specifier.
    --one-more	    Include the commit preceding the author's first commit.
    --with-log-args All GIT-COMMAND arguments should also be used when
		    determining the revision range. FILE arguments are passed to
		    GIT-COMMAND as well.
    --with-log-args-except-last
		    All GIT-COMMAND arguments expect the very last should also
		    be used when determining the revision range.
    --pass-file-args
		    Pass FILE arguments also to GIT-COMMAND, and not just use
		    them to determine the revision range.
HELPTEXT
}

# Need to parse off --author|--committer from anywhere first; these here select
# the user and do not filter commits by author (for that we have "git logby").
# Same for --with-log-args-except-last to determine that the last argument is
# not a file argument.
typeset userFilterArgs=()
withLogArgs=
typeset -a allargs=()
unset files
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--author|--committer)
			userFilterArgs+=("$1" "$2"); shift; shift;;
	--author=*|--committer=*)
			userFilterArgs+=("$1"); shift;;
	--with-log-args-except-last)
			shift; withLogArgs=except-last;;
	--)		shift
			if [ "$withLogArgs" = except-last ]; then
			    allargs+=("${!#}")
			    typeset -a files=("${@:1:$(($#-1))}")
			else
			    typeset -a files=("$@")
			fi
			break
			;;
	*)		allargs+=("$1"); shift;;
    esac
done
if [ -z "${files+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a files=()
    allargs+=("$@")
    while [ ${#allargs[@]} -ne 0 ]
    do
	lastArg="${allargs[-1]}"
	[ -e "$lastArg" ] || break

	files=("$lastArg" "${files[@]}")
	allargs=("${allargs[@]:0:${#allargs[@]}-1}")
    done
fi
set -- "${allargs[@]}"

revision=
typeset -a allargs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--revision|-r)	shift; revision="$1"; shift;;
	--)		break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

range=..
isShowOneMore=
isPassFileArgs=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		    shift; printLongUsage "$0"; exit 0;;
	--no-range)		    shift; range=;;
	--with-range)		    shift; range="$1"; shift;;
	--one-more)		    shift; isShowOneMore=t;;
	--with-log-args)	    shift; withLogArgs=all;;
	# --with-log-args-except-last already parsed above.
	--pass-file-args)	    shift; isPassFileArgs=t;;
	*)			    break;;
    esac
done
if [ "$isPassFileArgs" ]; then
    set -- "$@" ${files[*]:+--} "${files[@]}"
fi

isCountedAppend=
typeset -a countedArgs=()
case "$1" in
    +[1-9])
	isCountedAppend=t;&
    -[1-9])
	typeset countedArgNum=${1#[+-]}
	typeset countedArgNum=${1#-}
	countedArgs=("${@:2:${countedArgNum}}")
	set -- "${@:$((2 + countedArgNum))}"

	executor()
	{
	    countedArgs=("${countedArgs[@]//USERRANGE/${revisionRange}}")

	    [ "$isCountedAppend" ] \
		&& exec git-wrapper "$@" "${countedArgs[@]}" \
		|| exec git-wrapper "${countedArgs[@]}" "$@"
	}
	;;
    --keep-position)
	shift
	countedArgs=("$@"); set --

	executor()
	{
	    exec git-wrapper "${countedArgs[@]//USERRANGE/${revisionRange}}"
	}
	;;
    *)	countedArgs=("$@"); set --
	executor()
	{
	    exec git-wrapper "${countedArgs[@]}" "$revisionRange"
	}
	;;
esac

if [ ${#userFilterArgs[@]} -eq 0 ]; then
    author="$(git show --no-patch --pretty=format:'%aN <%aE>' "${revision:-HEAD}")" || exit $?
    committer="$(git show --no-patch --pretty=format:'%cN <%cE>' "${revision:-HEAD}")" || exit $?
    userFilterArgs+=(--author "$author")
    [ "$author" = "$committer" ] || userFilterArgs+=(--committer "$committer")
fi
typeset sharedLogArgs=()
case "$withLogArgs" in
    all)	    sharedLogArgs+=("$@" ${files[*]:+--} "${files[@]}");;
    except-last)    sharedLogArgs+=("${@:1:$(($#-1))}" ${files[*]:+--} "${files[@]}");;
esac

startRevision="$(git-firstcommit "${userFilterArgs[@]}" "${revision:-HEAD}" "${sharedLogArgs[@]}" ${files[*]:+--} "${files[@]}")" || exit $?
revisionRange="${startRevision:?}${range:+^}${isShowOneMore:+^}${range}${range:+${revision}}"

if [ ${#countedArgs[@]} -eq 0 -a $# -eq 0 ]; then
    printf '%s\n' "$revisionRange"
    exit 0
else
    executor "$@"
fi
