#!/bin/bash
set -o pipefail

: ${GIT_STACKBR_SEPARATOR=-}
readonly suffixPattern="${GIT_STACKBR_SUFFIX_PATTERN-$GIT_BRANCH_SUFFIX_PATTERN}"

printUsage()
{
    cat <<HELPTEXT
Execute GIT-COMMAND with the branch name where next / previous existing OFFSET
stacked branch is added to the appended ${GIT_STACKBR_SEPARATOR}1 suffix${suffixPattern:+ but possibly before
a $suffixPattern match}.
- appended
- replacing BRANCH argument(s) anywhere
- replacing BRANCH in the following GIT-COMMAND and -(N-1) arguments
- replacing BRANCH in the following +(N) arguments and appending those
If there's no branch, an error is printed.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-o|--offset N] [--exclude-base] [--] ... [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [... -o|--offset N [--exclude-base] [-b|--branch BRANCH] ...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... BRANCH ... -o|--offset N [--exclude-base] [-b|--branch BRANCH] ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [... -o|--offset N [--exclude-base] [-b|--branch BRANCH] ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [... -o|--offset N [--exclude-base] [-b|--branch BRANCH] ...]'
}

# Need to parse off -o|--offset, --exclude-base and -b|--branch from anywhere first.
typeset -a stackedbranchesArgs=()
typeset -a allargs=()
offset=
branch=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--exclude-base)	stackedbranchesArgs+=("$1"); shift;;
	--offset|-o)	shift; offset=${1:?}; shift;;
	--branch|-b)	if [ "$2" = BRANCH -o -n "$branch" ]; then
			    args+=("$1" "$2"); shift; shift
			else
			    shift; branch="$1"; shift
			fi
			;;
	--)		allargs+=("$1"); shift; break;;
	*)		allargs+=("$1"); shift;;
    esac
done
set -- "${allargs[@]}"
[ -n "$branch" ] || branch="$(git-brname --real-branch-only)" || exit $?

stackedBranch=
readarray -t branches < <(git-stackedbranches "${stackedbranchesArgs[@]}" ${branch:+--branch "$branch"})
branchIndex=$(index "$branch" "${branches[@]}") || { echo >&2 "Cannot find branch ${branch}."; exit 3; }
let stackedBranchIndex=branchIndex+offset
if [ $stackedBranchIndex -lt 0 ]; then
    if [ $branchIndex -eq 0 ]; then
	printf >&2 'ERROR: No previous stacked branches available; cannot go back.\n'
    else
	branchPlural=es; [ $branchIndex -eq 1 ] && branchPlural=
	printf >&2 'ERROR: Only %d previous stacked branch%s available; first is %s; cannot go back %d branches.\n' $branchIndex "$branchPlural" "${branches[0]}" $((-1 * offset))
    fi
    exit 2
elif [ $stackedBranchIndex -ge ${#branches[@]} ]; then
    if [ $branchIndex -eq $((${#branches[@]} - 1)) ]; then
	printf >&2 'ERROR: No next stacked branches available; cannot go forward.\n'
    else
	branchCnt=$((${#branches[@]} - branchIndex))
	branchPlural=es; [ $branchCnt -eq 1 ] && branchPlural=
	printf >&2 'ERROR: Only %d next stacked branch%s available; last is %s; cannot go forward %d branches.\n' $branchCnt "$branchPlural" "${branches[-1]}" $offset
    fi
    exit 2
fi
stackedBranch="${branches[$stackedBranchIndex]}"

isCountedAppend=
case "$1" in
    +[1-9])
	isCountedAppend=t;&
    -[1-9])
	typeset countedArgNum=${1#[+-]}
	typeset -a countedArgs=("${@:2:${countedArgNum}}")
	set -- "${@:$((2 + countedArgNum))}"

	countedArgs=("${countedArgs[@]//BRANCH/${stackedBranch}}")

	[ "$isCountedAppend" ] \
	    && exec git-wrapper "$@" "${countedArgs[@]}" \
	    || exec git-wrapper "${countedArgs[@]}" "$@"
	;;
    --keep-position)
	shift
	exec git-wrapper "${@//BRANCH/${stackedBranch}}"
	;;
    *)
	exec git-wrapper "$@" "$stackedBranch"
	;;
esac
