#!/bin/bash
set -o pipefail

: ${GIT_STALEBR_AGE:=3mo}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    local hubOptions=; [ "$HUB" ] && hubOptions='[--only-mine] [--pull-requests-from-repo WORKING-COPY|[HOST/]OWNER/REPO [--pull-requests-from-repo ...] [--pull-requests-from-here]]'
    printf 'Usage: %q %s%s %s\n' "$(basename "$1")" '[--bare] [--compare-to <branch>|<commit>|""] [-r|--remote REMOTE|-a]' "${hubOptions:+ }${hubOptions}" '[-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]] [--include-current] [--include-master] [--include-base] [--include-all] [--] [<branch-glob> ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
List branches that have not been updated in a while (for ${GIT_STALEBR_AGE}).
HELPDESCRIPTION
    [ "$HUB" ] && echo 'Excludes branches with an active PR.'
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --bare		Just print the branch names.
    --compare-to <branch>|<commit>|""
			Show ahead-behind information with regards to <branch>
			(default: the master branch) or <commit> (or omit that).
    -r			List remote-tracking branches.
    --remote REMOTE	List a particular REMOTE.
    -a			List both local and remote-tracking branches.
    -n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]
			Only print those branches that match the age comparison.
SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours, 'd'
for days, 'w' for weeks, 'mo' for months, 'y' for years, 'g' for generations.
HELPTEXT
    [ "$HUB" ] && cat <<HUB-HELPTEXT
    --only-mine		Only consider branches from pull requests that have been
			opened from my GitHub clone. By default, it assumes that
			I'm potentially collaborating with other contributors
			and checking out their PR branches as well.
    --pull-requests-from-repo WORKING-COPY|[HOST/]OWNER/REPO
			Obtain pull request branches that are not stale (even if
			older) from WORKING-COPY / the remote OWNER/REPO. Useful
			if pull requests are opened against a superproject or if
			the upstream isn't configured properly.
    --pull-requests-from-here
			Also obtain pull request branches from the repository
			itself when --pull-requests-from-repo is used.
    --include-current --include-master --include-base --include-all
			Include persistent branches that would normally be
			filtered out.
HUB-HELPTEXT
}

listPrBranches()
{
    # The GitHub format for branches is [OWNER:]BRANCH; we only want the branch
    # name [potentially just from me as the owner].
    [ "$isOnlyMine" ] \
	&& typeset -a branchFilter=(-n -e "s#^$(git me-in-github):##p") \
	|| typeset -a branchFilter=(-e 's#^[^:]\+:##')
    hub pr list --format '%H%n' \
	| sed "${branchFilter[@]}"
}
isReadPrBranches=; [ "$HUB" ] || isReadPrBranches=t
typeset -A prBranches=()
readPrBranches()
{
    [ $# -gt 0 ] || set -- listPrBranches
    while IFS=$'\n' read -r prBranchName
    do
	prBranches["$prBranchName"]=t
    done < <("$@")
    isReadPrBranches=t
}

isBare=
isOnlyMine=
compareTo="$(git-mbr 2>/dev/null)"
typeset -a branchFilter=(--older "$GIT_STALEBR_AGE")
typeset -a branchScope=()
typeset -a additionalBranchInfoArgs=(--long)
typeset -a persistentBranchFilters=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--bare)		shift; isBare=t; additionalBranchInfoArgs=(--bare);;
	--compare-to)	shift; compareTo="$1"; shift;;
	-a|-r)		[ "$1" = '-a' ] && gitFilterOutPersistentBranchesArgs+=(--remote '')
			branchScope+=("$1"); shift
			for remote in $(git remote)
			do
			    persistentBranchFilters+=(--remote "$remote")
			done
			;;
	--remote)	branchScope+=("$1" "$2"); persistentBranchFilters+=("$1" "$2"); shift; shift;;
	--pull-requests-from-repo)
			shift
			if [ -d "$1" ]; then
			    pushd "$1" >/dev/null || exit 2
			    readPrBranches
			    popd >/dev/null || exit 2
			else
			    readPrBranches gh pr list --json headRefName --template '{{range .}}{{.headRefName}}{{"\n"}}{{end}}' --repo "${1:?}"
			fi
			shift
			;;
	--only-mine)	shift; isOnlyMine=t;;
	--pull-requests-from-here)
			shift; readPrBranches; shift;;
	-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt)
			branchFilter=("$1" "$2"); shift; shift;;
	--include-*)	persistentBranchFilters+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

[ "$isReadPrBranches" ] || readPrBranches

typeset -a staleBranches=()
typeset -A staleBranchInfos=()
while IFS=$'\n' read -r branchInfo
do
    branchName="${branchInfo##*$'\t'}"	# If there's additional information, the branch name is the last field.
    [ "${prBranches["$branchName"]}" -o "${prBranches["${branchName#*/}"]}" ] && continue

    staleBranches+=("$branchName")
    staleBranchInfos["$branchName"]="$branchInfo"
done < <(git-brage "${additionalBranchInfoArgs[@]}" "${branchFilter[@]}" "${branchScope[@]}" "$@")
[ ${#staleBranches[@]} -gt 0 ] || exit 99

readarray -t staleBranches < <(printf '%s\n' "${staleBranches[@]}" | git-filter-out-persistent-branches "${persistentBranchFilters[@]}")
[ ${#staleBranches[@]} -gt 0 ] || exit 99

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
if [ ! -t 1 ]; then
    pager=()
    formatter=()
fi

embellishedStaleBranches()
{
    for branchName in "${staleBranches[@]}"
    do
	aheadBehind="$(git ab "$branchName" "$compareTo" 2>/dev/null)"
	[ -z "$aheadBehind" ] || aheadBehind="...${aheadBehind#*...}"
	printf '%s%s\n' "${staleBranchInfos["$branchName"]}" "${aheadBehind/ /$'\t'}"
    done
}

staleBranches()
{
    if [ "$isBare" ] || [ -z "$compareTo" ]; then
	for branchName in "${staleBranches[@]}"
	do
	    printf '%s\n' "${staleBranchInfos["$branchName"]}"
	done
    else
	eval 'embellishedStaleBranches' "${formatter:+|}" '"${formatter[@]}"'
    fi
}

eval staleBranches "${pager:+|}" '"${pager[@]}"'
