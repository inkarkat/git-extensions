#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Extension of "git stash push" that prompts for a message like "git commit", and
can take its input from file(s), too.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[STASH-PUSH-ARGS ...] [-e|--edit|--no-edit] [-m|--message=MESSAGE|-F|--file=FILE [...]] [-?|-h|--help]'
}

unset isEdit
typeset -a messageArgs=()
typeset -a stashPushArgs=()
unset stashFilespecs
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--message|-m|--file|-F)
			messageArgs+=("$1" "${2?}"); shift; shift;;
	--message=*|--file=*)
			messageArgs+=("$1"); shift;;
	--edit|-e)	shift; isEdit=t;;
	--no-edit)	shift; isEdit=;;
	--)		stashPushArgs+=("$1"); shift; typeset -a stashFilespecs=("$@"); break;;
	*)		stashPushArgs+=("$1"); shift;;
    esac
done
if [ -z "${stashFilespecs+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a stashFilespecs=()
    stashPushArgs+=("$@")
    while [ ${#stashPushArgs[@]} -ne 0 ]
    do
	lastArg="${stashPushArgs[-1]}"
	[ -e "$lastArg" ] || break

	stashFilespecs=("$lastArg" "${stashFilespecs[@]}")
	stashPushArgs=("${stashPushArgs[@]:0:${#stashPushArgs[@]}-1}")
    done
fi

if message="$(git-commitMessagePrint "${messageArgs[@]}")" \
    && [ -z "$message" ]
then
    echo >&2 'Aborting stash due to empty message.'
    exit 1
elif [ -z "$message" -a -z "${isEdit+t}" ] || [ "$isEdit" ]; then
    gitDir="$(git rev-parse --git-dir 2>/dev/null)"

    # Git (2.43.0) defaults to "WIP on BRANCH|(no branch): %h %s", but when
    # --message is given it only prepends "On BRANCH|(no branch): "
    printf '%s\n' "${message:-$(git log --pretty=format:'%h %s' --max-count 1)}" \
	| TMPDIR="$gitDir" tempedit --basename STASH_EDITMSG --sink-exec "${BASH_SOURCE[0]}" --file {} "${stashPushArgs[@]}" "${stashFilespecs[@]}" \;
    # tempedit can pass the filespec to a sink (which we want to use as it's
    # dependent on the edit success); as "git stash push" only handles --message, do
    # a recursive call with --file that reads the file contents and turns it into
    # --message.
else
    exec git stash push ${message:+--message "$message"} "${stashPushArgs[@]}" "${stashFilespecs[@]}"
fi
