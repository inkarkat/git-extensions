#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Extension of "git stash push" that prompts for a message like "git commit", and
can take its input from file(s), too.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[STASH-PUSH-ARGS ...] [-e|--edit|--no-edit] [-m|--message=MESSAGE|-F|--file=FILE [...]] [-?|-h|--help]'
}

unset message
addMessage()
{
    local text="${1?}"; shift
    message+="${message:+$'\n\n'}${text%$'\n'}"
}
unset isEdit
typeset -a stashPushArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--message|-m)	shift; addMessage "$1"; shift;;
	--message=*)	addMessage "${1#--message=}"; shift;;
	--file|-F)	shift
			if [ "$1" = - ]; then
			    addMessage "$(</dev/stdin)"
			else
			    addMessage "$(<"${1:?}")"
			fi || exit $?
			shift
			;;
	--file=*)	filespec="${1#--file=}"; shift
			if [ "$filespec" = - ]; then
			    addMessage "$(</dev/stdin)"
			else
			    addMessage "$(<"${filespec:?}")"
			fi || exit $?
			;;
	--edit|-e)	shift; isEdit=t;;
	--no-edit)	shift; isEdit=;;
	--)		stashPushArgs+=("$1"); shift; break;;
	*)		stashPushArgs+=("$1"); shift;;
    esac
done
set -- "${stashPushArgs[@]}" "$@"

if [ -n "${message+t}" -a -z "$message" ]; then
    echo >&2 'Aborting stash due to empty message.'
    exit 1
elif [ -z "$message" -a -z "${isEdit+t}" ] || [ "$isEdit" ]; then
    # Git (2.43.0) defaults to "WIP on BRANCH|(no branch): %h %s", but when
    # --message is given it only prepends "On BRANCH|(no branch): "
    printf '%s\n' "${message:-$(git log --pretty=format:'%h %s' --max-count 1)}" \
	| tempedit --basename STASH_EDITMSG --sink-exec "${BASH_SOURCE[0]}" --file {} "$@" \;
    # tempedit can pass the filespec to a sink (which we want to use as it's
    # dependent on the edit success); as "git stash push" only handles --message, do
    # a recursive call with --file that reads the file contents and turns it into
    # --message.
else
    git stash push ${message:+--message "$message"} "$@"
fi
