#!/bin/bash
# Source: https://stackoverflow.com/a/39644782/813602
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Save only index in a commit; keep the dirty working copy.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-p|--patch] [-q|--quiet] [-m|--message <message>] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac

if ! git-staged --quiet; then
    echo >&2 'ERROR: Nothing staged.'
    exit 1
elif ! git-unstaged --quiet; then
    # Every change is in the index already, we can simply stash it.
    exec git stash save --no-keep-index "$@"
elif ! versionCompare "$(git --version 2>/dev/null)" -lt 2.35 2>/dev/null; then
    # Git 2.35 supports "git stash push --staged" out-of-the-box.
    exec git-wrapper stash push --staged "$@"
fi


# There's no direct way (a la --keep-working-copy) to ignore unstaged changes,
# so it has to be done the other way around, by first temporarily stashing the
# working copy, then the index, then undoing the working copy stashing.

# Stash only unstaged changes not yet in the index temporarily.
git stash save --keep-index --quiet --message 'unstaged changes' || exit $?

# Stash everything that remains (only the staged changes should remain). This is
# the stash we want to keep, allow to give it a name / influence the stashing
# via additional arguments.
git stash save "$@" || exit $?

# Apply the original stash to get us back to where we started.
git stash apply 'stash@{1}' || exit $?

# Create a temporary patch to reverse the originally staged changes and apply
# it.
status=0
printf '\nRestoring working directory state by removing staged changes...\n'
git stash show -p | git apply -R --reject || status=$?

# Delete the temporary stash.
git stash drop --quiet 'stash@{1}'

if [ $status -ne 0 ]; then
    readarray -t rejectFilespecs < <(find . -name '*.rej' -mmin -1 -type f -print)
    [ ${#rejectFilespecs[@]} -gt 0 ] || exit $status

    printf >&2 '\nERROR: The following reversals of the index failed and need to be applied manually (in reverse!):\n'
    type -t colordiff >/dev/null && [ -t 1 ] && hasColorDiff=t
    eval 'cat "${rejectFilespecs[@]}"' "${hasColorDiff:+|}colordiff" && \
	rm --force -- "${rejectFilespecs[@]}"

    exit $status
fi
