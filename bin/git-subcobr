#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${GIT_SUBCOBR_COLOR_ACTION=[1m}
: ${GIT_SUBCOBR_COLOR_NOOP=}
: ${GIT_SUBCOBR_COLOR_SKIP=[9;38;5;244m}
: ${GIT_SUBCOBR_COLOR_ERROR=[31m}
: ${GIT_SUBCOBR_COLOR_ZEBRA=[48;5;255m}
: ${GIT_SUBCOBR_COLOR_RESET=[0m}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--status|--query|--all] [--recursive] [--start-point REV|--existing-local|--existing-remote|--checkout|--remote|--update [--gui|--terminal|--none]] [-f|--force] [--dirty] [--untracked] [--] [SUBMODULE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
For each configured submodule / passed SUBMODULE(s), check out the branch
specified in the .gitmodules file (or master).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --status		Show the current status of all / the passed submodules
			without doing any checkouts.
    --query		Confirm for each submodule whether it should be checked
			out, reset to what the superproject has recorded, or
			left as-is.
    --all		Check out all defined submodules without querying.
			By default, the status will be shown unless at least one
			SUBMODULE is passed.
    --recursive		Also check out branches in nested submodules.
    --start-point REV	Check out / create a new local branch and reset it to /
			start it at REV.
    --existing-local	Check out an existing local branch; don't touch
			submodules that don't have such a branch.
			This is the default.
    --existing-remote	Check out an existing remote branch; don't touch
			submodules that don't have such a remote branch.
    --checkout		Check out / create a new local branch.
    --remote		Update the local branch to the tracked remote (without
			logging).
    --update		Update the local branch to the tracked remote, and show
			a log of the changes between the previous (detached)
			checkout and the remote branch.
    --force|-f		Proceed even if the index or the working tree differs
			from HEAD. This is used to throw away local changes.
    --dirty		Only cover those submodules that contain modified
			content (and any additional explicitly passed
			SUBMODULE(s)).
    --untracked		Only cover those submodules that contain untracked
			files. (and any additional explicitly passed
			SUBMODULE(s)).
HELPTEXT
}

typeset -a recursiveArgs=()
action=
isForcedColor=
isDirty=
isUntracked=
isRecursive=
startPoint=
checkoutAction=checkoutExistingLocal
checkoutWhat='Update to tracked remote'
logArg=
forceArg=
prefix=
noOpStatus=99
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	--no-color|--color=never)
			unset "${!GIT_SUBCOBR_COLOR_@}"; shift;;
	--color=always)	isForcedColor=t; shift;;
	--color=auto)	shift;;
	--color)	case "$2" in
			    always) isForcedColor=t;;
			    never)  unset "${!GIT_SUBCOBR_COLOR_@}";;
			    auto)   ;;
			    *)	    echo >&2 "ERROR: Invalid --color arg: $2"
				    echo >&2
				    printUsage "$0" >&2
				    exit 2
				    ;;
			esac
			shift; shift
			;;

	--@(status|query|all))
			recursiveArgs+=("$1"); action="${1#--}"; shift;;
	--recursive)	recursiveArgs+=("$1"); shift; isRecursive=t;;
	--start-point)	shift; startPoint="${1:?}"; shift; checkoutAction=checkoutStartPoint;;
	--existing-local)
			recursiveArgs+=("$1"); shift; checkoutAction=checkoutExistingLocal; checkoutWhat='Check out existing local';;
	--existing-remote)
			recursiveArgs+=("$1"); shift; checkoutAction=checkoutExistingRemote; checkoutWhat='Check out existing remote';;
	--checkout)	recursiveArgs+=("$1"); shift; checkoutAction=checkoutCreate; checkoutWhat='Check out or create';;
	--remote)	recursiveArgs+=("$1"); shift; checkoutAction=update; checkoutWhat='Update to tracked remote'; logArg=--none;;
	--update)	recursiveArgs+=("$1"); shift; checkoutAction=update; checkoutWhat='Update to tracked remote';;
	--@(gui|terminal|none))
			recursiveArgs+=("$1")
			logArg="$1"; shift;;
	--force|-f)	recursiveArgs+=("$1"); forceArg="$1"; shift;;
	--prefix)	recursiveArgs+=("$1" "$2"); shift; prefix+="$1"; noOpStatus=0; shift;;
	--dirty)	shift; isDirty=t;;
	--untracked)	shift; isUntracked=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ "$isForcedColor" ] || [ -t 1 ] || unset "${!GIT_SUBCOBR_COLOR_@}"

typeset -A selectedSubmodules=()
if [ "$isDirty" ]; then
    selectedSubmodules[$'dirty\ndummy']=t   # Add a dummy entry to prevent the entire submodule list from being iterated if there are no dirty submodules.

    while IFS=$'\n' read -r submodule
    do
	selectedSubmodules["$submodule"]=t
    done < <(git-subdirty)
fi
if [ "$isUntracked" ]; then
    selectedSubmodules[$'untracked\ndummy']=t   # Add a dummy entry to prevent the entire submodule list from being iterated if there are no submodules with untracked files.

    while IFS=$'\n' read -r submodule
    do
	selectedSubmodules["$submodule"]=t
    done < <(git-subuntracked)
fi
for submodule
do
    : ${action:=all}
    selectedSubmodules["${submodule%/}"]=t
done
: ${action:=status}

printPrefixed()
{
    local color="${1?}"; shift
    local prefix; printf -v prefix "%-${submoduleWidth}s" "${prefix}${submodule}"
    local message; printf -v message "$@"

    if [ -n "$COLUMNS" -a $submoduleWidth -gt 0 ] && type -t prefix >/dev/null && type -t fmt >/dev/null; then
	local formattedMessage="$(printf '%s\n' "$message" | \
	    fmt --width $((COLUMNS - submoduleWidth)) | \
	    prefix --first-then-indent "$prefix")"
	printf '%s%s%s\n' "$color" "$formattedMessage" "${color:+$GIT_SUBCOBR_COLOR_RESET}"
    else
	[ $submoduleWidth -gt 0 ] || prefix="${prefix}: "
	printf '%s%s%s%s\n' "$color" "$prefix" "$message" "${color:+$GIT_SUBCOBR_COLOR_RESET}"
    fi
}

getSubmoduleStatus()
{
    local submodule="${1:?}"; shift
    local isPrependAdditionalInformation="$1"; shift

    local subhash="$(git-subhash --short "$submodule" 2>/dev/null)"
    (
	cd "$submodule" || exit 3

	if git-existsbr -- "${submoduleBranches["$submodule"]}"; then
	    hasLocalBranch=t
	    remote="$(git-trackedremote "${submoduleBranches["$submodule"]}" 2>/dev/null)" || remote='origin'
	else
	    hasLocalBranch=
	    remote='origin'
	fi
	hasRemoteBranch=; git-existsbr -- "${remote:?}/${submoduleBranches["$submodule"]}" && hasRemoteBranch=t

	[ "$isPrependAdditionalInformation" ] && printf '%s\n' "$hasLocalBranch" "$hasRemoteBranch"

	isSkipped && return

	if [ "$hasLocalBranch" ]; then
	    toBranchAction='switch to'
	elif [ "$hasRemoteBranch" ]; then
	    toBranchAction='check out to a new local branch'
	else
	    toBranchAction='create new local branch'
	fi

	actionHint=
	case "$checkoutAction" in
	    checkoutStartPoint)
		if startPointAheadBehindMessage="$(git-inout --ahead-behind "${submoduleBranches["$submodule"]}" "$startPoint" 2>/dev/null)"; then
		    actionHint=" and reset: $startPointAheadBehindMessage"
		elif [ "${submoduleBranches["$submodule"]}" != "$startPoint" ] && git-equals "${submoduleBranches["$submodule"]}" "$startPoint" 2>/dev/null; then
		    actionHint=" (which is even with ${startPoint})"
		elif [ "$toBranchAction" = 'check out to a new local branch' ]; then
		    toBranchAction="check out $startPoint to a new local branch"
		fi
		;;
	    checkoutExistingRemote)
		if [ "$hasLocalBranch" ] && [ "$hasRemoteBranch" ]; then
		    if remoteAheadBehindMessage="$(git-inout --ahead-behind "${submoduleBranches["$submodule"]}" "origin/${submoduleBranches["$submodule"]}")"; then
			actionHint=" and reset: $remoteAheadBehindMessage"
		    else
			actionHint=" (which is even with origin/${submoduleBranches["$submodule"]})"
		    fi
		fi
		;;
	    update)
		[ "$hasRemoteBranch" ] && \
		    actionHint=' and update';;
	esac
	currentBranchName="$(git-brname --real-branch-only 2>/dev/null)"
	if [ "$currentBranchName" = "${submoduleBranches["$submodule"]}" ]; then
	    printPrefixed "$GIT_SUBCOBR_COLOR_NOOP" "Already on %s%s" "$currentBranchName" "$actionHint"
	elif [ -n "$currentBranchName" ]; then
	    printPrefixed "$GIT_SUBCOBR_COLOR_ACTION" "On %s; would %s %s%s" "$currentBranchName" "$toBranchAction" "${submoduleBranches["$submodule"]}" "$actionHint"
	else
	    currentRev="$(git rev-parse --short HEAD)" || exit $?
	    currentRevDescription="$(git-desc HEAD)"
	    if [ "$subhash" = "$currentRev" ]; then
		printPrefixed "$GIT_SUBCOBR_COLOR_ACTION" "Detached %s (%s); would %s %s%s" "$currentRevDescription" "$currentRev" "$toBranchAction" "${submoduleBranches["$submodule"]}" "$actionHint"
	    else
		printPrefixed "$GIT_SUBCOBR_COLOR_ACTION" "Detached %s (%s), modified from %s (%s); would %s %s%s" "$currentRevDescription" "$currentRev" "$(git-desc "$subhash")" "$subhash" "$toBranchAction" "${submoduleBranches["$submodule"]}" "$actionHint"
	    fi
	fi
    )
}

isSkipped()
{
    if [ "$checkoutAction" = checkoutStartPoint ] && ! git rev-parse --verify --quiet "${startPoint:?}" >/dev/null 2>&1; then
	printPrefixed "$GIT_SUBCOBR_COLOR_SKIP" "Skipping; no start point %s" "$startPoint"
	return 0
    elif [ "$checkoutAction" = checkoutExistingLocal ] && [ ! "$hasLocalBranch" ]; then
	printPrefixed "$GIT_SUBCOBR_COLOR_SKIP" "Skipping; no local branch %s" "${submoduleBranches["$submodule"]}"
	return 0
    elif [ "$checkoutAction" = checkoutExistingRemote ] && [ ! "$hasRemoteBranch" ]; then
	printPrefixed "$GIT_SUBCOBR_COLOR_SKIP" "Skipping; no remote branch for %s" "${submoduleBranches["$submodule"]}"
	return 0
    fi
    return 1
}

checkoutNew()
{
    local branch="${1:?}"; shift

    # > The remote used is branch’s remote (branch.<name>.remote), defaulting to
    # > origin.
    # As we don't have a local branch yet, that's origin for sure.
    local remoteBranch="origin/$branch"

    if git-existsbr -- "$remoteBranch"; then
	git-wrapper checkout $forceArg --track -b "$branch" "$remoteBranch"
    else
	git-wrapper checkout $forceArg -b "$branch"
    fi
}

checkoutStartPoint()
{
    local branch="${1:?}"; shift
    if git rev-parse --verify --quiet "${startPoint:?}" 2>/dev/null; then
	git-wrapper checkout $forceArg --track -B "$branch" "$startPoint"
    else
	printf >&2 '%sSkipping; no start point %s%s\n' "$GIT_SUBCOBR_COLOR_SKIP" "$startPoint" "$GIT_SUBCOBR_COLOR_RESET"
    fi
}

checkoutExistingLocal()
{
    local branch="${1:?}"; shift
    if git-existsbr -- "$branch"; then
	git-wrapper checkout $forceArg "$branch"
    else
	printf >&2 '%sSkipping; no local branch %s%s\n' "$GIT_SUBCOBR_COLOR_SKIP" "$branch" "$GIT_SUBCOBR_COLOR_RESET"
    fi
}

checkoutExistingRemote()
{
    local branch="${1:?}"; shift
    local remoteBranch="origin/$branch"
    if git-existsbr -- "$remoteBranch"; then
	git-wrapper checkout $forceArg --track -B "$branch" "$remoteBranch"
    else
	printf >&2 '%sSkipping; no remote branch %s%s\n' "$GIT_SUBCOBR_COLOR_SKIP" "$remoteBranch" "$GIT_SUBCOBR_COLOR_RESET"
    fi
}

checkoutCreate()
{
    local branch="${1:?}"; shift
    if git-existsbr -- "$branch"; then
	git-wrapper checkout $forceArg "$branch"
    else
	checkoutNew "$branch"
    fi
}

update()
{
    local branch="${1:?}"; shift
    local remote; remote="$(git-trackedremote "$branch")" || return $?

    local logRecursionArg='--submodule recurse'; [ "$isRecursive" ] && logRecursionArg=	# When we recursively check out, we'll show the logs of nested submodules. But if not, let logdelta do the recursion to see what changed in submodules, too.
    local record; [ "$logArg" = --none ] || record="$(git-logdelta $logArg $logRecursionArg --record)"

    if [ "$(git-brname --real-branch-only 2>/dev/null)" = "$branch" ]; then
	# Already on that branch, reset it.
	git reset ${forceArg:+--hard} "${remote}/${branch}" || return $?
    elif git-existsbr -- "$branch"; then
	# Reset and check out the branch to the revision of the tracked branch.
	git-wrapper checkout $forceArg -B "$branch" "${remote}/${branch}" || return $?
    else
	checkoutNew "$branch"
	return	# No changes to log here.
    fi

    [ -z "$record" ] || git-logdelta $logArg $logRecursionArg --from-record "$record"
}

isZebra=
zebraToggle()
{
    [ -n "$GIT_SUBCOBR_COLOR_ZEBRA" ] || return

    if [ "$isZebra" ]; then
	isZebra=
	printf %s "${GIT_SUBCOBR_COLOR_RESET}[0K" # Clear to end of line because Git command output has introduced a newline, and without the clear everything in the following line that is not overwritten by the following message will keep the zebra background.
    else
	isZebra=t
	printf %s "$GIT_SUBCOBR_COLOR_ZEBRA"
    fi
}

unset currentBranchName
let submoduleWidth=0
typeset -A submoduleBranches=()
while IFS=$'\t' read -r submodule branch
do
    submoduleBranches["$submodule"]="$branch"

    [ $submoduleWidth -lt ${#submodule} ] && submoduleWidth=${#submodule}
done < <(git-subtrackedbr)
if [ ${#submoduleBranches[@]} -eq 0 ]; then
    echo >&2 'No submodules'
    exit $noOpStatus
fi
let submoduleWidth+=1	# Need to leave one whitespace.

typeset -A uninitializedSubmodules=()
while IFS=$'\n' read -r submodule
do
    uninitializedSubmodules["$submodule"]=t
done < <(git-submodule-uninitialized --print)	# Don't recurse, as we're matching against the direct submodules from .gitmodules; further recursions will check their own nested submodules.

status=
readarray -t submoduleList < <(printf '%s\n' "${!submoduleBranches[@]}" | sort)
for submodule in "${submoduleList[@]}"
do
    [ ${#selectedSubmodules[@]} -eq 0 ] || [ "${selectedSubmodules["$submodule"]}" ] || continue

    case "$action" in
	status)
	    zebraToggle

	    if [ "${uninitializedSubmodules["$submodule"]}" ]; then
		printPrefixed "$GIT_SUBCOBR_COLOR_ERROR" "hasn't been initialized yet"
		status=1
		continue
	    fi

	    getSubmoduleStatus "$submodule" && : ${status:=0} || status=$?

	    continue
	    ;;
	query)
	    if [ "${uninitializedSubmodules["$submodule"]}" ]; then
		choice="$(userchoiceFromList --keep-prompt --question "${prefix}${submodule} hasn't been initialized yet" --no-cancel --ignore-case \
		    '[I]nitialize now' '[S]kip' '[A]bort')"
		case "$choice" in
		    'Initialize now')
			git submodule update --init --recursive -- "$submodule" || { status=$?; continue; }
			;;
		    'Skip')
			continue;;
		    'Abort')
			exit 1;;
		    *)	printf >&2 'ASSERT: Invalid choice: %s\n' "$choice"; exit 3;;
		esac
	    fi

	    {
		IFS=$'\n' read -r hasLocalBranch
		IFS=$'\n' read -r hasRemoteBranch
		IFS=$'\n' read -r submoduleStatus
	    } < <(submoduleWidth=0 getSubmoduleStatus "$submodule" t)

	    isSkipped && continue

	    choice="$(userchoiceFromList --keep-prompt --question "$submoduleStatus" --no-cancel --ignore-case \
		"$checkoutWhat" '[R]eset to superproject' '[L]eave as-is')"
	    case "$choice" in
		"$checkoutWhat")
		    # This is the default action.
		    ;;
		'Reset to superproject')
		    git submodule update --init --checkout $forceArg --recursive -- "$submodule" && : ${status:=0} || status=$?
		    continue
		    ;;
		'Leave as-is')
		    : ${status:=0}
		    continue
		    ;;
		*)  printf >&2 'ASSERT: Invalid choice: %s\n' "$choice"; exit 3;;
	    esac
	    ;;
	all)
	    if [ "${uninitializedSubmodules["$submodule"]}" ]; then
		printf "%s hasn't been initialized yet\\n" "${prefix}${submodule}"
		exit 1
	    fi

	    zebraToggle
	    ;;
	*)  printf >&2 'ASSERT: Invalid action: %s\n' "$action"; exit 3;;
    esac

    (
	cd "$submodule" || exit 3

	printf -v header "%-${submoduleWidth}s" "${prefix}${submodule}"
	$checkoutAction "${submoduleBranches["$submodule"]}" 2>&1 | HEADER_COLON='' HEADER_SEPARATOR='' withHeader --no-newline --no-color "$header" || exit $?

	if [ "$isRecursive" ]; then
	    typeset -a selectedNestedSubmodules=()
	    for s in "${!selectedSubmodules[@]}"
	    do
		[[ "$s" =~ ^"$submodule"/(.*)$ ]] && \
		    selectedNestedSubmodules+=("${BASH_REMATCH[1]}")
	    done
	    "${BASH_SOURCE[0]}" "${recursiveArgs[@]}" --prefix "${submodule}/" -- "${selectedNestedSubmodules[@]}"
	fi
    ) && : ${status:=0} || status=$?
done
exit ${status:-$noOpStatus}
