#!/bin/bash

: ${GIT_SUBDO_SUBMODULE_END=;}

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: [GIT_SUBDO_EXIT_STATUS_NO_SUBMODULES=99] %q %s%s %s\n' "$(basename "$1")" '[--recursive] [--no-pager] [--no-header]' "${hasProgressNotification:+ [--progress SINK]}" "[-i|--interactive] [--separate-errors] [--no-git-color] [--single-success] [--status-99-is-noop] [--abort-on-failure|-X|--abort-on EXIT_STATUS] [<revision-range>] [--since <date>] [--after <date>] [--for -|--for SUBMODULE [...] ${GIT_SUBDO_SUBMODULE_END}] [-j|--include-superproject|-J|--include-superproject-last] [[--not] -P|--predicate-command \"COMMANDLINE\" [...]] [-c|--command \"COMMANDLINE\" [-c ...]] [[--] SIMPLECOMMAND [...]] [-?|-h|--help]"
    echo
    printf 'Usage: [GIT_SUBDO_EXIT_STATUS_NO_SUBMODULES=99] %q %s%s %s\n' "$(basename "$1")" '--repeat [--no-pager] [--no-header]' "${hasProgressNotification:+ [--progress SINK]}" '[-i|--interactive] [--separate-errors] [--no-git-color] [--single-success] [--status-99-is-noop] [--abort-on-failure|-X|--abort-on EXIT_STATUS] [-j|--include-superproject|-J|--include-superproject-last] [-c|--command "COMMANDLINE" [-c ...]] [[--] SIMPLECOMMAND [...]]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule.
An alternative to "git submodule foreach".
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
Puts a header line (unless --no-header) that contains the submodule name before
the command output.
    --recursive		Do recurse into submodules of submodules; like
			"git submodule foreach", this just processes the direct
			submodules of the current repo by default.
    --no-pager		Do not page the output (so contents will scroll out of
			view if there's too much output).
    --no-header		Do not output the header line before command output (and
			no separating empty line after it).${hasProgressNotification:+
    --progress SINK	Report the current submodule (and count + percentage)
			through one of the SINKs of the progressNotification
			command.}
    --interactive|-i	For use with interactive COMMANDs that query the user or
			open an editor; combination of --no-pager --no-header${hasProgressNotification:+
			and --progress addendum}.
    --separate-errors	Do not combine command output and command errors into
			one (paged) stream. Commands that just cause error
			output won't have a header then. Error output will
			remain on its separate file descriptor and will not be
			paged. Useful if you want to suppress errors or handle
			them separately.
    --no-git-color	Do not pass a --color=... to "git SIMPLECOMMAND". (For
			COMMANDLINE you have to insert "\${gitColorArg[@]}"
			yourself.)
    --abort-on-failure	Abort iteration when COMMAND fails.
    --abort-on|-X EXIT_STATUS
			Abort iteration when COMMAND exits with EXIT_STATUS.
    --single-success	Exit status is 0 if COMMAND succeeded in at least one
			submodule.
    --status-99-is-noop Exit status is the last failure, but 99 signifies no
			action or inapplicability, and that is only returned if
			all invocations of COMMAND return that.
    <revision-range>|--since <date>|--after <date>
			Only consider submodules that have undergone changes in
			the passed revision range.
    --for SUBMODULE [...] $GIT_SUBDO_SUBMODULE_END
			Only consider the following SUBMODULE(s); i.e. all
			following arguments until an argument consisting of '${GIT_SUBDO_SUBMODULE_END}'
			is encountered.
    --for -		Only consider the SUBMODULE(s) read from stdin.
    --include-superproject|-j
			First execute COMMAND on the superproject itself.
    --include-superproject-last|-J
			Execute COMMAND on the superproject itself after all
			submodules.
    --predicate-command|-P CMD
			Skip submodules where CMD (executed in the submodule
			root) fails. The string {} is replaced with the relative
			path to the submodule; all variables from "git submodule
			foreach" are available as well.
    --not		Invert the predicate so that those submodules are
			skipped where CMD succeeds.
    --repeat		Consider the same submodules as for the last iteration.
			Does not include the superproject; it can still be added
			separately via --include-superproject[-last].
			Useful when these were based on a predicate that has
			now been changed (due to the previously executed
			COMMANDs).
    --command|-c CMD	Execute the passed command line. When this is a simple
			Git command, it can also be passed as such:
			    $(basename "$1") [...] [--] SIMPLECOMMAND
Note: For paging and headers, this command has to control Git's color output.
Pass --no-git-color if "git SIMPLECOMMAND" does not support the --color=...
arguments. (For COMMANDLINE you have to insert "\${gitColorArg[@]}" yourself.)
You can still pass --color=always if you pipe this command's output yet still
want coloring of headers.

EXIT STATUS
Returns ${GIT_SUBDO_EXIT_STATUS_NO_SUBMODULES:-99} if no submodules found.
Returns the last non-successful exit status. With --single-success,
non-successful executions are ignored unless all of them fail. In other words,
exit status is 0 if at least one command succeeded.
Returns 4 if --repeat but no previous submodule iteration.
HELPTEXT
}

obtainSubmodulesFromRange()
{
    submoduleArgs+=(--for)
    local submodule; while IFS=$'\n' read -r submodule
    do
	submodules["$submodule"]=t
	submoduleArgs+=("$submodule")
    done < <(git-showsubmodules "$@")
    submoduleArgs+=(\;)
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
typeset -a submoduleRecurseArg=()
typeset -a submoduleArgs=()
typeset -A submodules=()
abortStatus=
abortComparison=-eq
isSingleSuccess=
isStatus99Noop=
predicateComparison=-eq
predicateInversionArg=
typeset -a predicateCommands=()
typeset -a commands=()
isHeader=; type -t withHeader >/dev/null && isHeader=t
progressSink=
isIncludeSuperproject=
isIncludeSuperprojectLast=
isInteractive=
errorRedir='2>&1'
isGitColor=t
typeset -a colorArg=()
isRepeat=
subdoCommandName='subdo'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		shift; printLongUsage "$0"; exit 0;;
	--abort-on-failure)	shift; abortComparison=-ne; abortStatus=0;;
	--abort-on|-X)		shift; abortStatus="$1"; shift;;
	--single-success)	shift; isSingleSuccess=t;;
	--status-99-is-noop)	shift; isStatus99Noop=t;;
	--predicate-command|-P)	shift; predicateCommands+=(${predicateCommands:+&&} "$1"); shift;;
	--not)			predicateInversionArg="$1"; shift; predicateComparison=-ne;;
	--command|-c)		shift; commands+=(${commands:+;} "$1"); shift;;
	--recursive)		shift; submoduleRecurseArg=(--recursive);;
	--no-pager)		shift; pager=();;
	--no-header)		shift; isHeader=;;
	--progress)		shift; progressSink="$1"; shift;;
	--interactive|-i)	shift; isInteractive=t; pager=(); isHeader=; progressSink='addendum';;
	--separate-errors)	shift; errorRedir='';;
	--no-git-color)		shift; isGitColor=;;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--repeat)		shift; isRepeat=t;;
	--subdo-command-name)	shift; subdoCommandName="${1:?}"; shift;;   # Internal parameter to avoid having to write shell wrappers around all of my subdo aliases.

	--since|--after)	obtainSubmodulesFromRange "$1" "$2"; shift; shift;;
	*..*)			obtainSubmodulesFromRange "$1"; shift;;
	--for)			submoduleArgs+=("$1"); shift
				if [ "$1" = - ]; then
				    shift
				    while IFS=$'\n' read -r line
				    do
					submoduleArgs+=("$line")
					submodules["$line"]=t
				    done
				    submoduleArgs+=("$GIT_SUBDO_SUBMODULE_END")
				else
				    while [ $# -gt 0 -a "$1" != "$GIT_SUBDO_SUBMODULE_END" ]
				    do
					submoduleArgs+=("$1")
					submodules["$1"]=t
					shift
				    done
				    if [ $# -eq 0 ]; then
					echo "ERROR: --for must be concluded with '${GIT_SUBDO_SUBMODULE_END}'"; echo; printUsage "$0"
					exit 2
				    fi >&2
				    submoduleArgs+=("$1")
				    shift
				fi
				;;

	--include-superproject|-j)
				shift; isIncludeSuperproject=t;;
	--include-superproject-last|-J)
				shift; isIncludeSuperproject=t; isIncludeSuperprojectLast=t;;
	--collect)		shift
				[ ${#submodules[@]} -eq 0 ] || [ "${submodules["${sm_path:?}"]}" ] || exit 0

				predicateOutput=
				if [ $# -gt 0 ]; then
				    predicateOutput="$(eval "${@//\{\}/$sm_path}")"
				    [ $? $predicateComparison 0 ] || exit 0
				fi
				printf '%s=%q; ' dirspec "${PWD:?}" name "${name:?}" sm_path "${sm_path:?}" displaypath "${displaypath:?}" sha1 "${sha1:?}" toplevel "${toplevel:?}" predicateOutput "${predicateOutput?}"; echo

				exit
				;;
	--)			shift; break;;
	-*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)			break;;
    esac
done
typeset -a uncoloredSimpleCommand=()
while [ $# -ne 0 ]
do
    case "$1" in
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	*)			uncoloredSimpleCommand+=("$1"); shift;;
    esac
done
set -- "${uncoloredSimpleCommand[@]}"

# With piping into withHeader / pager, we need to explicitly enable color for
# Git, unless this command's output itself is redirected. Also don't do this if
# the user explicitly turned off color.
gitColorArg=()
if [ -n "$pager" -o -n "$isHeader" ] && isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    colorArg=(--color=always)	# Force for withHeader
    [ "$isGitColor" ] && gitColorArg=(--color=always)	# Force for Git
fi

typeset -a gitCommand=(git-wrapper)
if [ $# -gt 0 ]; then
    if [ ${#gitColorArg[@]} -gt 0 ]; then
	# Simply appending gitColorArg doesn't work; many Git commands have a
	# special <path> or <commit> part at the end. Place it just behind the
	# Git subcommand by iterating arguments in the same way as the various
	# git-*-command metaprograms, and moving anything that is in front from
	# $@ to gitCommand.
	case "$1" in
	    [^-]*-command)  gitCommand+=("$1"); shift
			    while [ $# -ne 0 ]
			    do
				case "$1" in
				    --)		break;;
				    -*)		gitCommand+=("$1"); shift;;
				    *)		gitCommand+=("$1"); shift; break;;
				esac
			    done
			    ;;
	    *)		    while [ $# -ne 0 ]
			    do
				case "$1" in
				    -c) gitCommand+=("$1" "$2"); shift; shift;;
				    *)	gitCommand+=("$1"); shift; break;;
				esac
			    done
	esac
	gitCommand+=("${gitColorArg[@]}")
    fi

    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "${gitCommand[@]}" "$@"
    commands+=(${commands:+;} "${quotedSimpleCommand% }")
fi
if [ ${#commands[@]} -eq 0 ]; then
    isHeader=
    commands=('echo "${displaypath:-$superprojectName}"')
fi
readonly RUNTIME_DIRSPEC="${XDG_RUNTIME_DIR:?}/git-extensions"
readonly lastSubmoduleStoreFilespec="${RUNTIME_DIRSPEC}/${subdoCommandName:?}${GIT_SUBDO_STORE_ID:+-}${GIT_SUBDO_STORE_ID}${GIT_SUBDO_STORE_SUBJECT:+-}${GIT_SUBDO_STORE_SUBJECT-$(pathAsFilename --as-is --encode -- "$(git root)")}"
if [ "$isRepeat" ]; then
    if [ ${#submoduleArgs[@]} -gt 0 ]; then
	echo 'ERROR: --repeat cannot be combined with --for / a range.'
	exit 2
    fi >&2
    { readarray -t submoduleEnvironments < "$lastSubmoduleStoreFilespec"; } 2>/dev/null
    if [ ${#submoduleEnvironments[@]} -eq 0 ]; then
	echo 'ERROR: No submodule iteration to repeat.'
	exit 4
    fi
else
    if [ ${#submoduleArgs[@]} -gt 0 -a ${#submodules[@]} -eq 0 ]; then
	echo 'No SUBMODULE(s) given to --for / obtained from the passed range.'
	exit 2
    fi >&2

    printf -v quotedScriptFilespec %q "${BASH_SOURCE[0]}"
    quotedSubmoduleArgs=; [ ${#submoduleArgs[@]} -eq 0 ] || printf -v quotedSubmoduleArgs ' %q' "${submoduleArgs[@]}"
    printf -v quotedPredicateCommands ' %q' "${predicateCommands[*]}"
    readarray -t submoduleEnvironments < <(git submodule foreach --quiet "${submoduleRecurseArg[@]}" "$quotedScriptFilespec${quotedSubmoduleArgs}${predicateInversionArg:+ }${predicateInversionArg} --collect${quotedPredicateCommands}")
    if [ ${#submoduleEnvironments[@]} -eq 0 ]; then
	[ -n "$GIT_SUBDO_EXIT_STATUS_NO_SUBMODULES" ] || echo >&2 "No ${predicateCommands[@]:+such }submodules found."
	exit ${GIT_SUBDO_EXIT_STATUS_NO_SUBMODULES:-99}
    fi

    [ -d "$RUNTIME_DIRSPEC" ] \
	|| mkdir --parents -- "$RUNTIME_DIRSPEC" \
	&& printf '%s\n' "${submoduleEnvironments[@]}" > "$lastSubmoduleStoreFilespec"
fi

if [ "$isIncludeSuperproject" ]; then
    superprojectName="$(git-wcname)"
    printf -v superprojectEnvironment '%s=%q; ' dirspec "${PWD:?}" name 'superproject' sm_path '.' displaypath '' sha1 "$(git rev-parse HEAD)" toplevel "${PWD:?}" predicateOutput ''
    [ "$isIncludeSuperprojectLast" ] \
	&& submoduleEnvironments=("${submoduleEnvironments[@]}" "$superprojectEnvironment") \
	|| submoduleEnvironments=("$superprojectEnvironment" "${submoduleEnvironments[@]}")
fi

if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
    exec 3> >(progressNotification --to "$progressSink" --prepend-count 'submodule' --count-to "${#submoduleEnvironments[@]}" 2>/dev/null)

    reportProgress()
    {
	trap 'reportProgress() { :; }; trap PIPE' PIPE
	printf '%s\n' "$*" >&3 2>/dev/null  # Silence "printf: write error: Broken pipe"
    }
else
    reportProgress() { :; }
fi

abortIfDesired()
{
    local status="${1:?}"; shift
    [ -n "$abortStatus" ] || return
    [ "$status" $abortComparison $abortStatus ] && exit $status
}

set -o pipefail
subdo()
{
    : ${GIT_SUBDO_HEADER_ID:="subdo-$$-$RANDOM"}
    local environment isSuccess= status=
    for environment in "${submoduleEnvironments[@]}"
    do
	eval "$environment" || exit 3
	if ! cd "${dirspec:?}" 2>/dev/null; then
	    printf >&2 'ERROR: Cannot chdir to %s!\n' "$dirspec"
	    status=1; continue
	fi

	local header="${isIncludeSuperproject:+${superprojectName}${displaypath:+/}}${displaypath?}"
	reportProgress "${header:?}"
	[ ! "$isInteractive" ] || header "${colorArg[@]}" --id "$GIT_SUBDO_HEADER_ID" -- "${header:?}"

	(eval "${isHeader:+{}" ${predicateOutput:+printf %s\\\\n \"\$predicateOutput\"; }"${commands[@]}" "${isHeader:+; \} $errorRedir | withHeader "${colorArg[@]}" --id '$GIT_SUBDO_HEADER_ID' -- '${header:?}'}")
	local newStatus=$?

	abortIfDesired $newStatus

	[ $newStatus -eq 0 ] && isSuccess=t
	if [ "$isStatus99Noop" ]; then
	    status=$(status99Reduction "$status" $newStatus)
	else
	    case $newStatus in
		0)  : ${status:=0};;
		*)  status=$newStatus;;
	    esac
	fi
    done

    if [ "$isSingleSuccess" ] && [ "$isSuccess" ]; then
	return 0
    else
	return ${status:-${GIT_SUBDO_EXIT_STATUS_NO_SUBMODULES:-99}}
    fi
}

eval "subdo ${pager:+$errorRedir |}" '"${pager[@]}"'
