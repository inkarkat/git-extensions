#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Show a list of all (initialized and at least once updated) submodules.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--recursive] [-r|--revision REVISION] [-?|-h|--help]'
}

revision=
isRecursive=
prefix=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--revision|-r)	shift; revision="$1"; shift;;
	--recursive)	shift; isRecursive=t;;
	--prefix)	shift; prefix="${prefix}$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

listSubmodules()
{
    if [ -z "$revision" -o "$revision" = HEAD ]; then
	exec git submodule foreach --quiet 'echo $sm_path'
    else
	comm -12 \
		<(git config --blob "${revision}:.gitmodules" --get-regexp '^submodule\..*\.path$' 2>/dev/null \
		    | sed -e 's/^.*\.path //' \
		    | sort
		) \
		<(git ls-tree -r "$revision" --name-only \
		    | sort
		) \
	    | grep --invert-match --fixed-strings --line-regexp --file <(git-submodule-uninitialized --print)
    fi
}

listOneLevel()
{
    if [ "$isRecursive" ]; then
	if [ -z "$revision" -o "$revision" = HEAD ]; then
	    exec git submodule foreach --recursive --quiet 'echo $displaypath'
	else
	    local submodule; while IFS=$'\n' read -r submodule
	    do
		printf '%s\n' "$submodule"

		local subhash
		if subhash="$(git-subhash "$revision" "$submodule" 2>/dev/null)" \
		    && [ -d "$submodule" ]
		then
		    (cd "$submodule" && exec "${BASH_SOURCE[0]}" --revision "${subhash:?}" --recursive --prefix "${submodule}/")
		else
		    printf >&2 'ERROR: Cannot revisit submodule %s%s in revision %s; it does not exist any longer.\n' "$prefix" "$submodule" "$subhash"
		fi
	    done < <(listSubmodules "$@")
	fi
    else
	listSubmodules "$@"
    fi
}

eval 'listOneLevel "$@"' "${prefix:+| prefix "$prefix"}"
