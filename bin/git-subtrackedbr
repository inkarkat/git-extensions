#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Print the tracked branch (submodule.<name>.branch) from .gitmodules [for
SUBMODULE(s)].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[SUBMODULE ...] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac

currentBranchName="$(git-brname --real-branch-only 2>/dev/null)"
readarray -t existingSubmodules < <(git-sublist)

IFS=$'\n'
git config --file .gitmodules -l 2>/dev/null | \
    awk -F = \
	-v "currentBranchName=${currentBranchName//\\/\\\\}" \
	-v "selectedSubmoduleList=${*//\\/\\\\}" \
	-v "existingSubmoduleList=${existingSubmodules[*]//\\/\\\\}" \
'
BEGIN {
    selectedSubmoduleNum = split(selectedSubmoduleList, tmp, "\n")
    for (k in tmp) selectedSubmodules[tmp[k]] = 1
    existingSubmoduleNum = split(existingSubmoduleList, existingSubmodules, "\n")
}
{
    key = $1
    $1 = ""; sub(OFS, "")
    submodule = gensub(/^submodule\.|\.[^.]+$/, "", "g", key)
}
key ~ /.path$/ {
    path[submodule] = $0
}
key ~ /.branch$/ {
    branch[submodule] = ($0 == "." ? currentBranchName : $0)
}
END {
    for (i = 1; i <= existingSubmoduleNum; ++i) {
	submodule = existingSubmodules[i]
	if (selectedSubmoduleNum == 0 || submodule in selectedSubmodules) {
	    if (path[submodule] == "") {
		print "ERROR: Could not locate submodule \"" submodule "\" in .gitmodules." > "/dev/stderr"
	    } else {
		print (selectedSubmoduleNum == 1 ? "" : path[submodule] "\t") (branch[submodule] == "" ? "master" : branch[submodule]) # "git submodule update --remote" defaults to master.
	    }
	}
    }
}'
