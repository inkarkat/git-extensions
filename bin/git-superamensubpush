#!/bin/bash

readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

printUsage()
{
    cat <<HELPTEXT
Reference this submodule's current revision / all submodules that are on the
same branch as the superproject and amend that to the superproject's last commit
without re-editing the message, then push both / all [to REMOTE].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[REMOTE] [<submodule-push-args>] [-?|-h|--help]'
}
pushCommand=push
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    origin)		shift; pushCommand=opush;;
    upstream)		shift
			pushCommand=upush
			if [ "$1" = origin ]; then
			    shift; pushCommand=uopush
			fi
			;;
esac

if git issubmodule; then
    git superamen || exit $?

    # Note: Need to force-push the amended superproject commit.
    exec git-supersubdo --subdo-command-name "${scriptName#git-}" --interactive --super-command "git-wrapper $pushCommand --force" -- "$pushCommand" "$@"
else
    readarray -t sameBranchSubmodules < <(git subsamebrdo --subdo-command-name "${scriptName#git-}")
    if [ ${#sameBranchSubmodules[@]} -eq 0 ]; then
	echo >&2 'ERROR: No submodule is on the same branch as the superproject.'
	exit 99
    fi
    git amen -- "${sameBranchSubmodules[@]}" || exit $?

    git subsamebrdo --subdo-command-name "${scriptName#git-}" --no-git-color --interactive --status-99-is-noop $pushCommand "$@"
    case $? in
	0|99)	header "$(git-wcname)"
		git-wrapper $pushCommand --force
		;;
	*)	exit $?
    esac
fi
