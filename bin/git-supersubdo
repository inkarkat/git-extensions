#!/bin/bash
set -o pipefail

: ${GIT_SUBDO_SUBMODULE_END=;}

readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-pager] [--no-header] [-i|--interactive] [--separate-errors] [--no-git-color] [--toplevel] [--super-command "COMMANDLINE"] [--submodule-command "COMMANDLINE"|--no-submodule-command] [<subdo-args> ...] [-c|--command "COMMANDLINE" [-c ...]] [[--] SIMPLECOMMAND [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute "git SIMPLECOMMAND" and/or COMMANDLINE in both the current submodule (if
in one) and (if that succeeds) also in its superproject, or in all submodules
that are on the same branch as the superproject (if not in a submodule) and (if
that succeeds) also in the current project.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
Puts a header line (unless --no-header) that contains the repo name before the
command output.
    --no-pager		Do not page the output (so contents will scroll out of
			view if there's too much output).
    --no-header		Do not output the header line before command output (and
			no separating empty line after it).
    --interactive|-i	For use with interactive COMMANDs that query the user or
			open an editor; combination of --no-pager --no-header.
    --separate-errors	Do not combine command output and command errors into
			one (paged) stream. Commands that just cause error
			output won't have a header then. Error output will
			remain on its separate file descriptor and will not be
			paged. Useful if you want to suppress errors or handle
			them separately.
    --no-git-color	Do not pass a --color=... to "git SIMPLECOMMAND". (For
			COMMANDLINE you have to insert "\${gitColorArg[@]}"
			yourself.)
    --toplevel		When executed from a submodule, use the topmost
			superproject, not the immediate one. (An intermediate
			submodule is always recognized as a submodule.)
    --super-command CMD	Execute the passed command line only for the
			superproject.
    --submodule-command CMD
			Execute the passed command line only for the current
			submodule.
    --no-submodule-command
			Any passed command is executed for the superproject
			only. (This is used by the git-superdo wrapper.)
    --command|-c CMD	Execute the passed command line for both submodule and
			superproject; if special super/sub command(s) have
			already been passed, this only applies to the other one.
			When this is a simple Git command, it can also be passed
			as such:
			    $(basename "$1") [...] [--] SIMPLECOMMAND
Note: For paging and headers, this command has to control Git's color output.
Pass --no-git-color if "git SIMPLECOMMAND" does not support the --color=...
arguments. (For COMMANDLINE you have to insert "\${gitColorArg[@]}" yourself.)
You can still pass --color=always if you pipe this command's output yet still
want coloring of headers.
HELPTEXT
}
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
isHeader=; type -t withHeader >/dev/null && isHeader=t
isInteractive=
errorRedir='2>&1'
isGitColor=t
typeset -a colorArg=()
isNeedEval=
isSubmoduleCommands=t
typeset -a superCommands=()
typeset -a subCommands=()
typeset -a subdoArgs=()
typeset -a superprojectArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-pager)		shift; pager=();;
	--no-header)		subdoArgs+=("$1"); shift; isHeader=;;
	--interactive|-i)	subdoArgs+=("$1"); shift; isInteractive=t; pager=(); isHeader=;;
	--separate-errors)	subdoArgs+=("$1"); shift; errorRedir='';;
	--abort-on-failure|--single-success|--status-99-is-noop|--not|--recursive|*..*)
				subdoArgs+=("$1"); shift;;
	--abort-on|-X|--predicate-command|-P|--progress|--since|--after)
				subdoArgs+=("$1" "$2"); shift; shift;;
	--for)			subdoArgs+=("$1"); shift
				if [ "$1" = - ]; then
				    subdoArgs+=("$1"); shift
				else
				    while [ $# -gt 0 -a "$1" != "$GIT_SUBDO_SUBMODULE_END" ]
				    do
					subdoArgs+=("$1")
					shift
				    done
				    if [ $# -eq 0 ]; then
					echo "ERROR: --for must be concluded with '${GIT_SUBDO_SUBMODULE_END}'"; echo; printUsage "$0"
					exit 2
				    fi >&2
				    subdoArgs+=("$1")
				    shift
				fi
				;;
	--repeat)		subdoArgs+=("$1");;
	--subdo-command-name)	subdoArgs+=("$1" "${2?}"); shift; shift;;   # Internal parameter to avoid having to write shell wrappers around all of my subdo aliases.=empty(InsertAllCompletions#CompleteFunc#Set('BuiltInCompletes#CompletePrev',1)) && pumvisible() ? "\<Up>" : ""
	--no-git-color)		shift; isGitColor=;;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--command|-c)	shift
			if [ ${#superCommands[@]} -eq 0 -a ${#subCommands[@]} -gt 0 ] || [ ! "$isSubmoduleCommands" ]; then
			    superCommands+=(${superCommands:+;} "$1")
			elif [ ${#superCommands[@]} -gt 0 -a ${#subCommands[@]} -eq 0 ]; then
			    subCommands+=(${subCommands:+;} "$1")
			else
			    superCommands+=(${superCommands:+;} "$1")
			    subCommands+=(${subCommands:+;} "$1")
			fi
			isNeedEval=t
			shift
			;;
	--toplevel)	shift; superprojectArgs+=(--print-toplevel);;
	--super-command)
			shift; superCommands+=(${superCommands:+;} "$1"); isNeedEval=t; shift;;
	--submodule-command)
			shift; subCommands+=(${subCommands:+;} "$1"); isNeedEval=t; shift;;
	--no-submodule-command)
			shift; isSubmoduleCommands=;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
typeset -a uncoloredSimpleCommand=()
while [ $# -ne 0 ]
do
    case "$1" in
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	*)			uncoloredSimpleCommand+=("$1"); shift;;
    esac
done
set -- "${uncoloredSimpleCommand[@]}"

# With piping into withHeader / pager, we need to explicitly enable color for
# Git, unless this command's output itself is redirected. Also don't do this if
# the user explicitly turned off color.
gitColorArg=()
if [ -n "$pager" -o -n "$isHeader" ] && isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    colorArg=(--color=always)	# Force for withHeader
    [ "$isGitColor" ] && gitColorArg=(--color=always)	# Force for Git
fi

typeset -a gitCommand=(git-wrapper)
if [ $# -gt 0 ]; then
    if [ ${#gitColorArg[@]} -gt 0 ]; then
	# Simply appending gitColorArg doesn't work; many Git commands have a
	# special <path> or <commit> part at the end. Place it just behind the
	# Git subcommand by iterating arguments in the same way as the various
	# git-*-command metaprograms, and moving anything that is in front from
	# $@ to gitCommand.
	case "$1" in
	    [^-]*-command)  gitCommand+=("$1"); shift
			    while [ $# -ne 0 ]
			    do
				case "$1" in
				    --)		break;;
				    -*)		gitCommand+=("$1"); shift;;
				    *)		gitCommand+=("$1"); shift; break;;
				esac
			    done
			    ;;
	    *)		    while [ $# -ne 0 ]
			    do
				case "$1" in
				    -c) gitCommand+=("$1" "$2"); shift; shift;;
				    *)	gitCommand+=("$1"); shift; break;;
				esac
			    done
	esac
	gitCommand+=("${gitColorArg[@]}")
    fi

    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "${gitCommand[@]}" "$@"
	if [ ${#superCommands[@]} -eq 0 -a ${#subCommands[@]} -gt 0 ] || [ ! "$isSubmoduleCommands" ]; then
	    superCommands+=(${superCommands:+;} "${quotedSimpleCommand% }")
	elif [ ${#superCommands[@]} -gt 0 -a ${#subCommands[@]} -eq 0 ]; then
	    subCommands+=(${subCommands:+;} "${quotedSimpleCommand% }")
	else
	    superCommands+=(${superCommands:+;} "${quotedSimpleCommand% }")
	    subCommands+=(${subCommands:+;} "${quotedSimpleCommand% }")
	fi
    elif [ ! "$isSubmoduleCommands" ]; then
	superCommands=("${gitCommand[@]}" "$@")
    else
	superCommands=("${gitCommand[@]}" "$@")
	subCommands=("${gitCommand[@]}" "$@")
    fi
fi
if [ ${#superCommands[@]} -eq 0 -a ${#subCommands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command|--super-command|--submodule-command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
fi >&2
git issubmodule \
    && action=fromSubmodule \
    || action=fromSuperproject

execute()
{
    [ ! "$isInteractive" ] || header "${colorArg[@]}" --id "$GIT_SUPERSUBDO_HEADER_ID" -- "$header"

    if [ "$isNeedEval" ]; then
	typeset -a c=("$@")
    else
	typeset -a c=('"$@"')
    fi
    (eval "${isHeader:+{}" "${c[@]}" "${isHeader:+; \} $errorRedir | withHeader "${colorArg[@]}" --id '$GIT_SUPERSUBDO_HEADER_ID' -- '$header'}")
}

: ${GIT_SUPERSUBDO_HEADER_ID:="supersubdo-$$-$RANDOM"}

fromSubmodule()
{
    submoduleRoot="$(git root)" || exit $?
    superprojectRoot="$(git superproject "${superprojectArgs[@]}")" || exit 3

    if [ ${#subCommands[@]} -gt 0 ]; then
	cd "$submoduleRoot" || exit 3
	header="$(git-supersubpath)"
	execute "${subCommands[@]}" || exit $?
    fi

    if [ ${#superCommands[@]} -gt 0 ]; then
	cd "$superprojectRoot" || exit 3
	header="../$(git-wcname)"
	execute "${superCommands[@]}" || exit $?
    fi
}

fromSuperproject()
{
    local superprojectName="$(git-wcname)"
    if [ ${#subCommands[@]} -gt 0 ]; then
	local subdoCommand; [ "$isNeedEval" ] \
	    && subdoCommand="${subCommands[*]} " \
	    || printf -v subdoCommand '%q ' "${subCommands[@]}"

	HEADER_PREFIX+="${superprojectName}/" \
	GIT_SUBDO_HEADER_ID="$GIT_SUPERSUBDO_HEADER_ID" \
	    git subsamebrdo --subdo-command-name "${scriptName#git-}" --no-pager "${colorArg[@]}" "${subdoArgs[@]}" --command "${subdoCommand% }" || exit $?
    fi

    if [ ${#superCommands[@]} -gt 0 ]; then
	header="$superprojectName"
	execute "${superCommands[@]}" || exit $?
    fi
}

eval "\$action ${pager:+$errorRedir |}" '"${pager[@]}"'
