#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-pager] [--no-header] [-p|--super-base SUPER-COMMIT] [-r|--remote SUB-REMOTE] [-b|--submodule-base SUB-BRANCH] [--stat|--ahead-behind [--indicator-only]|--files|--submodules] [--] [-|SUBMODULE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show incoming and outgoing commit logs between the commit recorded in the
superproject [in SUPER-COMMIT] for each submodule and that submodule's master
branch [or SUB-BRANCH].
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --no-pager		Do not page the output (so contents will scroll out of
			view if there's too much output).
    --no-header		Do not output the header line before each commit log
			(and no separating empty line after it).
    --super-base|-p SUPER-COMMIT
			Use submodules as recorded in SUPER-COMMIT (instead of
			what is currently checked out).
    --submodule-base|-b SUB-BRANCH
			Compare the recorded submodule reference with SUB-BRANCH
			in each submodule (default: master).
    --remote|-r SUB-REMOTE
			Compare with SUB-BRANCH in SUB-REMOTE. Same as
			--submodule-base SUB-REMOTE/SUB-BRANCH.
    --stat|--ahead-behind [--indicator-only]|--files|--submodules
			Arguments around git-inout output.
HELPTEXT
}

typeset -a colorArg=(--color=always)
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ ! -t 1 ]; then
    colorArg=()
    pager=()
fi
isHeader=; type -t withHeader >/dev/null && isHeader=t
typeset -a superBase=()
submoduleRemote=
submoduleBase=
typeset -a inoutArgs=()
unset submodules
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-pager)	shift; pager=();;
	--no-header)	shift; isHeader=;;
	--color=auto)	shift;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1" "$2"); shift; shift;;

	--super-base|-p)
			shift; superBase=("${1:?}"); shift;;
	--submodule-base|-b)
			shift; submoduleBase="$1"; shift;;
	--remote|-r)	shift; submoduleRemote="$1"; shift;;
	--stat|--ahead-behind)
			inoutArgs+=("$1"); shift; [ -n "${HEADER_NEWLINE+t}" ] || export HEADER_NEWLINE=' ';;
	--one-more|--indicator-only|--files|--submodules)
			inoutArgs+=("$1"); shift;;
	--)		shift; break;;
	-)		shift; readarray -t submodules;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -gt 0 ]; then
    submodules+=("$@")
elif [ -z "${submodules+t}" ]; then
    readarray -t submodules < <(git-sublist)    # XXX: There's currently no way to obtain the submodules for a past <ref>; fortunately, the submodule configuration likely is quite stable.
fi

status=
superSubInOut()
{
    : ${GIT_SUPERSUBINOUT_HEADER_ID:="supersubinout-$$-$RANDOM"}
    for submodule in "${submodules[@]}"
    do
    (
	set -o pipefail
	local base; base="$(git-subhash "${superBase[@]}" "$submodule")" || exit 3

	if ! cd "${submodule:?}" 2>/dev/null; then
	    printf >&2 'ERROR: Cannot chdir to %s!\n' "$submodule"
	    exit 3
	fi

	local thisSubmoduleBase="$submoduleBase"
	[ -n "$thisSubmoduleBase" ] || thisSubmoduleBase="$(git-mbr)"

	eval 'git-inout "${colorArg[@]}" "${inoutArgs[@]}" --base "$base" "${submoduleRemote}${submoduleRemote:+/}${thisSubmoduleBase}"' "${isHeader:+| withHeader "${colorArg[@]}" --id '$GIT_SUPERSUBINOUT_HEADER_ID' -- '$submodule'}"
    ) && status=0 || : ${status:=$?}
    done
    return ${status:-99}
}

eval 'superSubInOut "$@"' "${pager:+|}" '"${pager[@]}"'
