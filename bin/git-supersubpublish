#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Publish this submodule's branch to REMOTE (when in a submodule) / publish all
dirty submodules (when in the superproject), and create a commit in the
superproject and publish its branch to REMOTE, too.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'REMOTE [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
publishCommand=
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --superpublish)	shift; publishCommand="$1"; shift; commitMessage="$1"; shift
			if git-dirty --ignore-submodules=dirty --quiet -- "$@"; then
			    git-wrapper commit --edit --message "$commitMessage" -- "$@" || exit $?
			fi
			exec git-wrapper "$publishCommand"
			;;
    origin)		shift; publishCommand=opublish;;
    upstream)		shift
			publishCommand=upublish
			if [ "$1" = origin ]; then
			    shift; publishCommand=uopublish
			fi
			;;
esac
if [ $# -gt 0 -o -z "$publishCommand" ]; then
    printUsage "$0" >&2
    exit 2
fi

typeset -a subPaths=()
if subPaths=("$(git-supersubpath)"); then
    commitMessage="$(git boml)"
else
    readarray -t subPaths < <(git subst)
    if [ ${#subPaths[@]} -eq 0 ]; then
	echo >&2 'ERROR: No affected submodules found.'
	exit 3
    fi

    commitMessage="$(git subsamebrdo --no-header boml)"
fi

printf -v quotedSuperCommand '%q ' "${BASH_SOURCE[0]}" --superpublish "$publishCommand" "$commitMessage" "${subPaths[@]}"
exec git-supersubdo --interactive --super-command "${quotedSuperCommand% }" --submodule-command "git-wrapper $publishCommand"
