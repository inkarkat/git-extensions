#!/bin/bash
set -o pipefail

readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

printUsage()
{
    cat <<HELPTEXT
Publish this submodule's branch to REMOTE when in a submodule / when in the
superproject: publish all dirty submodules / all submodules that are on the same
branch, and (if necessary) create a commit in the superproject and publish its
branch to REMOTE, too.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'REMOTE [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
publishCommand=
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --superpublish)	shift; publishCommand="${1:?}"; shift; submoduleBranch="${1:?}"; shift; commitMessage="$1"; shift
			superBranch="$(git-brname --real-branch-only)"

			if git-dirty --ignore-submodules=dirty --quiet -- "$@"; then
			    if [ "$superBranch" != "$submoduleBranch" ]; then
				userBinaryChoice --keep-prompt --introduction "The superproject's branch $superBranch does not match the submodule's branch ${submoduleBranch}." --question "Do you want to check out $submoduleBranch in $(git-wcname) first?" --ok-cancel || exit 4
				git-checkoutbranch -B "$submoduleBranch" || exit $?
			    fi

			    git-wrapper commit --edit --message "$commitMessage" -- "$@" || exit $?
			else
			    if [ "$superBranch" != "$submoduleBranch" ]; then
				userBinaryChoice --keep-prompt --introduction "The superproject's branch $superBranch does not match the submodule's branch ${submoduleBranch}." --question "Really publish $(git-wcname)'s ${superBranch}?" --ok-cancel || exit 4
			    fi
			fi

			exec git-wrapper "$publishCommand"
			;;
    origin)		shift; publishCommand=opublish;;
    upstream)		shift
			publishCommand=upublish
			if [ "$1" = origin ]; then
			    shift; publishCommand=uopublish
			fi
			;;
esac
if [ $# -gt 0 -o -z "$publishCommand" ]; then
    printUsage "$0" >&2
    exit 2
fi

typeset -a subPaths=()
if subPaths=("$(git-supersubpath)"); then
    commitMessage="$(git boml)"
else
    readarray -t subPaths < <(git subst)
    [ ${#subPaths[@]} -gt 0 ] || readarray -t subPaths < <(git subsamebrdo --subdo-command-name "${scriptName#git-}")
    if [ ${#subPaths[@]} -eq 0 ]; then
	echo >&2 'ERROR: No dirty submodules or submodules on the same branch found.'
	exit 3
    fi

    commitMessage="$(git subsamebrdo --subdo-command-name "${scriptName#git-}" --no-header boml | uniqueStable)"
fi

printf -v quotedSuperCommand '%q ' "${BASH_SOURCE[0]}" --superpublish "$publishCommand" "$(git-brname --real-branch-only)" "$commitMessage" "${subPaths[@]}"
exec git-supersubdo --subdo-command-name "${scriptName#git-}" --interactive --super-command "${quotedSuperCommand% }" --submodule-command "git-wrapper $publishCommand"
