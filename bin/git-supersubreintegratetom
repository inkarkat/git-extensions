#!/bin/bash

: ${GIT_REINTEGRATE_EXEC_END=;}
: ${GIT_SUPERSUBREINTEGRATETOM_SUBMODULE_END=;}

readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

: ${GIT_SUPERSUBREINTEGRATETOM_RECENT_FETCH_AGE:=15m}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-?|-h|--help]'
    printf 'Usage: GIT_REINTEGRATE_CHECK_COMMAND=CMD|GIT_CHECK_COMMAND=CMD %q %s\n' "$(basename "$1")" "[--fast-forward-integrate] [-y|--yes] [--same-branch|--for -|--for SUBMODULE [...] ${GIT_SUPERSUBREINTEGRATETOM_SUBMODULE_END}] [...]"
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] --no-checks | -c|--command \"CHECK-COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] $GIT_REINTEGRATE_EXEC_END [--exec ...]"
    printf 'Usage: echo CHECK-COMMANDLINES | %q %s\n' "$(basename "$1")" "[...] [--bare [--exit-on-failure]|$(runWithPrompt --get-short-usage 2>/dev/null)] -"
    printf 'Usage: %q %s - <<EOF\n  CHECK-COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Merge / rebase the current branch of a superproject + submodule(s) to the master
branch via a reverse integration of the superproject; i.e. master is merged /
rebased to the current branch first so that the reintegration is a simple
fast-forward.
Performs additional sanity checks and chooses the right arguments based on
whether this is a short-lived feature with a single superproject commit or full
history exists.
The answers to some questions can be preconfigured via these boolean config
settings; when not configured (true or false), the user will be prompted every
time:
- reintegrate.superproject-in-hub   integrate superproject in and by GitHub
- reintegrate.submodule-in-hub	    integrate submodule(s) in and by GitHub
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --fast-forward-integrate
			Also reverse-integrate all submodule(s) so that they too
			remain on their branches instead of directly pushing out
			their master branches while the superproject is being
			integrated. All repos can then be pushed out at once.
			This minimizes the time of discrepancies between latest
			submodule state and recorded superproject commit when a
			mandatory superproject CI/CD build verification prevents
			the immediate pushing of the reintegrated superproject
			commit, at the cost of more complexity, especially when
			a push fails due to concurrent third-party updates.
    --yes		Don't query for confirmation of remote mutations.
    --same-branch	Cover all submodules that are on the same branch as the
			superproject. By default, covers submodules that are
			modified in the superproject's current branch to master
			in my GitHub clone.
    --for SUBMODULE [...] $GIT_SUPERSUBREINTEGRATETOM_SUBMODULE_END
			Only consider the following SUBMODULE(s); i.e. all
			following arguments until an argument consisting of '${GIT_SUPERSUBREINTEGRATETOM_SUBMODULE_END}'
			is encountered.
    --for -		Only consider the SUBMODULE(s) read from stdin.
For all other arguments see ffintegrateto.
HELPTEXT
}

ensureSourceBranch()
{
    local sourceBranch="${1?}"; shift
    if [ -z "$sourceBranch" ]; then
	echo >&2 'Warning: Source branch unknown; will attempt to delete the last checked-out branch.'
	sourceBranch='@{-1}'
    fi
    printf %s "$sourceBranch"
}

typeset -a allArgs=("$@")
typeset -a affectedSubmodules=()
typeset -a affectedSubmoduleSourceCommand=(bomsubmodules)
isSameBranch=
typeset -a reintegrateArgs=()
isFastForwardIntegration=
integrationType='re'
typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--fast-forward-integrate)
			shift; isFastForwardIntegration=t; integrationType='fast-forward-';;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); reintegrateArgs+=("$1"); shift;;
	--same-branch)	shift
			affectedSubmoduleSourceCommand=(subsamebrdo --subdo-command-name "${scriptName#git-}")
			isSameBranch=t
			;;
	--for)		shift
			if [ "$1" = - ]; then
			    shift
			    while IFS=$'\n' read -r line
			    do
				affectedSubmodules+=("$line")
			    done
			else
			    while [ $# -gt 0 -a "$1" != "$GIT_SUPERSUBREINTEGRATETOM_SUBMODULE_END" ]
			    do
				affectedSubmodules+=("$1")
				shift
			    done
			    if [ $# -eq 0 ]; then
				echo "ERROR: --for must be concluded with '${GIT_SUPERSUBREINTEGRATETOM_SUBMODULE_END}'"; echo; printUsage "$0"
				exit 2
			    fi >&2
			    shift   # the ;
			fi
			if [ ${#affectedSubmodules[@]} -eq 0 ]; then
			    echo >&2 'ERROR: Expected at least one submodule, but none was passed.'
			    exit 2
			fi
			;;
	--print-outgoing)
			shift
			# The submodule has already been reintegrated; any rebased or merged commits require a push and therefore prevent reintegration in and by GitHub.
			# To find those commits, we need to compare the submodule's commit that's recorded in the superproject's tracked branch (that's what the remote sees) with the current to-be-pushed state on master.
			superprojectRev="${1:?}"; shift
			remoteSubmoduleRev="$(git-superdo --no-header --no-pager subhash "$superprojectRev" "$PWD")"
			exec git lg "${remoteSubmoduleRev}..HEAD" "$@"
			;;

	--delete-submodule-branch)
			shift; exec hub-delete-merged-branches "$@" -- "$(ensureSourceBranch "$(git-ffintegrateto --print-merged-branch)")";;
	--)		reintegrateArgs+=("$1"); shift; break;;
	-)		reintegrateArgs+=("$1"); shift; isCheckFromStdin=t; break;;
	*)		reintegrateArgs+=("$1"); shift;;
    esac
done
set -- "${reintegrateArgs[@]}" "$@"
if [ "${!#}" = '-' ]; then
    isCheckFromStdin=t
fi

printRestartCommand()
{
    local quotedConfigVariables='';  [ -n "$GIT_REINTEGRATE_PRE_PUSH_COMMAND" ] && printf -v quotedConfigVariables 'GIT_REINTEGRATE_PRE_PUSH_COMMAND=%q' "$GIT_REINTEGRATE_PRE_PUSH_COMMAND"
    local gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
    [ "$isCheckFromStdin" ] && printf >&2 'echo CHECK-COMMANDLINES | '
    printf >&2 '$ %s%s %q' "${quotedConfigVariables}${quotedConfigVariables:+ }" "$gitCommand" "${scriptName#git-}"
    printf >&2 ' %q' "${allArgs[@]}"
    [ "$isCheckFromStdin" ] && printf >&2 ' -'
    printf >&2 '\n'
}

typeset -a unintegratedSubmodules=()
checkForUnintegratedSubmodules()
{
    printf 'Checking for unintegrated submodules... '

    # After a reintegration, the submodule already is on the master branch; this is easy to check.
    # After a fast-forward integration, the submodule is still on the feature branch, and with rebasing there might not even be a merge commit. Therefore, we've asked ffintegrateto via --mark-reverse-merge-done to set a mark that we'll now check.
    [ "$isFastForwardIntegration" ] \
	&& local predicateCommand='! git-ffintegrateto --is-reverse-merge-done' \
	|| local predicateCommand="! git-mbr --test"

    readarray -t unintegratedSubmodules < <(
	"${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
	    subdo --subdo-command-name "${scriptName#git-}" --no-header --no-pager --for "${affectedSubmodules[@]}" \; \
		--predicate-command "$predicateCommand"
    )

    [ ${#unintegratedSubmodules[@]} -eq 0 ] || echo 'DONE.' # "If there are none, "No such submodules found." has already been printed.
}

isDidFetch=
fetchFirst()
{
    if [ ! "$isDidFetch" ] && "${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
	    ofetchdate -gt "$GIT_SUPERSUBREINTEGRATETOM_RECENT_FETCH_AGE" --message $'\nLast fetched'
    then
	echo 'Fetching origin first...'
	"${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
		ofetchonly-hushed --recurse-submodules=yes
	isDidFetch=t
	echo
    fi
}

handleWorkflow()
{
    if hub-workflow-status --has-workflow; then
	if [ "$HUB" ]; then
	    export GIT_REINTEGRATE_PRE_PUSH_COMMAND="printf '\nWaiting for the GitHub action to validate the build on the branch before pushing.\n'; hub-workflow-status --revision HEAD --latest --is completed --concluded success --wait 'The fast-forward-integrated branch build'"
	else
	    export GIT_REINTEGRATE_PRE_PUSH_COMMAND="printf '\nNote: Wait for the GitHub action to validate the build on the branch before pushing.\n'"
	fi
    fi
}

reintegrateSubmodule()
{
    if [ "$HUB" ] && [ ! "$isFastForwardIntegration" ]; then
	if choice="$(git config --type bool --get reintegrate.submodule-in-hub)"; then
	    case "$choice" in
		true)   "${submoduleExecutor[@]:-git-wrapper}" ${submoduleExecutor:+--abort-on-failure --interactive} \
				integrate --make-ready "$@"
			exit $?
			;;
		false)  ;;
		*)	printf >&2 'ASSERT: Invalid choice: %s\n' "$choice"; exit 3;;
	    esac
	else
	    "${submoduleExecutor[@]:-git-wrapper}" ${submoduleExecutor:+--interactive} \
		    integrate --offer "$@" && return
	fi
    fi

    fetchFirst

    "${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
	    bomsubmodules \
	| negateThis "${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
		osuperhaspendingsubintegrations - \
	    || exit $?

    local superMessage="$(withSeparator \
	    --exec "${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
		    prtitle --bare \; \
	    --exec "${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
		    boml \; \
    )"

    [ "$isFastForwardIntegration" ] \
	&& typeset -a submoduleReintegrationCommand=(ffintegratetom --push-branch --no-merge --mark-reverse-merge-done) \
	|| typeset -a submoduleReintegrationCommand=(reintegratetom --no-delete)
    "${submoduleExecutor[@]:-git-wrapper}" ${submoduleExecutor:+--abort-on-failure --interactive} \
	    "${submoduleReintegrationCommand[@]}" --no-push --no-checks ${superMessage:+--merge-message-template "$superMessage"} \
	|| exit $?

    # Remaining steps (i.e. committing the submodule changes) happen in the superproject.
    completeSubmoduleReintegrationInSuperproject "$@"
}

completeSubmoduleReintegrationInSuperproject()
{
    goToSuperproject

    case $(git bomcount) in
	0)  echo >&2 'ERROR: Expected at least one commit in the superproject on the branch, but none found.'
	    exit 3
	    ;;
	1)  if git-dirty --ignore-submodules=dirty -- "${affectedSubmodules[@]}"; then
		echo 'Amending reintegrated submodule(s) to the single superproject commit.'
		git add -- "${affectedSubmodules[@]}" \
		    && git amen \
		    || exit $?
	    else
		echo 'The reintegrated submodule(s) have been fast-forwarded; nothing to amend.'
	    fi
	    ;;
	*)  local pendingSubmoduleCnt=$((${#affectedSubmodules[@]} - ${#unintegratedSubmodules[@]} + 1))
	    local affectedSubmodulesPlural=s affectedSubmodulesAuxiliaryVerb=have; if [ ${#affectedSubmodules[@]} -eq 1 ]; then affectedSubmodulesPlural=; affectedSubmodulesAuxiliaryVerb=has; fi
	    if git-dirty --ignore-submodules=dirty -- "${affectedSubmodules[@]}"; then
		if [ $pendingSubmoduleCnt -eq 1 -o $pendingSubmoduleCnt -gt ${#affectedSubmodules[@]} ]; then
		    # The first pending submodule creates a separate integration commit.
		    # Also, when the entire submodule fast-forward-integration was interrupted, all submodules have been integrated but none yet updated in the superproject, we want a separate commit, no amend to a (likely unrelated) previous superproject commit.
		    local commitMessage; printf -v commitMessage 'Housekeeping: Reintegrate submodule%s %s' "$affectedSubmodulesPlural" "$(joinBy ', ' "${affectedSubmodules[@]}")"
		    git add -- "${affectedSubmodules[@]}" \
			&& git-wrapper commit --edit --message "$commitMessage" \
			|| exit $?
		else
		    # Following pending submodules are amended to the original separate integration commit.
		    printf 'Amending the %d. reintegrated submodule to the previous superproject commit.\n' "$pendingSubmoduleCnt"
		    git add -- "${affectedSubmodules[@]}" \
			&& git amen \
			|| exit $?
		fi
	    else
		[ "$isInvokedFromSubmodule" ] \
		    && printf 'This (%d.) reintegrated submodule has been fast-forwarded; nothing to amend.\n' "$pendingSubmoduleCnt" \
		    || printf 'The %d reintegrated submodule%s %s been fast-forwarded; nothing to amend.\n' "${#affectedSubmodules[@]}" "$affectedSubmodulesPlural" "$affectedSubmodulesAuxiliaryVerb"
	    fi
	    ;;
    esac

    echo
    checkForUnintegratedSubmodules
    if [ ${#unintegratedSubmodules[@]} -gt 0 ]; then
	unintegratedSubmodulesPlural=s; [ ${#unintegratedSubmodules[@]} -eq 1 ] && unintegratedSubmodulesPlural=
	printf '%s more submodule%s to reintegrate: %s\n' ${#unintegratedSubmodules[@]} "$unintegratedSubmodulesPlural" "$(joinBy ', ' "${unintegratedSubmodules[@]}")"
	exit 0
    elif userBinaryChoice --keep-prompt --question "${integrationType^}integrate the superproject now?" --yes-no; then
	reintegrateSuperproject "$@"
    else
	local gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
	printf 'Continue with the %sintegration of the superproject via $ %s %q' "$integrationType" "$gitCommand" "${scriptName#git-}"
	[ $# -eq 0 ] || printf ' %q' "$@"
	printf '\n'
    fi
}

sourceBranch=
reintegrateSuperproject()
{
    goToSuperproject

    if git-mbr --test; then
	echo >&2 'ASSERT: Not on master branch.'; exit 3
    fi

    local masterBranch; masterBranch="$(git-mbr)" || exit 3
    typeset -a integrateArgs=() ffintegratetoArgs=()
    case $(git bomcount) in
	0)  echo >&2 'ERROR: Expected at least one commit in the superproject on the branch, but none found.'
	    exit 3
	    ;;
	1)  echo "Rebasing the single superproject commit on top of ${masterBranch}."
	    integrateArgs=(--rebase-single)
	    ;;
	*)  echo "Maintaining the history of how the feature grew via a merge to ${masterBranch}."
	    if git-ismerge; then    # Sanity check
		echo >&2 'ERROR: There is already a merge commit, but the integration to master did not happen yet. This looks like a failed fast-forward-integration?!'
		exit 3
	    fi

	    # Disallow fast-forward to have a merge commit that maintains the history of how
	    # the feature grew.
	    ffintegratetoArgs=(--no-ff)
	    ;;
    esac

    unset isHubIntegrate
    if [ "$HUB" ] && [ ! "$isFastForwardIntegration" ]; then
	local targetTracks="$(git-tracks 2>/dev/null)"
	if [ -z "$targetTracks" ]; then
	    printf >&2 '\nNote: The superproject does not track any remote; complete integration in and by GitHub (without running local checks) not possible.\n'
	elif "${submoduleExecutor[@]:?}" ${submoduleExecutor:+--no-pager --separate-errors} "${scriptName#git-}" --print-outgoing "$targetTracks" \
	    | outputAndPrintf '\nNote: Submodule(s) have outgoing reintegration commits; complete integration in and by GitHub (without running local checks) not possible:\n'
	then
	    echo
	else
	    if choice="$(git config --type bool --get reintegrate.superproject-in-hub)"; then
		case "$choice" in
		    true)   hub-integrate --make-ready "${integrateArgs[@]}" "$@" && return;;
		    false)  ;;
		    *)	    printf >&2 'ASSERT: Invalid choice: %s\n' "$choice"; exit 3;;
		esac
	    else
		hub-integrate --offer "${integrateArgs[@]}" "$@" && return
	    fi
	    isHubIntegrate=
	fi
    fi

    git-dirty --print-error --error-message 'ERROR: The superproject working copy is still dirty.' \
	&& exit 1

    # We couldn't fully reintegrate in and by GitHub due to outgoing
    # reintegration commits, but if there's a superproject PR, we can do the
    # submodule reintegration locally, run the checks, and then push submodules
    # and let the superproject PR do the remainder. This saves us from waiting
    # for the GitHub action to validate the build.
    if [ "$HUB" ] && [ ! "$isFastForwardIntegration" ] && [ -z "${isHubIntegrate+t}" ]; then
	# Note: We can only --check here, because there's still local work to do
	# first.
	if choice="$(git config --type bool --get reintegrate.superproject-in-hub)"; then
	    case "$choice" in
		true)   hub-integrate --check --make-ready "${integrateArgs[@]}" "$@" && isHubIntegrate=t;;
		false)  ;;
		*)	printf >&2 'ASSERT: Invalid choice: %s\n' "$choice"; exit 3;;
	    esac
	else
	    hub-integrate --check --offer "${integrateArgs[@]}" "$@" && isHubIntegrate=t
	fi
    fi

    fetchFirst
    handleWorkflow

    typeset -a ffintegratetoArgs=(--branch "$masterBranch" --push-branch "${integrateArgs[@]}" "${ffintegratetoArgs[@]}")
    if [ "$isFastForwardIntegration" ]; then
	sourceBranch="$(git-brname --real-branch-only)"
	ffintegratetoArgs+=(--no-push --no-delete --no-submodule-checkout --no-submodule-update)
	git-ffintegrateto "${ffintegratetoArgs[@]}" "$@" || {
	    status=$?
	    echo >&2 "After the ${integrationType}integration has been resumed (see above) successfully and updated branches have been pushed, resume with fast-forwarding of submodules, waiting for the GitHub action, and the final quasi-transactional push via"
	    printRestartCommand
	    exit $status
	}
	fastforwardCommit
    else
	ffintegratetoArgs+=(--push-submodules --delete-merged-submodule-branches)
	if [ "$isHubIntegrate" ]; then
	    # Just merge / rebase $masterBranch to the current branch, run checks,
	    # push and delete submodule branches. With that, the superproject PR can
	    # do the remainder of the integration in and by GitHub.
	    git-ffintegrateto --no-merge "${ffintegratetoArgs[@]}" "$@" || exit $?
	    exec hub-integrate --make-ready "${integrateArgs[@]}" "$@"
	else
	    exec git-ffintegrateto "${ffintegratetoArgs[@]}" "$@"
	fi
    fi
}

fastforwardCommit()
{
    : ${masterBranch:=$(git-mbr)}
    printf '\nFast-forwarding submodule%s into %s:\n' "$affectedSubmodulesPlural" "${masterBranch:?}"
    "${submoduleExecutor[@]:?}" ${submoduleExecutor:+--no-header --no-pager --interactive} \
	    reintegratetom --ff-only --no-push --no-delete --no-checks \
	|| exit $?

    if hub-workflow-status --has-workflow; then
	if [ "$HUB" ]; then
	    eval "${GIT_REINTEGRATE_PRE_PUSH_COMMAND:?}" || {
		echo >&2 'Push preparation failed.'
		exit 1
	    }
	else
	    userBinaryChoice --keep-prompt --console --question $'\nPlease confirm that the GitHub action has successfully validated the build on the branch?' --ok-cancel || exit 4
	fi
    fi

    printf '\nFinal up-to-date check before pushing %s branches quasi-transactionally:\n' "$masterBranch"
    if ! "${submoduleExecutor[@]:?}" ${submoduleExecutor:+--no-pager --include-superproject-last} \
	uptodate --tracked "origin/${masterBranch}"
    then
	echo >&2 "ERROR: At least one repo is not up-to-date with origin any longer. You unfortunately need to repeat the ${integrationType}integration."
	exit 1
    fi

    printf '\nPushing fast-forward-integrated submodule and superproject %s branches:\n' "$masterBranch"
    # Note: No confirmation here (through --yes) because this is just the transactional commit, and that should happen right after the up-to-date check.
    # The user already the chance to review the changes when the reverse-integrated feature branches were pushed.
    "${submoduleExecutor[@]:?}" ${submoduleExecutor:+--no-pager --interactive} \
	    push-this-branch --yes \
	|| exit $?
    header "$(git-wcname)"
    hub-push-this-branch --yes || exit $?
    export HUB_DELETEMERGEDBRANCHES_TIMEOUT_BASEEPOCH=$(date +%s)

    printf '\nDeleting merged superproject and submodule branches:\n'
    sourceBranch="$(ensureSourceBranch "$sourceBranch")"
    if [ "$isSameBranch" ]; then
	typeset -a affectedSubmoduleDeleteBranchCommand=(--include-superproject delete-merged-branches "${gitRemoteMutateArgs[@]}" -- "$sourceBranch")
    else
	hub-delete-merged-branches "${gitRemoteMutateArgs[@]}" -- "$sourceBranch"
	typeset -a affectedSubmoduleDeleteBranchCommand=("${scriptName#git-}" --delete-submodule-branch "${gitRemoteMutateArgs[@]}")
    fi
    "${submoduleExecutor[@]:?}" ${submoduleExecutor:+--no-pager --interactive} "${affectedSubmoduleDeleteBranchCommand[@]}" || exit $?

    printf '\n✓ Branch completely reintegrated.\n'
}

isInvokedFromSubmodule=
typeset -a superprojectExecutor=()
goToSuperproject() { :; }
if git issubmodule; then
    isInvokedFromSubmodule=t
    superprojectExecutor=(git superdo)
    goToSuperproject()
    {
	local superprojectRoot; superprojectRoot="$(git superproject)" || exit 3
	cd "$superprojectRoot" || exit 3
	header "../$(git-wcname)"

	superprojectExecutor=()
	submoduleExecutor=("${superprojectSubmoduleExecutor[@]}")
	goToSuperproject() { :; }
    }
elif ! git hassubmodules; then
    echo >&2 'ERROR: This is a standalone repository that neither has submodules nor is included in a superproject.'
    exit 2
else
    goToSuperproject()
    {
	header "$(git-wcname)"
    }
fi

if "${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
	mbr --test
then
    # Undo the change of the source command done by --same-branch; that wouldn't
    # work on an aborted fast-forward-integration (which we tentatively support
    # here; the real detection and confirmation happens below) where the
    # superproject is already fast-forwarded by the submodules are still on the
    # source branch.
    affectedSubmoduleSourceCommand=(bomsubmodules)  # all submodules touched by reintegrated commits that are not yet pushed to origin
fi
[ -n "${affectedSubmodules+t}" ] \
    || readarray -t affectedSubmodules < <(\
	"${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
		"${affectedSubmoduleSourceCommand[@]}"
    )

if [ ${#affectedSubmodules[@]} -eq 0 ]; then
    gitCommand='git'; [ -n "$HUB" ] && gitCommand='hub'
    echo 'ERROR: Expected at least one affected submodule in the commits on the branch, but none found.'
    printf 'Use %s superonlyreintegratetom instead if you just want to reintegrate the superproject.\n' "$gitCommand"
    exit 3
fi >&2
typeset -a superprojectSubmoduleExecutor=(git-subdo-core --subdo-command-name "${scriptName#git-}" --for "${affectedSubmodules[@]}" \;)
typeset -a submoduleExecutor=(); [ "$isInvokedFromSubmodule" ] || submoduleExecutor=("${superprojectSubmoduleExecutor[@]}")

checkForUnintegratedSubmodules
if [ ${#unintegratedSubmodules[@]} -eq 0 ]; then
    if [ ${#affectedSubmodules[@]} -eq 1 ]; then
	echo 'The single submodule has been reintegrated already; now integrating the superproject.'
    else
	printf 'All %d submodules have been reintegrated already; now integrating the superproject.\n' ${#affectedSubmodules[@]}
    fi

    readarray -t dirtySubmoduleReferences < <(
	"${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
		dirty --ignore-submodules=dirty -- "${affectedSubmodules[@]}"
    )
    if [ ${#dirtySubmoduleReferences[@]} -gt 0 ]; then
	if [ ${#dirtySubmoduleReferences[@]} -eq 1 ]; then
	    dirtySubmoduleReferencesPlural=
	    dirtySubmoduleReferencesAuxiliaryVerb=has
	else
	    dirtySubmoduleReferencesPlural=s
	    dirtySubmoduleReferencesAuxiliaryVerb=have
	fi
	dirtySubmoduleReferencesPlural=s; [ ${#dirtySubmoduleReferences[@]} -eq 1 ] && dirtySubmoduleReferencesPlural=

	userBinaryChoice --keep-prompt \
	    --introduction "Apparently the submodule ${integrationType}integration was interrupted and ${#dirtySubmoduleReferences[@]} submodule reference$dirtySubmoduleReferencesPlural $dirtySubmoduleReferencesAuxiliaryVerb not been committed yet." \
	    --question "Update the changed submodule reference$dirtySubmoduleReferencesPlural in the superproject now?" \
	    --yes-no || exit 4

	action=completeSubmoduleReintegrationInSuperproject
    elif "${superprojectExecutor[@]:-git-wrapper}" ${superprojectExecutor:+--no-header --no-pager} \
	    mbr --test
    then
	if [ ! "$isFastForwardIntegration" ]; then
	    echo >&2 "ERROR: Already on master branch; nothing to ${integrationType}integrate."
	    exit 4
	fi

	userBinaryChoice --keep-prompt \
	    --introduction "Apparently the submodule ${integrationType}integration was interrupted after the superproject had been ${integrationType}integrated but the submodules are still on the ${integrationType}integrated source branch." \
	    --question "Assuming you've fixed the problem, updated and pushed all branches, shall I fast-forward the ${#affectedSubmodules[@]} submodule${affectedSubmodulesPlural} into $(git-mbr) now, wait for the GitHub action, and then push the branches quasi-transactionally?" \
	    --ok-cancel || exit 4

	goToSuperproject
	[ -n "$GIT_REINTEGRATE_PRE_PUSH_COMMAND" ] || handleWorkflow
	action=fastforwardCommit
    else
	if [ "$HUB" ] && hub-prcomments; then
	    userBinaryChoice --keep-prompt --console --question "Really ${integrationType}integrate the superproject despite the open PR review comments?" --yes-no || exit 4
	fi

	if [ "$HUB" ] && acceptStatus 0 99 hub-prapproval; then
	    userBinaryChoice --keep-prompt --console --question "Really ${integrationType}integrate the superproject?" --yes-no || exit 4
	fi

	action=reintegrateSuperproject
    fi
else
    affectedSubmodulesPlural=s
    if [ ${#affectedSubmodules[@]} -eq 1 ]; then
	affectedSubmodulesPlural=
	if [ "$isInvokedFromSubmodule" ]; then
	    echo 'Integrating this single submodule.'
	else
	    echo 'Integrating the single submodule.'
	fi
    elif [ ${#unintegratedSubmodules[@]} -eq 1 ]; then
	printf 'Integrating the last submodule (of %d).\n' ${#affectedSubmodules[@]}
    else
	if [ "$isInvokedFromSubmodule" ]; then
	    printf 'Integrating submodule %d of %d.\n' $((${#affectedSubmodules[@]} - ${#unintegratedSubmodules[@]} + 1)) ${#affectedSubmodules[@]}
	elif [ ${#affectedSubmodules[@]} -eq ${#unintegratedSubmodules[@]} ]; then
	    printf 'Integrating all %d submodules.\n' ${#affectedSubmodules[@]}
	else
	    printf 'Integrating the remaining %d of %d submodules.\n' ${#unintegratedSubmodules[@]} ${#affectedSubmodules[@]}
	fi
    fi

    action=reintegrateSubmodule

    if [ "$HUB" ] && \
	"${submoduleExecutor[@]:-git-wrapper}" ${submoduleExecutor:+--single-success --include-superproject} \
		prcomments
    then
	[ "$isInvokedFromSubmodule" ] \
	    && question='Really integrate this submodule' \
	    || question="Really integrate ${#affectedSubmodules[@]} submodule${affectedSubmodulesPlural}"
	question+=' despite the open PR review comments?'
	userBinaryChoice --keep-prompt --console --question "$question" --yes-no || exit 4
    fi

    if [ "$HUB" ] && \
	acceptStatus 0 99 "${submoduleExecutor[@]:-git-wrapper}" ${submoduleExecutor:+--single-success --include-superproject} \
		prapproval
    then
	[ "$isInvokedFromSubmodule" ] \
	    && question='Really integrate this submodule?' \
	    || question="Really integrate ${#affectedSubmodules[@]} submodule${affectedSubmodulesPlural}?"
	userBinaryChoice --keep-prompt --console --question "$question" --yes-no || exit 4
    fi
fi

$action "$@"
