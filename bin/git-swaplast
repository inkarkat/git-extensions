#!/bin/bash
# Source: https://stackoverflow.com/a/20458127/813602

printUsage()
{
    cat <<HELPTEXT
Swap the last and one-before-last commits.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-?|-h|--help]'
}

cherryPickOne()
{
    local commit="${1:?}"; shift
    local stageNum="${1:?}"; shift
    local hint="${1?}"; shift
    git -c advice.resolveConflict=false cherry-pick "$commit" || {
	status=$?
	if [ "$isPrintHint" ] && git-conflicts --quiet; then
	    [ -z "$hint" ] || printf '%s\n' "$hint"
	    printf 'hint: After resolving the conflicts, mark them with\nhint: "git add/rm <pathspec>", then run\nhint: "%q --continue-%d"\n' "$continueCommand" "$stageNum"
	    printf 'hint: To abort and get back to the state before "%q",\nhint: run "%q --abort"\n' "$continueCommand" "$continueCommand"
	fi >&2
	exit $status
    }
}
cherryPickFirst()
{
    [ "$continueCommand" = git-swapstage ] \
	&& local hint=$'hint: Apply the previously unstaged changes to the future stage; i.e.\nhint: apply the change from the parent to futureStage onto HEAD.' \
	|| local hint=$'hint: Apply the previously last changes to the starting commit; i.e.\nhint: apply the change from the parent to theirs onto HEAD.'
    cherryPickOne _invert 1 "$hint"
}
cherryPickSecond()
{
    [ "$continueCommand" = git-swapstage ] \
	&& local hint=$'hint: Apply the previously unstaged changes to the future unstaged; i.e.\nhint: apply the change from the parent to futureUnstaged onto HEAD.' \
	|| local hint=$'hint: Apply the previously previous-to-last changes to the just made commit; i.e.\nhint: apply the change from the parent to theirs onto HEAD.'
    cherryPickOne _invert~1 2 "$hint"
}
cleanup()
{
    git tag -d _invert
}

isPrintHint=t
continueCommand="$(basename "$0")"
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--continue-1)	git -c core.editor=true cherry-pick --continue || exit $?
			cherryPickSecond
			cleanup
			exit $?
			;;
	--continue-2)	git -c core.editor=true cherry-pick --continue || exit $?
			cleanup
			exit $?
			;;
	--abort)	git reset --hard _invert || exit $?
			cleanup
			exit $?
			;;
	--cleanup)	cleanup; exit $?;;
	--no-hint)	shift; isPrintHint=;;
	--continue-command)
			shift; continueCommand="${1:?}"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

git-dirty --print-error && exit 1

git tag _invert || exit $?
git reset --hard HEAD~2 || exit $?
cherryPickFirst
cherryPickSecond
cleanup
