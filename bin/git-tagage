#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--resolve] [--bare|-l|--long] [-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]|DATE] [--] [<tag-glob> ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
List tags by age (descending, starting with old tags).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --resolve|-r	Use the date of the tagged commit instead of the tag
			creation date.
    --bare		Just print the tag names.
    --long|-l		Also print the tag[ged commit]'s author name.
    -n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]|DATE
			Only print those tags that match the age comparison.
SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours, 'd'
for days, 'w' for weeks, 'mo' for months, 'y' for years, 'g' for generations.
HELPTEXT
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
if [ ! -t 1 ]; then
    pager=()
    formatter=()
fi
action=ageByCreation
isInfo=t
typeset -a additionalLogMassaging=()
prefixLogFormat=
prefixRefFormat=
additionalLogFormat=
additionalRefFormat=
typeset -a postAction=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--resolve|-r)	shift; action=ageByCommit;;
	--bare)		shift
			isInfo=
			additionalLogMassaging=(-e 's/^[^\t]\+\t//' -e 's/, /\n/g')    # Need to remove the ISO date required for sorting, and unjoin multiple "TAG1, TAG2" lists.
			;;
	--long|-l)	shift; additionalLogFormat='%aN'; additionalRefFormat='%(authorname)%(*authorname)';;
	-n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt)
			postAction=(filterAge --field-separator $'\t' "$1" "$2"); shift; shift; prefixLogFormat='%ct'; prefixRefFormat='%(creatordate:unix)';;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

ageByCommit()
{
    git tag --list --format='%(refname)' "$@" | \
	xargs --no-run-if-empty --delimiter '\n' -n 1 git log --max-count 1 --pretty=tformat:"${prefixLogFormat}${prefixLogFormat:+\\t}%ci	${isInfo:+(%cr}${additionalLogFormat:+, }${additionalLogFormat}${isInfo:+)	}%D${isInfo:+: %s}" | \
	sort --numeric-sort | \
	sed -e 's/\(\t\|, \)tag: /\1/g' "${additionalLogMassaging[@]}"
}

ageByCreation()
{
    git tag --list --sort=creatordate --format="${prefixRefFormat}${prefixRefFormat:+%09}${isInfo:+%(creatordate:iso)%09(%(creatordate:relative)}${additionalRefFormat:+, }${additionalRefFormat}${isInfo:+)%09}%(refname:short)" "$@"
}

eval '$action "$@"' "${postAction:+|}" '"${postAction[@]}"' "${formatter:+|}" '"${formatter[@]}"' "${pager:+|}" '"${pager[@]}"'
