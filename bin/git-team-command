#!/bin/bash
set -o noglob

printUsage()
{
    cat <<HELPTEXT
Execute GIT-COMMAND with author filtering of names belonging to my team
- appended
- replacing TEAM argument(s) anywhere
- replacing TEAM in the following GIT-COMMAND and -(N-1) arguments
- replacing TEAM in the following +(N) arguments and appending those
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-option-name|--option-name NAME] ...'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... GIT-COMMAND [...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --keep-position GIT-COMMAND [... TEAM ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [-2 GIT-COMMAND ARG1|-3 GIT-COMMAND ARG1 ARG2|...] [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [+1 ARG1|+2 ARG1 ARG2|+3 ARG1 ARG2 ARG3|...] GIT-COMMAND [...]'
}

optionName='--author='
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-option-name)	shift; optionName='';;
    --option-name)	shift; optionName="--${1:?}="; shift;;
esac

gitDir="$(git rev-parse --git-dir 2>/dev/null)" || exit $?
teamConfigFilespec="${gitDir}/teamnames"

typeset -a team=()
if [ -r "$teamConfigFilespec" ]; then
    readarray -t team < "$teamConfigFilespec"
elif [ -n "$GIT_TEAMNAMES" ]; then
    readarray -t team <<<"$GIT_TEAMNAMES"
fi
if [ ${#team[@]} -eq 0 ]; then
    echo >&2 "No team defined. Put the newline-separated list of user.name's into .git/teamnames or the GIT_TEAMNAMES environment variable."
    exit 2
fi

[ -n "$optionName" ] \
    && typeset -a teamArgs=("${team[@]/#/$optionName}") \
    || typeset -a teamArgs=("$(joinBy '\|' "${team[@]}")")

if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No GIT-COMMAND passed.'
    exit 2
fi

isCountedAppend=
case "$1" in
    +[1-9])
	isCountedAppend=t;&
    -[1-9])
	typeset countedArgNum=${1#[+-]}
	typeset -a countedArgs=("${@:2:${countedArgNum}}")
	set -- "${@:$((2 + countedArgNum))}"

	typeset -a appendedArgs=()
	for arg in "${countedArgs[@]}"
	do
	    if [ "$arg" = 'TEAM' ]; then
		appendedArgs+=("${teamArgs[@]}")
	    else
		appendedArgs+=("$arg")
	    fi
	done

	[ "$isCountedAppend" ] \
	    && exec git-wrapper "$@" "${appendedArgs[@]}" \
	    || exec git-wrapper "${appendedArgs[@]}" "$@"
	;;
    --keep-position)
	shift

	typeset -a appendedArgs=()
	for arg
	do
	    if [ "$arg" = 'TEAM' ]; then
		appendedArgs+=("${teamArgs[@]}")
	    else
		appendedArgs+=("$arg")
	    fi
	done

	exec git-wrapper "${appendedArgs[@]}"
	;;
    *)
	exec git-wrapper "$@" "${teamArgs[@]}"
	;;
esac
