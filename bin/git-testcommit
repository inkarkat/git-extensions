#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Do a test commit by appending MESSAGE to FILE and committing with MESSAGE(s).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-p|--prepend] MESSAGE FILE [[MESSAGE] FILE ...] [-?|-h|--help]'
}

modifier=append
typeset -a messages=()
typeset -a files=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--prepend|-p)	shift; modifier=prepend;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		messages+=("$1"); shift
			files+=("$1"); shift
			;;
    esac
done
if [ $# -ne 0 -o ${#messages[@]} -ne ${#files[@]} ]; then
    printUsage "$0" >&2
    exit 2
fi

append()
{
    printf '%s\n' "${1?}" >> "${2:?}"
}

typeset -a existingFiles=() newFiles=()
set -e
for ((i = 0; i < ${#files[@]}; i++))
do
    filespec="${files[$i]}"
    [ -e "$filespec" ] && \
	existingFiles+=("$filespec") || \
	newFiles+=("$filespec")
    $modifier "${messages[$i]}" "${files[$i]}" || exit $?
done
commitMessage="$(joinBy --truncate-after 3 -- ', ' "${messages[@]}")"

if [ ${#existingFiles[@]} -gt 0 -a ${#newFiles[@]} -gt 0 ]; then
    git-wrapper commit --message "$commitMessage" -- "${existingFiles[@]}" && \
	git-commituntracked --amend --reuse-message=HEAD -- "${newFiles[@]}"
elif [ ${#existingFiles[@]} -gt 0 ]; then
    git-wrapper commit --message "$commitMessage" -- "${existingFiles[@]}"
elif [ ${#newFiles[@]} -gt 0 ]; then
    git-commituntracked --message "$commitMessage" -- "${newFiles[@]}"
fi
