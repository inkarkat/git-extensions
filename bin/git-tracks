#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--push] [<branch>] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show which remote branch is tracked by the current / passed branch.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --push		Show which remote branch is pushed to; this can be
			different in a triangular workflow.
HELPTEXT
}

keyword='upstream'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--push)		shift; keyword='push';;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

if branch="$(git rev-parse --abbrev-ref "${1}@{${keyword}}" 2>/dev/null)"; then
    printf '%s\n' "$branch"
elif sourceBranch="${1:-$(git-brname --real-branch-only)}" \
    && remote="$(git config "branch.${sourceBranch}.remote")" \
    && merge="$(git config "branch.${sourceBranch}.merge")"
then
    printf '%s\n' "${remote}/${merge#refs/heads/}"
else
    printf >&2 'ERROR: No remote branch found for %s\n' "${1:-the current branch.}"
    exit 1
fi
