#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Fetch all upstream changes and then rebase all / the last committed N local
branches (using a separate worktree we're not on master, suppressing standard
fetch / rebase information and messages when there are no changes in upstream).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--continue|--skip|--abort] [--include-current] [--include-master] [--include-base] [--include-all] [--branches BRANCH [...] ;] [-n N|--count N] [-i|--interactive] [options] [<branch>] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac


{
    export GIT_UP_REDIRECTION='2>&1'
    git ufetch || exit $?

    masterBranch="$(git-mbr)"
    isOnMasterBranch=; [ "$(git-brname --raw)" = "$masterBranch" ] && isOnMasterBranch=t

    if [ "$isOnMasterBranch" ] && ! git-dirty --quiet; then
	git-urebaselocalbr --push origin --include-master --include-current "$@"
    else
	worktreeName="$(git root)" || exit $?
	worktreeName="${worktreeName%.*}.rebasewc"

	if [ "$isOnMasterBranch" ]; then
	    # We've been launched on a dirty master; detach the worktree to
	    # avoid a checkout error and don't consider the master == current
	    # branch when rebasing.
	    typeset -a autoWorkTreeMasterArgs=(--detach)
	    typeset -a rebaseLocalBranchMasterArgs=()
	else
	    # Start the rebase on master and also include it in rebasing.
	    typeset -a autoWorkTreeMasterArgs=(--branch "$masterBranch")
	    typeset -a rebaseLocalBranchMasterArgs=(--include-master)
	fi

	git-autoworktree --name "$worktreeName" "${autoWorkTreeMasterArgs[@]}" --leave-detached git-urebaselocalbr --push origin "${rebaseLocalBranchMasterArgs[@]}" "$@"
    fi
} | git-hushup --fetch upstream
