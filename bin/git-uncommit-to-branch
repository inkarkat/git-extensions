#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Undo the last commit / N commits / commits up to and including (unless
--exclude-commit) <commit> of the current branch, and check it out in a newly
created <branch> instead.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet] [-y|--yes] [-b|-B|--branch <branch>] [-n N|--count N|[--exclude-commit] --from <commit>|<commit>] [-?|-h|--help]'
}
branchName=
isQuiet=
isYes=
commit=HEAD
fromCommit=
commitNum=1
commitOffset=1
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--quiet|-q)	    shift; isQuiet=t;;
	--yes|-y)	    shift; isYes=t;;
	--branch|-b|-B)	    shift; branchName="$1"; shift;;
	--count|-n)	    shift
			    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				printUsage "$0" >&2
				exit 2
			    fi
			    commit="HEAD~$(($1 - 1))"
			    commitNum=$1
			    shift
			    ;;
	--exclude-commit)   shift; commitOffset=0;;
	--from)		    shift; fromCommit="${1:?}"; shift;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
if [ $# -eq 0 -a -z "$fromCommit" ]; then
    if [ ! "$isYes" ] && git-ismerge "$commit"; then
	# The commit has been merged from a branch; this is dubious.
	userBinaryChoice --keep-prompt --question "The last commit is a merge, you should use \"git unmerge\" to undo the merge and checkout the original branch again; really move to that?" --yes-no || exit 4
    fi
else
    if [ -n "$fromCommit" ]; then
	commit="$fromCommit"
    else
	commit="${1:?}"; shift
    fi

    # Check reachability.
    if git rev-list --quiet --first-parent "${commit}.." -- 2>/dev/null; then
	commitNum=$(git rev-list "${commit}.." -- | wc -l)
	let commitNum+=commitOffset
    elif commitNum=$(git rev-list "${commit}.." -- 2>/dev/null | wc -l); then
	let commitNum+=commitOffset
	# The commit has been merged from a branch; this is dubious.
	if [ ! "$isYes" ]; then
	    userBinaryChoice --keep-prompt --question "The target commit is on a side branch that was merged into the current branch; really move to that?" --yes-no || exit 4
	fi
    else
	[ "$isQuiet" ] || echo >&2 'ERROR: The target commit is not an ancestor of the current branch!'
	exit 1
    fi
fi
if [ $# -gt 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

currentBranchName="$(git-brname --real-branch-only)" || exit $?
branchCommit="$(git rev-parse HEAD)" || exit $?
if [ -z "$branchName" ] && [ ! "$isYes" ]; then
    branchName="$(userquery -r -p 'Please enter branch name: ')" || exit $?
fi
[ -n "$branchName" ] || exit 1
if git-existsbr -- "$branchName"; then
    printf >&2 "ERROR: Branch '%s' already exists.\\n" "$branchName"
    exit 1
fi

commitNumPlural=s; [ $commitNum -eq 1 ] && commitNumPlural=
if [ "$isYes" ]; then
    [ "$isQuiet" ] || printf >&2 'Moving %d commit%s onto %s.\n' "$commitNum" "$commitNumPlural" "$branchName"
else
    userBinaryChoice --keep-prompt --question "Really move $commitNum commit${commitNumPlural} onto branch '$branchName'?" --yes-no || exit 4
fi

git-wrapper checkout -b "$branchName" "$branchCommit" || exit $?
exec git update-ref -m "uncommit-to-branch: move $commitNum commit${commitNumPlural} onto $branchName" "refs/heads/$currentBranchName" "${commit}~${commitOffset}"
