#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Undo the merge done in the last commit of the current branch, and checkout the
original unmerged branch again. If local modifications prevent that checkout,
you need to add -m|--merge to allow the conflict to happen.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet] [-y|--yes] [-m|--merge] [-b|--branch <branch>] [-?|-h|--help]'
}
typeset -a gitCheckoutArgs=()
branchName=
isQuiet=
isYes=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			    shift;;
	--color)	    shift; shift;;
	--quiet|-q)	    shift; isQuiet=t;;
	--yes|-y)	    shift; isYes=t;;
	--merge|-m)	    gitCheckoutArgs+=("$1"); shift;;
	--branch|-b)	    shift; branchName="$1"; shift;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
if [ $# -gt 0 ]; then
    printUsage "$0" >&2
    exit 2
elif ! git-ismerge --single-branch; then
    if git-ismerge; then
	echo >&2 'ERROR: Last commit merged more than one branch.'
    else
	echo >&2 'ERROR: Last commit is not a merge.'
    fi
    exit 1
fi

currentBranchName="$(git-brname --real-branch-only)" || exit $?
branchCommit="$(git rev-parse HEAD^2)" || exit $?
mergeCommit="$(git rev-parse HEAD)" || exit $?
beforeMergeCommit="$(git rev-parse HEAD^)" || exit $?
action=checkoutNewBranch
[ -n "$branchName" ] || branchName="$(git lo1 HEAD | sed -n -e "s#^Merge branch '\\(.*\\)'[[:space:]]*\\(into .*\\)\\?\$#\\1#p")" || exit $?
if [ -z "$branchName" ] && [ ! "$isYes" ]; then
    branchName="$(userquery -r -p 'Branch name not found in merge commit; please enter branch name: ')" || exit $?
fi
[ -n "$branchName" ] || exit 1
if git-existsbr -- "$branchName"; then
    if git-equals "$branchName" "$branchCommit"; then
	printf "Note: Branch '%s' already exists, and its current state got merged; will reuse it.\\n" "$branchName"
	action=checkoutExistingBranch
    else
	printf >&2 "ERROR: Branch '%s' already exists (and does not correspond to the merged state).\\n" "$branchName"
	exit 1
    fi
fi

if [ "$isYes" ]; then
    [ "$isQuiet" ] || echo >&2 "Unmerging ${branchName}."
else
    userBinaryChoice --keep-prompt --question "Really ummerge branch '$branchName'?" --yes-no || exit 4
fi

checkoutNewBranch()
{
    git-wrapper checkout "${gitCheckoutArgs[@]}" -b "$branchName" "$branchCommit"
}
checkoutExistingBranch()
{
    git-wrapper checkout "${gitCheckoutArgs[@]}" "$branchName"
}

$action || exit $?
exec git update-ref -m "unmerge: undo merge in $mergeCommit to $branchName" "refs/heads/$currentBranchName" "$beforeMergeCommit"
