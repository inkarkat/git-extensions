#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-q|--quiet] [-y|--yes] [-m|--merge] [-b|--branch <branch>] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Undo the merge done in the last commit of the current branch, and checkout the
original unmerged branch again.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --quiet|-q		Do not print informational messages.
    --yes|-y		Skip the confirmation.
    --merge|-m		Allow the conflict to happen if local modifications
			prevent the checkout.
    --branch|-b <branch>
			Use <branch> instead of reviving the original branch.
SEE ALSO:
- git-mergeamend is a shortcut that revives the last commit's merged branch and
  directly merges it again to just commit (or amend) the staged changes.
HELPTEXT
}

typeset -a gitCheckoutArgs=()
branchName=
isQuiet=
isYes=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			    shift;;
	--color)	    shift; shift;;
	--quiet|-q)	    shift; isQuiet=t;;
	--yes|-y)	    shift; isYes=t;;
	--merge|-m)	    gitCheckoutArgs+=("$1"); shift;;
	--branch|-b)	    shift; branchName="$1"; shift;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
if [ $# -gt 0 ]; then
    printUsage "$0" >&2
    exit 2
elif ! git-ismerge --single-branch; then
    if git-ismerge; then
	echo >&2 'ERROR: Last commit merged more than one branch.'
    else
	echo >&2 'ERROR: Last commit is not a merge.'
    fi
    exit 1
fi

currentBranchName="$(git-brname --real-branch-only)" || exit $?
branchCommit="$(git rev-parse HEAD^2)" || exit $?
mergeCommit="$(git rev-parse HEAD)" || exit $?
beforeMergeCommit="$(git rev-parse HEAD^)" || exit $?
action=checkoutNewBranch
originalBranchAction=undoMergeOnOriginalBranch
[ -n "$branchName" ] || branchName="$(git lo1 HEAD | sed -n -e "s#^Merge branch '\\(.*\\)'[[:space:]]*\\(into .*\\)\\?\$#\\1#p")" || exit $?
if [ -z "$branchName" ] && [ ! "$isYes" ]; then
    branchName="$(userquery -r -p 'Branch name not found in merge commit; please enter branch name: ')" || exit $?
fi
[ -n "$branchName" ] || exit 1
if git-existsbr -- "$branchName"; then
    if git-equals "$branchName" "$branchCommit"; then
	printf "Note: Branch '%s' already exists, and its current state got merged; will reuse it.\\n" "$branchName"
	action=checkoutExistingBranch
    elif git-equals "$branchName" "$mergeCommit"; then
	# We need to follow the second merge parent for the branch.
	beforeMergeCommit="$(git rev-parse HEAD^2)" || return $?

	if [ "$currentBranchName" = "$branchName" ]; then
	    printf "Note: Already on branch '%s', and its current state got fast-forward integrated (as it contains the merge commit); will undo the merge on it.\\n" "$branchName"
	    action=undoMergeOnExistingBranch
	    originalBranchAction=:
	else
	    printf "Note: Branch '%s' already exists, and its current state got fast-forward integrated (as it contains the merge commit); will undo the merge on it.\\n" "$branchName"
	    action=checkoutAndUndoMergeOnExistingBranch
	fi
    else
	printf >&2 "ERROR: Branch '%s' already exists (and does not correspond to the merged state).\\n" "$branchName"
	exit 1
    fi
fi

if [ "$isYes" ]; then
    [ "$isQuiet" ] || echo >&2 "Unmerging ${branchName}."
else
    userBinaryChoice --keep-prompt --question "Really ummerge branch '$branchName'?" --yes-no || exit 4
fi

checkForAmendsToMergeCommit()
{
    git dpmergeitself ${isQuiet:+--quiet} --exit-code "$mergeCommit" && return 0

    if [ "$isYes" ]; then
	[ "$isQuiet" ] || echo >&2 'Note: Unmerging despite changes (conflict resolution or amends) in the merge commit itself.'
    else
	userBinaryChoice --keep-prompt --question 'The merge commit itself has changes that will be lost; for conflict resolution this is okay, but it could also be amends made directly to the merge commit. Proceed and discard those changes?' --yes-no && return 0
	echo >&2 'Note: You can create a patch of the merge commit changes via $ git mamergeitself, unmerge, and then reapply the patch via $ git am. The commit message likely needs rewording then.'
	return 4
    fi
}

checkoutNewBranch()
{
    git-wrapper checkout "${gitCheckoutArgs[@]}" -b "$branchName" "$branchCommit"
}

checkoutExistingBranch()
{
    git-wrapper checkout "${gitCheckoutArgs[@]}" "$branchName"
}

undoMergeOnExistingBranch()
{
    git reset --hard "$beforeMergeCommit"
}

checkoutAndUndoMergeOnExistingBranch()
{
    git-wrapper checkout "${gitCheckoutArgs[@]}" -B "$branchName" "$beforeMergeCommit"
}

undoMergeOnOriginalBranch()
{
    git update-ref -m "unmerge: undo merge in $mergeCommit to $branchName" "refs/heads/$currentBranchName" "$beforeMergeCommit"
}

checkForAmendsToMergeCommit || exit $?
$action || exit $?
$originalBranchAction || exit $?
