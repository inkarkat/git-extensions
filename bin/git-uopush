#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
push upstream + origin; Directly push current / passed <branch> to upstream and
(if successful) push it to the tracking GitHub clone, too.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-y|--yes] [--] [<branch>] [-?|-h|--help]'
}

typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

branch=; [ $# -gt 0 ] && branch="${!#}"
if git-existsbr "origin/$branch"; then
    if ! git-existsbr "upstream/$branch"; then
	printf >&2 'ERROR: origin/%s exists, but upstream/%s does not.\n' "$branch" "$branch"
	exit 1
    fi

    set -- "${@:1:$(($#-1))}"
else
    branch=$(git-brname --real-branch-only) || exit $?
    if ! git-existsbr "origin/$branch"; then
	printf >&2 'ERROR: Cannot find corresponding origin branch; origin/%s does not exist.\n' "$branch"
	exit 1
    elif ! git-existsbr "upstream/$branch"; then
	printf >&2 'ERROR: origin/%s exists, but upstream/%s does not.\n' "$branch" "$branch"
	exit 1
    fi
fi

# First push to upstream; we usually want to catch up origin to upstream, but
# keep it at the current state if pushing to upstream failed.
printf -v quotedPath %q "$branch"
git-remote-mutate upstream --message 'Push' --context-command "git uoutlg --color=always --branch $quotedPath" "${gitRemoteMutateArgs[@]}" \
    push "$@" upstream "$branch" || exit $?
git-remote-mutate origin --message 'Push' --context-command "git ooutlg --color=always --branch $quotedPath" "${gitRemoteMutateArgs[@]}" \
    push "$@" origin "$branch"
