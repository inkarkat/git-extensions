#!/bin/bash
shopt -qs extglob

# Source:
#   https://stackoverflow.com/questions/30208928/can-git-pull-automatically-stash-and-pop-pending-changes
#   https://github.com/aanand/git-up

printUsage()
{
    local action='Pull and rebase'
    if [ "$GIT_UP_NO_UPDATE" ]; then
	action='Only fetch changes (no update of local branches)'
    elif [ "$GIT_UP_FETCH" ]; then
	action='Fetch and rebase changes'
    elif [ "$GIT_UP_REBASE" ]; then
	action='Rebase changes'
    fi

    cat <<HELPTEXT
$action in ${remote:-REMOTE}, and show a log of the changes.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[--gui|--terminal|--none] [--submodule ignore|yes|recurse] [-q|--quiet] ${remote:-REMOTE} [PULL/REBASE-ARGS ...] [-?|-h|--help]"
}

getDetachedBranch()
{
    # On a detached checkout, use a branch that coincides with the detached
    # commit (assuming that there's only one), and fall back to the base /
    # master branch.
    git-brname --detached-effective-branch --real-branch-only --raw 2>/dev/null || \
	git-nbr 2>/dev/null || \
	    git-mbr 2>/dev/null
}

getRemoteBranch()
{
    if [ $# -gt 0 ] && git-existsbr "${!#}"; then
	git-remotebr "${remote:?}" "${!#}"
    else
	git-remotebr "${remote:?}"
    fi
}

remote=
submoduleHandling=recurse
typeset -a logDeltaArgs=(--submodule "$submoduleHandling")
typeset -a colorArg=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--@(gui|terminal|none|quiet))
			logDeltaArgs+=("$1"); shift;;
	-[q])
			logDeltaArgs+=("$1"); shift;;
	--submodule)	logDeltaArgs+=("$1" "$2")
			submoduleHandling="$2"
			shift; shift
			;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	colorArg=("$1" "$2"); shift; shift;;
	--launch)	break;;
	*)		if [ -z "$remote" ]; then
			    remote="$1"; shift
			else
			    break
			fi
			;;
    esac
done
if [ "$1" = '--launch' ]; then
    shift
else
    readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

    if [ "$GIT_UP_NO_UPDATE" ] && [ "$GIT_UP_FETCH" ]; then
	if remoteBranch="$(getRemoteBranch "$@" 2>/dev/null)"; then
	    # The delta needs to be done on the remote branch, as there'll be no
	    # update of local branches / HEAD.
	    logDeltaArgs+=(--branch "$remoteBranch")
	elif localBranch="$(git-lastbranch-command echo 2>/dev/null)" && remoteBranch="$(git-remotebr "${remote:?}" "$localBranch")"; then
	    # Though there's no branch checked out that has a corresponding
	    # remote branch, we've found a local branch in the reflog and that
	    # one has a remote branch. Typically, the working copy has checked
	    # out a tag, and that branch is the last one checked out before
	    # switching to tags.
	    logDeltaArgs+=(--branch "$remoteBranch")
	else
	    [ "${logDeltaArgs[*]}" = '--none' ] || echo >&2 "Warning: Could not determine corresponding ${remote:-REMOTE} branch, no logging possible."
	    logDeltaArgs=(--none)
	fi
    elif git-isdetached; then
	if branch="$(getDetachedBranch)"; then
	    logDeltaArgs+=(--branch "${remote}/${branch}")
	else
	    [ "${logDeltaArgs[*]}" = '--none' ] || echo >&2 "Warning: Detached working copy, and could not determine base / master ${remote:-REMOTE} branch, no logging possible."
	    logDeltaArgs=(--none)
	fi
    fi

    exec git-logdelta "${colorArg[@]}" "${logDeltaArgs[@]}" -- "${scriptName#git-}" "${remote:?}" --launch "$@"
fi

GIT_VERSION="$(git --version 2>/dev/null)"
# --rebase-merges and --rebase=merges is Git 2.18 and later.
typeset -a gitRebaseMergesArg=(--rebase-merges)
typeset -a gitPullRebaseMergesArg=(--rebase=merges)
# --autostash is Git 2.9 and later.
# -c rebase.autoStash=true is Git 2.6 and later.
typeset -a gitAutoStashGitArg=()
typeset -a gitAutoStashPullOrRebaseArg=(--autostash)
if versionCompare "$GIT_VERSION" -lt 2.18 2>/dev/null; then
    gitRebaseMergesArg=(--preserve-merges)
    gitPullRebaseMergesArg=(--rebase=preserve)
    if versionCompare "$GIT_VERSION" -lt 2.9 2>/dev/null; then
	gitAutoStashGitArg=(-c rebase.autoStash=true)
	gitAutoStashPullOrRebaseArg=()
    fi
fi

if [ "$GIT_UP_FETCH" ]; then
    git-wrapper fetch "$remote" || exit $?
fi

# Here, merges typically happen from the master / base branch to pick up
# changes. If we need to rebase a (feature) branch during pulling, that means
# that there was (accidentally?) concurrent development. Here, we still like to
# keep the merges intact; the decision to flatten them or not should only come
# when reintegrating the branch (namely, whether to rebase or merge).
if [ "$GIT_UP_NO_UPDATE" ]; then
    exit
elif [ "$GIT_UP_REBASE" ]; then
    remoteBranch="$(getRemoteBranch "$@")" || exit $?
    git-wrapper "${gitAutoStashGitArg[@]}" rebase "${gitAutoStashPullOrRebaseArg[@]}" "${gitRebaseMergesArg[@]}" "${@:1:$(($#-1))}" "$remoteBranch" || exit $?
elif git-isdetached; then
    # Checkout (and keep detached) a corresponding branch (or the base / master branch).
    branch="$(getDetachedBranch)" && git-existsbr "${remote}/${branch}" || exit $?
    if ! git-equals "${remote}/${branch}" HEAD; then
	if git-dirty --quiet; then
	    echo >&2 'Note: Not touching a dirty detached checkout.'
	else
	    # Try to fast-forward the corresponding branch; if it's already
	    # checked out in a different worktree (i.e. checkout fails), just
	    # forward the detached HEAD.
	    if git checkout "${branch}" >/dev/null 2>&1; then
		if git ff "${remote}/${branch}"; then
		    printf '\nForwarded detached %s branch.\n' "$branch"
		    git checkout --detach
		else	# Error case
		    git checkout --detach "${remote}/${branch}"
		fi
	    else
		git checkout --detach "${remote}/${branch}"
	    fi
	fi
    fi
else
    git "${gitAutoStashGitArg[@]}" pull "${gitAutoStashPullOrRebaseArg[@]}" "${gitPullRebaseMergesArg[@]}" "$remote" "$@" || exit $?
fi

[ "$submoduleHandling" = ignore ] || ! GIT_SUBMODULEUNINITIALIZED_MESSAGE='Warning: Uninitialized submodule(s) found:' git-submodule-uninitialized --print --recursive
