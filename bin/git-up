#!/bin/bash
shopt -qs extglob

: ${GIT_UP_PREFER_DETACHED_TAG_OVER_BRANCH:=}	# When the detached working copy both refers to a tag and a local branch, checkout the newest tag instead of forwarding the corresponding branch.
: ${GIT_UP_PREFER_LATEST_TAG_OVER_HIGHEST_VERSION:=}	# Use creation date ordering for remote tags instead of the default version-sorting.
: ${GIT_UP_CHECK_CONFIG_KEY=up.check}	# The config key for after-update check commands.

# Source:
#   https://stackoverflow.com/questions/30208928/can-git-pull-automatically-stash-and-pop-pending-changes
#   https://github.com/aanand/git-up

printUsage()
{
    local action='Pull (current branch; when detached and not dirty a corresponding branch (or the base / master branch), or if a detached tag checkout the tag with the highest version number / newest) and rebase'
    if [ "$GIT_UP_NO_UPDATE" ]; then
	action='Only fetch changes (no update of local branches)'
    elif [ "$GIT_UP_FETCH" ]; then
	action='Fetch and rebase changes'
    elif [ "$GIT_UP_REBASE" ]; then
	action='Rebase changes'
    fi

    cat <<HELPTEXT
$action in ${remote:-REMOTE}, and show a log of the changes.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[--gui|--terminal|--none] [--submodule ignore|yes|recurse] [-q|--quiet] ${remote:-REMOTE} [FETCH/PULL/REBASE-ARGS ...] [-?|-h|--help]"
}

getDetachedBranch()
{
    # On a detached checkout, use a branch that coincides with the detached
    # commit (assuming that there's only one) and has a corresponding remote
    # branch.
    local branch
    if branch="$(git-brname --detached-effective-branch --real-branch-only --raw 2>/dev/null)" \
	&& git-existsbr -- "${remote}/${branch}"
    then
	printf '%s\n' "$branch"
    fi
}
getFallbackBranch()
{
    # Fall back to the base / master branch.
    git-nbr 2>/dev/null \
	|| git-mbr 2>/dev/null
}

getRemoteBranch()
{
    if [ $# -gt 0 ] && git-existsbr -- "${!#}"; then
	git-remotebr "${remote:?}" "${!#}"
    else
	git-remotebr "${remote:?}"
    fi
}

remote=
submoduleHandling=recurse
typeset -a fetchPullArgs=()
typeset -a logDeltaArgs=(--submodule "$submoduleHandling")
typeset -a colorArg=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;

	--recurse-submodules)
			fetchPullArgs+=("$1" "${2?}"); shift; shift;;
	--recurse-submodules=*|--no-recurse-submodules)
			fetchPullArgs+=("$1"); shift;;

	--@(gui|terminal|none|quiet))
			logDeltaArgs+=("$1"); shift;;
	-[q])
			logDeltaArgs+=("$1"); shift;;
	--submodule)	logDeltaArgs+=("$1" "$2")
			submoduleHandling="$2"
			shift; shift
			;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	colorArg=("$1" "$2"); shift; shift;;
	--launch)	break;;
	--remote)	shift; remote="${1:?}"; shift;;
	*)		if [ -z "$remote" ]; then
			    remote="${1:?}"; shift
			else
			    break
			fi
			;;
    esac
done
if [ "$1" = '--launch' ]; then
    shift
else
    readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

    if [ "$GIT_UP_NO_UPDATE" ] && [ "$GIT_UP_FETCH" ]; then
	if remoteBranch="$(getRemoteBranch "$@" 2>/dev/null)"; then
	    # The delta needs to be done on the remote branch, as there'll be no
	    # update of local branches / HEAD.
	    logDeltaArgs+=(--branch "$remoteBranch")
	elif localBranch="$(git-lastbranch-command echo 2>/dev/null)" && remoteBranch="$(git-remotebr "${remote:?}" "$localBranch")"; then
	    # Though there's no branch checked out that has a corresponding
	    # remote branch, we've found a local branch in the reflog and that
	    # one has a remote branch. Typically, the working copy has checked
	    # out a tag, and that branch is the last one checked out before
	    # switching to tags.
	    logDeltaArgs+=(--branch "$remoteBranch")
	else
	    [ "${logDeltaArgs[*]}" = '--none' ] || echo >&2 "Warning: Could not determine corresponding ${remote:-REMOTE} branch, no logging possible."
	    logDeltaArgs=(--none)
	fi
    elif git-isdetached; then
	tagName="$(git istagged --print)"
	branch="$(getDetachedBranch)"

	# For a checked-out tag, the default delta handling will already log the
	# difference between the tags; no special action necessary.
	# For a detached branch, we want to log the changes on the corresponding
	# remote branch, or the base / master fallback branch.
	if { [ -n "$tagName" -a -n "$branch" ] && [ ! "$GIT_UP_PREFER_DETACHED_TAG_OVER_BRANCH" ]; } \
	    || [ -z "$tagName" ]
	then
	    [ -n "$branch" ] || branch="$(getFallbackBranch)"   # Only consider the fallback branches here so that a tag takes precedence.
	    if git-existsbr -- "${remote}/${branch}"; then
		logDeltaArgs+=(--branch "${remote}/${branch}")
	    else
		[ "${logDeltaArgs[*]}" = '--none' ] || echo >&2 "Warning: Detached working copy, and could not determine base / master ${remote:-REMOTE} branch, no logging possible."
		logDeltaArgs=(--none)
	    fi
	fi
    fi

    exec git-logdelta "${colorArg[@]}" "${logDeltaArgs[@]}" -- "${scriptName#git-}" --remote "${remote:?}" "${fetchPullArgs[@]}" --launch "$@"
fi

GIT_VERSION="$(git --version 2>/dev/null)"
# --rebase-merges and --rebase=merges is Git 2.18 and later.
typeset -a gitRebaseMergesArg=(--rebase-merges)
typeset -a gitPullRebaseMergesArg=(--rebase=merges)
# --autostash is Git 2.9 and later.
# -c rebase.autoStash=true is Git 2.6 and later.
typeset -a gitAutoStashGitArg=()
typeset -a gitAutoStashPullOrRebaseArg=(--autostash)
if versionCompare "$GIT_VERSION" -lt 2.18 2>/dev/null; then
    gitRebaseMergesArg=(--preserve-merges)
    gitPullRebaseMergesArg=(--rebase=preserve)
    if versionCompare "$GIT_VERSION" -lt 2.9 2>/dev/null; then
	gitAutoStashGitArg=(-c rebase.autoStash=true)
	gitAutoStashPullOrRebaseArg=()
    fi
fi

if [ "$GIT_UP_FETCH" ]; then
    # XXX: Don't use "git-wrapper fetch" there, because that would use my
    # hub-fetch extension if we got invoked via hub (e.g. through the
    # auto-fetching of "hub supersubreintegratetom").
    git-fetch "${fetchPullArgs[@]}" "$remote" "$@" || exit $?
fi

# Here, merges typically happen from the master / base branch to pick up
# changes. If we need to rebase a (feature) branch during pulling, that means
# that there was (accidentally?) concurrent development. Here, we still like to
# keep the merges intact; the decision to flatten them or not should only come
# when reintegrating the branch (namely, whether to rebase or merge).
if [ "$GIT_UP_NO_UPDATE" ]; then
    exit
elif [ "$GIT_UP_REBASE" ]; then
    remoteBranch="$(getRemoteBranch "$@")" || exit $?
    if [ $# -gt 0 ] && git-existsbr -- "${!#}"; then
	set -- "${@:1:$(($#-1))}"   # Drop the trailing <refspec> remote branch for the rebase.
    fi
    git-wrapper "${gitAutoStashGitArg[@]}" rebase "${gitAutoStashPullOrRebaseArg[@]}" "${gitRebaseMergesArg[@]}" "$@" "$remoteBranch" || exit $?
elif git-isdetached; then
    tagName="$(git istagged --print)"
    branch="$(getDetachedBranch)"

    if { [ -n "$tagName" -a -n "$branch" ] && [ "$GIT_UP_PREFER_DETACHED_TAG_OVER_BRANCH" ]; } \
	|| { [ -n "$tagName" ] && [ -z "$branch" ]; }
    then
	if git-dirty --quiet; then
	    echo >&2 'Note: Not touching a dirty detached checkout.'
	else
	    # Checkout the tag with the highest version number / newest tag.
	    newTagName='' isFoundCurrentTag=
	    while IFS=$'\n' read -r availableTagName
	    do
		[ "$tagName" = "$availableTagName" ] && isFoundCurrentTag=t
		[ "$isFoundCurrentTag" ] && newTagName="$availableTagName"	# The last tag (with the highest version number / newest) wins.
	    done < <(git tagtype all --version-tags-only ${GIT_UP_PREFER_LATEST_TAG_OVER_HIGHEST_VERSION:+--sort-by-age})
	    if [ ! "$isFoundCurrentTag" ]; then
		printf >&2 "ERROR: Couldn't locate current tag '%s'.\\n" "$tagName"
		# Note: Ignore this; don't abort.
	    elif ! git-equals "$tagName" "${newTagName:?}"; then
		whatTag='highest available version'; [ "$GIT_UP_PREFER_LATEST_TAG_OVER_HIGHEST_VERSION" ] && whatTag='newest available'
		git checkout --detach "$newTagName" \
		    && printf '\nForwarded detached tag %s to %s %stag %s\n' "$tagName" "$whatTag" "${GIT_UP_FETCH:+$remote }" "$newTagName"
	    fi
	fi
    else
	[ -n "$branch" ] || branch="$(getFallbackBranch)"   # Only consider the fallback branches here so that a tag takes precedence.

	if [ -n "$branch" ] && ! git-equals "${remote}/${branch}" HEAD; then
	    # Checkout (and keep detached) a corresponding branch (or the base / master branch).
	    if git-dirty --quiet; then
		echo >&2 'Note: Not touching a dirty detached checkout.'
	    else
		# Try to fast-forward the corresponding branch; if it's already
		# checked out in a different worktree (i.e. checkout fails), just
		# forward the detached HEAD.
		if git checkout "${branch}" >/dev/null 2>&1; then
		    if git ff "${remote}/${branch}"; then
			printf '\nForwarded detached %s branch.\n' "$branch"
			git checkout --detach
		    else    # Error case
			git checkout --detach "${remote}/${branch}"
		    fi
		else
		    git checkout --detach "${remote}/${branch}"
		fi
	    fi
	fi
    fi
else
    git "${gitAutoStashGitArg[@]}" pull "${fetchPullArgs[@]}" "${gitAutoStashPullOrRebaseArg[@]}" "${gitPullRebaseMergesArg[@]}" "$remote" "$@" || exit $?
fi

[ "$submoduleHandling" = ignore ] || ! GIT_SUBMODULEUNINITIALIZED_MESSAGE='Warning: Uninitialized submodule(s) found:' git-submodule-uninitialized --print --recursive

readarray -t afterUpdateChecks < <(git config --get-all "$GIT_UP_CHECK_CONFIG_KEY")
for afterUpdateCheck in "${afterUpdateChecks[@]}"
do
    eval "$afterUpdateCheck" >&2 || exit $?
done
