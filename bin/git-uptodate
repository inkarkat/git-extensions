#!/bin/bash
# Source: https://stackoverflow.com/a/25109122/813602
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-t|--tracked] [-q|--quiet] [--] [<remote>[/<branch>]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Check remote whether the current branch is on the same commit as the tracked
remote branch / passed remote (or whether a pull / push is needed).
Check remote whether there are tags with higher version numbers than the
currently checked out tag.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --tracked|-t	Evaluate the update need of the tracked remote branch,
			not the current branch. So the concern is about
			fetching, not pulling.
    --quiet|-q		Do not print an up-to-date message or the pending
			commits.
HELPTEXT
}

[ -t 1 ] \
    && typeset colorArg=(--color=always) \
    || typeset -a colorArg=(--no-color)
isTracked=
isQuiet=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--color=auto)	shift;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1" "$2"); shift; shift;;
	--tracked|-t)	shift; isTracked=t;;
	--quiet|-q)	shift; isQuiet=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

branchName=
remoteBranch=
remote=
haveBranchName()
{
    case $# in
	0)  branchName="$(git-brname --real-branch-only 2>/dev/null)" \
		&& remoteBranch="$(git-tracks)" \
		&& remote="${remoteBranch%%/*}" \
		&& return

	    typeset -a remotes=(); readarray -t remotes < <(git remote)
	    case ${#remotes[@]} in
		0)	printf >&2 'ERROR: No remotes.\n'; exit 99;;
		1)	remote="${remotes[0]}";;
		*)	printf >&2 'ERROR: Multiple remotes: %s\n' "$(joinBy ', ' "${remotes[@]}")"; exit 2;;
	    esac
	    ;;
	1)  case "$1" in
		*/*)    branchName="${1#*/}"
			remoteBranch="$1"
			if ! git-existsbr -- "$remoteBranch"; then
			    printf >&2 'ERROR: Remote branch %s does not exist.\n' "$remoteBranch"
			    exit 99
			fi
			remote="${1%%/*}"
			;;
		*)	branchName="$(git-brname --real-branch-only)" \
			    && remoteBranch="${1}/${branchName}"
			remote="${1:?}"
			;;
	    esac
	    if ! git-existsremote "$remote"; then
		printf >&2 'ERROR: Remote %s does not exist.\n' "$remote"
		exit 99
	    fi
	    ;;
	*)  printUsage "$0" >&2; exit 2;;
    esac

    [ -n "$branchName" ]
}

checkBranch()
{
    if [ -z "$remoteBranch" ]; then
	echo >&2 'ERROR: Not tracking a remote branch!'
	exit 99
    fi

    remoteRev="$(git ls-remote "${remoteBranch%%/*}" "${remoteBranch#*/}" | cut -f1)" || exit 2
    [ "$isTracked" ] \
	&& compareRev="$(git rev-parse "$remoteBranch")" \
	|| compareRev="$(git rev-parse HEAD)"
    remote="${remoteBranch%%/*}"
}

checkTag()
{
    remoteRev='' isFoundCurrentTag=
    while IFS=$'\n' read -r remoteTagName
    do
	[ "$tagName" = "$remoteTagName" ] && isFoundCurrentTag=t
	[ "$isFoundCurrentTag" ] && remoteRev="$remoteTagName"	# The latest tag wins.
    done < <(git rtagtype "$remote" all --version-tags-only)
    if [ ! "$isFoundCurrentTag" ]; then
	printf >&2 "ERROR: Couldn't locate current tag '%s' in %s tags.\\n" "$tagName" "$remote"
	exit 3
    fi

    compareRev="$tagName"
}


if ! haveBranchName "$@" \
    && tagName="$(git istagged --print ${isTracked:+--revision "$remoteBranch"})"
then
    checkTag "$@"
else
    checkBranch "$@"
fi

if git-equals "$compareRev" "$remoteRev" 2>/dev/null; then
    [ "$isQuiet" ] || echo 'up to date'
else
    [ "$isQuiet" ] || printf 'not up to date:\n%s\n   ↓↓↓\n%s\n' \
	"$(git lg1 "${colorArg[@]}" "$compareRev" --)" \
	"$(git lg1 "${colorArg[@]}" "$remoteRev" -- 2>/dev/null \
	    || printf '%s\n' "$remoteRev" | git-lurl "$remote" -\
	)"
    exit 1
fi
