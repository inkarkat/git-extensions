#!/bin/bash
set -o noglob

isForce=
typeset -a gitRemoteMutateArgs=()
typeset -a pushArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--force|-f)	pushArgs+=("$1"); shift; isForce=t;;
	--)		pushArgs+=("$1"); shift; break;;
	*)		pushArgs+=("$1"); shift;;
    esac
done
set -- "${pushArgs[@]}" "$@"

# Need to specify a branch, because the current branch presumably tracks origin,
# not upstream. Because of this, Git wouldn't normally allow pushing to
# upstream:
# > fatal: You are pushing to remote 'upstream', which is not the upstream of
# > your current branch 'master', without telling me what to push to update
# > which remote branch.
parsedArguments="$(git-parse-last-remotebr-argument --separate-remote-and-branch upstream "$@")" || exit $?
eval "set -- $parsedArguments"
printf -v quotedBranch %q "${!#}"

if [ "$isForce" ]; then
    contextCommand="git uin out --color=always $quotedBranch"
else
    contextCommand="git uout lg --color=always --branch $quotedBranch"
fi

git-rev-range-outgoing upstream -4 commitcheck --severity-prefix 'Note' RANGE

exec git-remote-mutate upstream --message "${isForce:+Force-}Push" --argument "${!#} to upstream" --context-command "$contextCommand" "${gitRemoteMutateArgs[@]}" \
    push "$@"
