#!/bin/bash
shopt -qs extglob

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly libDir="${projectDir}/lib"

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t

case ",${DEBUG:-}," in
    *,git-wc-with-suffix-do:verbose,*) dump-args -- "$@";;
esac

printUsage()
{
    git-wcdo --help 2>&1 | sed \
	-e '1s#^.*$#Execute "git SIMPLECOMMAND" and/or COMMANDLINE on each passed WORKING-COPY, but have a suffix (e.g. WC.alt) in the directory name.#' \
	-e '2b removeFirstParagraphLoop' \
	-e '/^ *--no-pager/i\
    --quiet|-q		Do not complain when no working copies are found or a\
			passed DIRSPEC is not a directory.\
    --worktrees		Also include clones / worktrees that sit next to\
			WORKING-COPY, but have a suffix (e.g. WC.alt) in the\
			directory name.\
    --suffix SUFFIX	The optional file extension (e.g. .alt) in the working\
			copy directory name. A worktree with WC.SUFFIX is\
			preferred if it exists, but it falls back to using the\
			plain WC. (If you want to only execute in WC.SUFFIX,\
			you can directly pass the SUFFIX in the WORKING-COPY\
			arguments to git-wcdo.' \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*git-wcdo /\1\2'"$(basename "$1")"' [-q|--quiet] [--worktrees] [--suffix SUFFIX] /; }' \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop }'
}

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

suffix=
isWorktrees=
isQuiet=
isIgnoreNonexisting=
typeset -a wcs=()
parseCustomInto()
{
    local intoVarName="${1?}"; shift
    # git-do-extensions doesn't understand our custom options, so they are
    # intermingled with the wcs (if passed before them) or in the unknown arguments
    # (if after the dashdash arguments); we need to separate them on our own.
    while [ $# -ne 0 ]
    do
	case "$1" in
	    --worktrees)
			shift; isWorktrees=t;;
	    --suffix)	shift; suffix="$1"; shift;;
	    --quiet|-q)	shift; isQuiet=t;;
	    --ignore-nonexisting)
			shift; isIgnoreNonexisting=t;;
	    --)		shift;;	# We'll append -- to wcWithSuffixes later.
	    *)		if [ -n "$intoVarName" ]; then
			    eval "${intoVarName}+=(\"\$1\")"
			else
			    printf >&2 'ERROR: Unknown option: "%s"!\n' "$1"
			    exit 2
			fi
			shift
			;;
	esac
    done
}

# Use git-do-extensions for parsing; this avoids duplicating the wcdo-args once
# more, and allows us to handle the options added by the extension (like
# --dirty), too.
GIT_DOEXTENSIONS_WRAPPEE=git-wc-with-suffix-do
GIT_DOEXTENSIONS_DASHDASH_ARGS_BEFORE_SIMPLECOMMAND=t
: ${GIT_DOEXTENSIONS_WHAT:=working copies}
source "${libDir}/git-do-extensions.sh" || exit 3

parseCommand "$@"
if [ "${wcdoArgs[*]:(-1)}" = -- ]; then
    # Remove a trailing --; we'll separately delimit any SIMPLECOMMAND in "${args[@]}".
    wcdoArgs=("${wcdoArgs[@]:(-1)}")
fi
parseCustomInto wcs "${dashdashArgs[@]}"
parseCustomInto '' "${unknownOptions[@]}"

case ",${DEBUG:-}," in
    *,git-wc-with-suffix-do,*)
	    dump-args "$GIT_DOEXTENSIONS_WRAPPEE" "${wcdoCommandArgs[@]}" "${wcdoArgs[@]}" "${wcs[@]}" -- "${args[@]}"
	    ;;
    *,git-wc-with-suffix-do:verbose,*)
	    dump-args -a wcdoCommandArgs -- "${wcdoCommandArgs[@]}"
	    dump-args -a wcdoArgs -- "${wcdoArgs[@]}"
	    dump-args -a wcs -- "${wcs[@]}"
	    dump-args -a args -- "${args[@]}"
	;;
esac

if [ "$isWorktrees" ]; then
    if [ "$suffix" ]; then
	echo "ERROR: Cannot combine --suffix and --worktrees."
	echo
	printUsage "$0"
	exit 2
    fi >&2

    typeset -a collectDirnames=()
    for d in "${wcs[@]}"
    do
	collectDirnames+=("$d"*)
    done
    wcs=("${collectDirnames[@]}")
fi
if [ ${#wcs[@]} -eq 0 ]; then
    if [ ! "$isQuiet" ]; then
	echo "ERROR: No WORKING-COPYs."
	echo
	printUsage "$0"
    fi
    exit 2
fi >&2

typeset -a wcWithSuffixes=()
for dir in "${wcs[@]}"
do
    [ "$suffix" -a -d "${dir}${suffix}" ] && dir+="$suffix"
    if ! [ -d "$dir" ]; then
	[ "$isIgnoreNonexisting" ] || [ "$isQuiet" ] || printf >&2 'Warning: No working copy %s found, skipping.\n' "$dir"
	continue
    fi

    wcWithSuffixes+=("$dir")
done

dashdashArgs=("${wcWithSuffixes[@]}" --)    # executeCommand() takes dashdashArgs as the working copies.
GIT_WCDO_STORE_SUBCOMMAND='wc-with-suffix' \
GIT_WCDO_STORE_SUBJECT="${GIT_WCDO_STORE_SUBJECT-$(pathAsFilename --as-is --encode -- "${wcWithSuffixes[0]}")-${#wcWithSuffixes[@]}}" \
GIT_DOEXTENSIONS_WRAPPEE=git-wcdo-core \
    executeCommand  # Do not invoke git-wcdo-core directly, so that a potential accumulationCommand is applied as well.
