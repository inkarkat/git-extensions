#!/bin/bash
shopt -qs extglob

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t

case ",${DEBUG:-}," in
    *,git-wc-with-suffix-do:verbose,*) dump-args -- "$@";;
esac

printUsage()
{
    cat <<HELPTEXT
Execute "git SIMPLECOMMAND" and/or COMMANDLINE on each passed WORKING-COPY, with
--worktrees also on clones / worktrees that sit next to WORKING-COPY, but have a
suffix (e.g. WC.alt) in the directory name. With --suffix, a worktree with
WC.SUFFIX is preferred if it exists, but it falls back to using the plain WC.
(If you want to only execute in WC.SUFFIX, you can directly pass the SUFFIX in
the WORKING-COPY arguments to git-wcdo.)
HELPTEXT
    printf 'Usage: %q %s%s %s\n' "$(basename "$1")" '[--suffix SUFFIX|--worktrees] [-q|--quiet|--ignore-nonexisting] [--untracked|--dirty|--wips [(+|-)CHECK [(+|-)...]]|--same-branch] [--no-pager] [--no-header|--branch-name]' "${hasProgressNotification:+ [--progress SINK]}" '[-i|--interactive] [--separate-errors] [--no-git-color] [--single-success] [--status-99-is-noop] [--abort-on-failure|-X|--abort-on EXIT_STATUS] [--skip-files] [-s|--skip-foreign|--foreign-command "COMMANDLINE" [...]] [-P|--predicate-command "COMMANDLINE" [...]] [-c|--command "COMMANDLINE" [-c ...]] [--] WORKING-COPY [...] [-- SIMPLECOMMAND ...] [-?|-h|--help]'
}

suffix=
isWorktrees=
isQuiet=
isIgnoreNonexisting=
typeset -a wcs=()
parseDashdash()
{
    # git-do-extensions doesn't understand our custom options, so they are
    # intermingled with the wcs; we need to separate them on our own.
    local isDoneWorkingCopies=
    while [ $# -ne 0 ]
    do
	case "$1" in
	    --worktrees)
			shift; isWorktrees=t;;
	    --suffix)	shift; suffix="$1"; shift;;
	    --quiet|-q)	shift; isQuiet=t;;
	    --ignore-nonexisting)
			shift; isIgnoreNonexisting=t;;
	    --)		shift; [ ${#wcs[@]} -eq 0 ] || isDoneWorkingCopies=t;;
	    *)		[ "$isDoneWorkingCopies" ] \
			    && args+=("$1") \
			    || wcs+=("$1")
			shift
			;;
	esac
    done
}

# Use git-do-extensions for parsing; this avoids duplicating the wcdo-args once
# more, and allows us to handle the options added by the extension (like
# --dirty), too.
GIT_DOEXTENSIONS_WRAPPEE=git-wc-with-suffix-do
GIT_DOEXTENSIONS_DASHDASH_ARGS_BEFORE_SIMPLECOMMAND=t
: ${GIT_DOEXTENSIONS_WHAT:=working copies}
source git-do-extensions || exit 3

parseCommand "$@"
if [ "${wcdoArgs[*]:(-1)}" = -- ]; then
    # Remove a trailing --; we'll separately delimit any SIMPLECOMMAND in "${args[@]}".
    wcdoArgs=("${wcdoArgs[@]:(-1)}")
fi
parseDashdash "${dashdashArgs[@]}"

case ",${DEBUG:-}," in
    *,git-wc-with-suffix-do,*)
	    dump-args "$GIT_DOEXTENSIONS_WRAPPEE" "${wcdoCommandArgs[@]}" "${wcdoArgs[@]}" "${wcs[@]}" "${args[@]}"
	    ;;
    *,git-wc-with-suffix-do:verbose,*)
	    dump-args -a wcdoCommandArgs -- "${wcdoCommandArgs[@]}"
	    dump-args -a wcdoArgs -- "${wcdoArgs[@]}"
	    dump-args -a dashdashArgs -- "${dashdashArgs[@]}"
	    dump-args -a wcs -- "${wcs[@]}"
	    dump-args -a args -- "${args[@]}"
	;;
esac

if [ "$isWorktrees" ]; then
    if [ "$suffix" ]; then
	echo "ERROR: Cannot combine --suffix and --worktrees."
	echo
	printUsage "$0"
	exit 2
    fi >&2

    typeset -a collectDirnames=()
    for d in "${wcs[@]}"
    do
	collectDirnames+=("$d"*)
    done
    wcs=("${collectDirnames[@]}")
fi
if [ ${#wcs[@]} -eq 0 ]; then
    if [ ! "$isQuiet" ]; then
	echo "ERROR: No WORKING-COPYs."
	echo
	printUsage "$0"
    fi
    exit 2
fi >&2

typeset -a wcWithSuffixes=()
for dir in "${wcs[@]}"
do
    [ "$suffix" -a -d "${dir}${suffix}" ] && dir+="$suffix"
    if ! [ -d "$dir" ]; then
	[ "$isIgnoreNonexisting" ] || [ "$isQuiet" ] || printf >&2 'Warning: No working copy %s found, skipping.\n' "$dir"
	continue
    fi

    wcWithSuffixes+=("$dir")
done

GIT_WCDO_STORE_SUBCOMMAND='wc-with-suffix' \
GIT_WCDO_STORE_SUBJECT="${GIT_WCDO_STORE_SUBJECT-$(pathAsFilename --as-is --encode -- "${wcWithSuffixes[0]}")-${#wcWithSuffixes[@]}}" \
    exec git-wcdo-core "${wcdoCommandArgs[@]}" "${wcdoArgs[@]}" "${wcWithSuffixes[@]}" -- "${args[@]}"
