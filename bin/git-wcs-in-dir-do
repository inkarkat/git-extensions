#!/bin/bash
shopt -qs extglob

case ",${DEBUG:-}," in
    *,git-wcs-in-dir-do:verbose,*) dump-args -- "$@";;
esac

printUsage()
{
    git-wcdo --help 2>&1 | sed \
	-e '1s#^.*$#Execute "git SIMPLECOMMAND" and/or COMMANDLINE on all repositories that are checked out (directly, not in subdirs) in any DIRSPEC.#' \
	-e '2b removeFirstParagraphLoop' \
	-e '/^ *--no-pager/i\
    --quiet|-q		Do not complain when no working copies are found or a\
			passed DIRSPEC is not a directory.\
    --worktrees		Also include additional working copies checked out from\
			the same repository (via git worktree).\
    --skip-symlinks	Do not consider passed DIRSPEC(s) that are symbolic\
			links to another directory. (This cannot be easily\
			checked from inside the working copy with\
			-P|--predicate-command.)' \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*git-wcdo /\1\2'"$(basename "$1")"' [-q|--quiet] [--worktrees] [--skip-symlinks] /; s/ WORKING-COPY / DIRSPEC /; }' \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop }'
}

case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac

isForeign=
parseWcdo()
{
    # We need to extract certain information from the wcdo-args, and tweak the
    # format a tiny bit, too.
    while [ $# -ne 0 ]
    do
	case "$1" in
	    --foreign-command)
			isForeign=t; shift; shift;;
	    *)		shift;;
	esac
    done
    if [ "${wcdoArgs[*]:(-1)}" = -- ]; then
	# Remove a trailing --; we'll separately delimit any SIMPLECOMMAND in "${args[@]}".
	wcdoArgs=("${wcdoArgs[@]:(-1)}")
    fi
}

isQuiet=
isSkipSymlinks=
compareOp=-d
typeset -a dirspecs=()
parseCustomInto()
{
    local intoVarName="${1?}"; shift
    # git-do-extensions doesn't understand our custom options, so they are
    # intermingled with the dirspecs (if passed before them) or in the unknown
    # options (if after the dashdash arguments); we need to separate them on our
    # own.
    while [ $# -ne 0 ]
    do
	case "$1" in
	    --quiet|-q)	shift; isQuiet=t;;
	    --skip-symlinks)
			shift; isSkipSymlinks=t;;
	    --worktrees)
			shift; compareOp=-e;;
	    --)		shift;;	# We'll append -- to dirspecs later.
	    *)		if [ -n "$intoVarName" ]; then
			    eval "${intoVarName}+=(\"\$1\")"
			else
			    printf >&2 'ERROR: Unknown option: "%s"!\n' "$1"
			    exit 2
			fi
			shift
			;;
	esac
    done
}

# Use git-do-extensions for parsing; this avoids duplicating the wcdo-args once
# more, and allows us to handle the options added by the extension (like
# --dirty), too.
GIT_DOEXTENSIONS_WRAPPEE=git-wcs-in-dir-do
GIT_DOEXTENSIONS_DASHDASH_ARGS_BEFORE_SIMPLECOMMAND=t
: ${GIT_DOEXTENSIONS_WHAT:=working copies}
source git-do-extensions || exit 3

parseCommand "$@"
parseWcdo "${wcdoArgs[@]}"
parseCustomInto dirspecs "${dashdashArgs[@]}"
parseCustomInto '' "${unknownOptions[@]}"

case ",${DEBUG:-}," in
    *,git-wcs-in-dir-do,*)
	    dump-args "$GIT_DOEXTENSIONS_WRAPPEE" "${wcdoCommandArgs[@]}" "${wcdoArgs[@]}" "${dirspecs[@]}" "${args[@]}"
	    ;;
    *,git-wcs-in-dir-do:verbose,*)
	    dump-args -a wcdoCommandArgs -- "${wcdoCommandArgs[@]}"
	    dump-args -a wcdoArgs -- "${wcdoArgs[@]}"
	    dump-args -a unknownOptions -- "${unknownOptions[@]}"
	    dump-args -a dirspecs -- "${dirspecs[@]}"
	    dump-args -a args -- "${args[@]}"
	;;
esac

if [ ${#dirspecs[@]} -eq 0 ]; then
    echo "ERROR: No DIRSPEC(s)."
    echo
    printUsage "$0"
    exit 2
fi >&2

typeset -a wcs=()
for baseDir in "${dirspecs[@]}"
do
    if [ ! -d "$baseDir" ]; then
	[ "$isQuiet" ] || printf >&2 'ERROR: Not a directory: %s\n' "$baseDir"
	continue
    fi

    for dir in "${baseDir}"/*
    do
	[ -d "$dir" ] || continue
	[ -n "$isSkipSymlinks" -a -h "$dir" ] && continue
	if [ $compareOp "${dir}/.git" ] || [ -n "$isForeign" -a ! -e "${dir}/.git" ]; then
	    # Pass to git-wcdo if a Git repo (or --worktrees) or if
	    # --foreign-command should be executed on non-Git working copies.
	    wcs+=("$dir")
	fi
    done
done
if [ ${#wcs[@]} -eq 0 ]; then
    [ "$isQuiet" ] || echo >&2 "ERROR: No working copies found."
    exit 1
fi

dashdashArgs=("${wcs[@]}" --)	# executeCommand() takes dashdashArgs as the working copies.
GIT_WCDO_STORE_SUBCOMMAND='wcs-in-dir' \
GIT_WCDO_STORE_SUBJECT="${GIT_WCDO_STORE_SUBJECT-$(pathAsFilename --as-is --encode -- "${dirspecs[0]}")-${#dirspecs[@]}}" \
GIT_DOEXTENSIONS_WRAPPEE=git-wcdo-core \
    executeCommand  # Do not invoke git-wcdo-core directly, so that a potential accumulationCommand is applied as well.
