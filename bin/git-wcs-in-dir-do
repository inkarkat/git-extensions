#!/bin/bash
shopt -qs extglob

printUsage()
{
    git-wcdo --help 2>&1 | sed \
	-e '1s#^.*$#Execute "git SIMPLECOMMAND" and/or COMMANDLINE on all repositories that are checked out (directly, not in subdirs) in any DIRSPEC.#' \
	-e '2b removeFirstParagraphLoop' \
	-e '/^ *--no-pager/i\
    --quiet|-q		Do not complain when no working copies are found or a\
			passed DIRSPEC is not a directory.\
    --worktrees		Also include additional working copies checked out from\
			the same repository (via git worktree).\
    --skip-symlinks	Do not consider passed DIRSPEC(s) that are symbolic\
			links to another directory. (This cannot be easily\
			checked from inside the working copy with\
			-P|--predicate-command.)' \
	-e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*git-wcdo /\1\2'"$(basename "$1")"' [-q|--quiet] [--worktrees] [--skip-symlinks] /; s/ WORKING-COPY / DIRSPEC /; }' \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop }'
}

isQuiet=
isForeign=
isSkipSymlinks=
compareOp=-d
isDoneDirspecs=
typeset -a dirspecs=()
typeset -a wcdoArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;

	-+([is]))	wcdoArgs+=("$1"); shift;;
	--@(no-pager|no-header|branch-name|interactive|separate-errors|no-git-color|no-color|color=*|abort-on-failure|single-success|--status-99-is-noop|skip-files|skip-foreign))
			wcdoArgs+=("$1"); shift;;
	-[cX])		wcdoArgs+=("$1" "$2"); shift; shift;;
	--@(abort-on|color|command|progress|predicate-command))
			wcdoArgs+=("$1" "$2"); shift; shift;;

	--quiet|-q)	shift; isQuiet=t;;
	--skip-symlinks)
			shift; isSkipSymlinks=t;;
	--foreign-command)
			wcdoArgs+=("$1" "$2"); isForeign=t; shift; shift;;
	--worktrees)	shift; compareOp=-e;;
	--)		shift; [ "$isDoneDirspecs" ] && break || isDoneDirspecs=t;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		if [ "$isDoneDirspecs" ]; then
			    break
			else
			    dirspecs+=("$1"); shift
			fi
			;;
    esac
done
if [ ${#dirspecs[@]} -eq 0 ]; then
    echo "ERROR: No DIRSPEC(s)."
    echo
    printUsage "$0"
    exit 2
fi >&2

typeset -a wcs=()
for baseDir in "${dirspecs[@]}"
do
    if [ ! -d "$baseDir" ]; then
	[ "$isQuiet" ] || printf >&2 'ERROR: Not a directory: %s\n' "$baseDir"
	continue
    fi

    for dir in "${baseDir}"/*
    do
	[ -d "$dir" ] || continue
	[ -n "$isSkipSymlinks" -a -h "$dir" ] && continue
	if [ $compareOp "${dir}/.git" ] || [ -n "$isForeign" -a ! -e "${dir}/.git" ]; then
	    # Pass to git-wcdo if a Git repo (or --worktrees) or if
	    # --foreign-command should be executed on non-Git working copies.
	    wcs+=("$dir")
	fi
    done
done
if [ ${#wcs[@]} -eq 0 ]; then
    [ "$isQuiet" ] || echo >&2 "ERROR: No working copies found."
    exit 1
fi

GIT_WCDO_STORE_SUBCOMMAND='wcs-in-dir' \
GIT_WCDO_STORE_SUBJECT="${GIT_WCDO_STORE_SUBJECT-$(pathAsFilename --as-is --encode -- "${dirspecs[0]}")-${#dirspecs[@]}}" \
    exec git-wcdo "${wcdoArgs[@]}" "${wcs[@]}" -- "$@"
