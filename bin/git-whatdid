#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-m|--match PATTERN|-k|--keywords|-s|--scope] [<log-options>] [<revision range>] [[--] <path>...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Summarizes commit title prefixes (like "Refactoring:") that appear at the
beginning, according to frequency in the passed commit range.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --match|-m PATTERN	Match (extended AWK regexp) PATTERN.
    --keywords|-k	Only match commit keywords ("Foo:" or "FOO:").
    --scope|-s		Only match scope prefixes (that characterize a file or
			module).
SEE ALSO:
- commitkeywordtally only recognizes my official keywords and works on arbitrary
  log input
HELPTEXT
}
what='prefixes'
pattern='^[^:[:space:]]+:$'
filterPattern=
typeset -a gitLogArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--match|-m)	shift; pattern="$1"; shift;;
	--keywords|-k)	shift; what='keywords'; filterPattern='^([[:upper:]]+|[[:upper:]][:digit:]]+[[:upper:]]|[[:upper:]][[:lower:]]+):$';;
	--scope|-s)	shift; what='scopes'; filterPattern='^[^:[:space:][:upper:]][^:]+:$';;
	--)		gitLogArgs+=("$@"); shift; break;;
	*)		gitLogArgs+=("$1"); shift;;
    esac
done

whatdid()
{
    git log --pretty=tformat:%B "${gitLogArgs[@]}" \
	| awk -F '[ ]' \
	    -v what="$what" \
	    -v pattern="$pattern" \
	    -v filterPattern="$filterPattern" \
'
{
    commitCount += 1
    for (i = ($1 ~ /^[[:upper:]]+-[[:digit:]]+/ ? 2 : 1); i <= NF && $i ~ pattern; i++) {
	if (filterPattern == "" || $i ~ filterPattern) {
	    prefix[$i] += 1
	    prefixCount += 1
	}
    }
}

function prefixCompare(i1, v1, i2, v2)
{
    return (v1 == v2 ? (i1 == i2 ? 0 : i1 < i2 ? -1 : 1) : v1 < v2 ? 1 : -1)
}
END {
    for (p in prefix) {
	len = length(p)
	prefixLength = (len > prefixLength ? len : prefixLength)
    }

    PROCINFO["sorted_in"] = "prefixCompare"
    for (p in prefix) {
	prefixProportion = (100 * prefix[p] / prefixCount)
	commitProportion = (100 * prefix[p] / commitCount)

	prefixReport = (prefixProportion < 1 ? "" : sprintf("%2.f%% of %s", prefixProportion, what))
	commitReport = (commitProportion < 1 ? "" : sprintf("%2.f%% of commits", commitProportion))
	percentageReport = (prefixReport == "" && commitReport == "" ? "" : " (" prefixReport (prefixReport != "" && commitReport != "" ? ", " : "") commitReport ")")

	printf "%-" prefixLength "s %5d%s\n", p, prefix[p], percentageReport
    }
}
'
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
eval 'whatdid' \
    "${pager:+|}" '"${pager[@]}"'
