#!/bin/bash
set -o pipefail
shopt -qs extglob globstar nullglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-s|--summary|-n|--names-only [-1|--most-only]|-1|--most-only] [-c|--committer] [-e|--email] [-N|--alphabetic] [--follow] [<log-args> ...] [--] [FILE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show who did the initial commit for FILE(s) grouped by author.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --summary|-s	Only show who contributed how many files (absolute and
			percentage distribution) for each author, not all files
			grouped by authors.
    --names-only|-n	Only show the authors that created files
			(alphabetically).
    --alphabetic|-N	Output sorted by author instead of who created the most
			files.
    --most-only|-1	Only show the single author with the most file creations.
HELPTEXT
}

action=printAuthors
isAlphabetic=
isMostOnly=
logFormat='%aN'
typeset -a logArgs=()
typeset -a fileArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;

	--summary|-s)	shift; action=printSummary;;
	--alphabetic|-N)
			shift; isAlphabetic=t;;
	--names-only|-n)
			shift; action=printNamesOnly;;
	--most-only|-1)	shift; isMostOnly=t; [ "$action" = printAuthors ] && action=printSummary; isAlphabetic=;;
	--committer|-c)	shift; logFormat="${logFormat//%a/%c}";;
	--email|-e)	shift; logFormat+=' <%aE>';;

	# Ignore options that influence commit formatting (we need just the
	# author), and diff options.
	-+([cmtpuz]))	shift;;
	--@(abbrev-commit|no-abbrev-commit|oneline|no-notes|show-signature|relative-date|parents|children|left-right|graph|cc|patch|no-patch|raw|patch-with-raw|numstat|shortstat|summary|patch-with-stat|name-only|name-status|no-color))	shift;;
	-[U])	shift; shift;;
	--@(pretty|format|notes|date|unified|stat|dirstat|submodule|color|word-diff|word-diff-regex|color-words)=*)	shift;;
	--@(pretty|format|notes|date|unified|stat|dirstat|submodule|color|word-diff|word-diff-regex|color-words))	shift; shift;;
	--)		shift; fileArgs=("$@"); break;;
	*)		logArgs+=("$1"); shift;;
    esac
done
if [ ${#fileArgs[@]} -eq 0 ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    logArgs+=("$@")
    while [ ${#logArgs[@]} -ne 0 ]
    do
	lastArg="${logArgs[-1]}"
	[ -e "$lastArg" ] || break

	fileArgs=("$lastArg" "${fileArgs[@]}")
	logArgs=("${logArgs[@]:0:${#logArgs[@]}-1}")
    done
fi
[ ${#fileArgs[@]} -gt 0 ] || fileArgs=(.)

typeset -a files=()
for arg in "${fileArgs[@]}"
do
    if [ -d "$arg" ]; then
	files+=("${arg%/}"/**)
    else
	files+=("$arg")
    fi
done

let commitNum=0
typeset -A authorCommitCount=() authorFiles=()
for filespec in "${files[@]}"
do
    [ -d "$filespec" ] && continue  # Directories have been expanded already; skip them as they would count any file addition inside them.

    while IFS=$'\t' read -r author
    do
	[ -n "$author" ] || continue

	authorFiles["$author"]+="${authorFiles["$author"]:+$'\n'}      ${filespec#./}"

	if [ -z "${authorCommitCount["$author"]}" ]; then
	    authorCommitCount["$author"]=1
	else
	    authorCommitCount["$author"]=$((${authorCommitCount["$author"]} + 1))
	fi
	let commitNum+=1
    done < <(git log --pretty="tformat:${logFormat}" --diff-filter=A "${logArgs[@]}" -- "$filespec")
done

readarray -t sortedAuthors < <(
    typeset -a sortByCountArgs=(--key 1,1nr); [ "$isAlphabetic" ] && sortByCountArgs=()
    for author in "${!authorCommitCount[@]}"
    do
	printf '%d\t%s\n' "${authorCommitCount["$author"]}" "$author"
    done \
	| sort --field-separator $'\t' "${sortByCountArgs[@]}" --key 2,2 \
	| field --field-separator $'\t' --remove 1
)

printAuthors()
{
    local separator=
    local author; for author in "${sortedAuthors[@]}"
    do
	printf '%s%s (%d):\n%s\n' "$separator" "$author" ${authorCommitCount["$author"]} "${authorFiles["$author"]}"
	separator=$'\n'
    done
}

printSummary()
{
    local author; for author in "${sortedAuthors[@]}"
    do
	if [ "$isMostOnly" ]; then
	    printf '%4d%% %s\n' $((100 * ${authorCommitCount["$author"]} / commitNum)) "$author"
	    break
	else
	    printf '%6d %3d%%  %s\n' ${authorCommitCount["$author"]} $((100 * ${authorCommitCount["$author"]} / commitNum)) "$author"
	fi
    done
}

printNamesOnly()
{
    local author; for author in "${sortedAuthors[@]}"
    do
	printf '%s\n' "$author"
	[ "$isMostOnly" ] && break
    done
}

typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
eval '$action "$@"' "${pager:+|}" '"${pager[@]}"'
