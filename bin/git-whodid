#!/bin/bash
set -o pipefail
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-s|--summary|--csv|--spark|-n|--names-only [-1|--most-only]|-1|--most-only] [-c|--committer] [-e|--email] [--each-file|--each-dir [-r|--recursive] [--full]] [-N|--alphabetic] [--follow] [<log-args> ...] [<revision range>] [[--] <path>...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show short log grouped by name and sorted by the number of their commits.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --summary|-s	Only show the number of commits for each author, not the
			short logs.
    --csv		Show the number of commits and author name,
			comma-separated. Like --summary but in CSV format.
    --spark		Show a sparkline bar (the higher, the more commits)
			followed by the author's initials, all in one line.
    --names-only|-n	Only show the authors that did commits.
    --alphabetic|-N	Output the logs / number of commits sorted by author
			instead of commit numbers.
    --most-only|-1	Only show the single author with the most commits.
    --each-file		Show separate author reports (sparkline by default, but
			other formats can be chosen as well) for each file [in
			<path>(s)].
    --each-dir		Show separate author reports for each directory [in
			<path>(s)].
    --recursive|-r	Also cover files / directories in subdirectories.
    --full		Show the full shortlog, not the sparkline bar, also
			with --each-file or --each-dir.

For finer granularity, use git-whoowns which counts changed lines.
HELPTEXT
}

typeset -a colorArg=(--color=always)
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
if [ ! -t 1 ]; then
    colorArg=()
    pager=()
    formatter=()
fi
typeset -a logArgs=()
typeset -a shortlogOrderingArg=(--numbered)
typeset -a shortlogArgs=()
prettyFormat=short
typeset -a preFilter=(grep -v -e '^[[:space:]]*<none>$')
typeset -a postFilter=()
filterSelector=
finalSelector=
isSummary=
typeset -a nonRecursiveArgs=()
eachOutputFormatArg='--spark'
eachType=
eachRecursion=
while [ $# -ne 0 ]
do
    case "$1" in
	--color=auto)	shift; continue;;
	--no-color|--color=*)
			colorArg=("$1"); shift; continue;;
	--color)	[ "$2" = auto ] || colorArg=("$1" "$2"); shift; shift; continue;;

	--each-file)	shift; eachType=File; continue;;
	--each-dir)	shift; eachType=Dir; continue;;
	--recursive|-r)	shift; eachRecursion=t; continue;;
	--)		break;;
	--summary|-s|--names-only|-n|--csv)
			: ${HEADER_NEWLINE=$'\n'}; export HEADER_NEWLINE;&
	--spark|--most-only|-1)
			eachOutputFormatArg="$1";;
	--full)		shift; : ${HEADER_NEWLINE=$'\n'}; export HEADER_NEWLINE; eachOutputFormatArg=''; continue;;
	*)		nonRecursiveArgs+=("$1");;
    esac

    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	-+([ce]))	shortlogArgs+=("$1"); shift;;
	-w*)		shortlogArgs+=("$1"); shift; shift;;
	--committer)	shortlogArgs+=("$1"); shift; prettyFormat=full;;    # Need the full log output format; the "short" one does not include the committer.
	--email)	shortlogArgs+=("$1"); shift;;
	--summary|-s)	shortlogArgs+=("$1"); shift; isSummary=t;;
	--alphabetic|-N)
			shift; shortlogOrderingArg=();;
	--names-only|-n)
	    shift; postFilter=(sed -e 's/^[[:space:]]*[[:digit:]]\+%\?[[:space:]]\+//'); shortlogArgs+=(--summary);;
	--spark)
	    printf -v finalSelector '%q ' fieldMap --field-separator , 2 'gensub(/^[[:digit:]]+$/, "??", 1, $fieldNr)' 2 '|nameToInitials -u' 3 '" "' 4 '" "'
	    printf -v finalSelector '%s | spark' "$finalSelector"
	    ;&	# Continue with CSV.
	--csv)
	    shift; postFilter=(sed -n -e 's/^[[:space:]]*\([[:digit:]]\+%\?\)[[:space:]]\+\([^[:space:]].*\)$/\1,\2/p'); shortlogArgs+=(--summary);;
	--most-only|-1)	shift; shortlogArgs+=(--summary); isSummary=t; filterSelector='countFieldToPercentage 1 | head -n 1'; shortlogOrderingArg=(--numbered);;

	# Ignore options that influence commit formatting (we need just the
	# shortlog), and diff options.
	-+([cmtpuz]))	shift;;
	--@(abbrev|abbrev-commit|no-abbrev-commit|oneline|no-notes|show-signature|relative-date|parents|children|left-right|graph|cc|patch|no-patch|raw|patch-with-raw|numstat|shortstat|summary|patch-with-stat|name-only|name-status|no-color))	shift;;
	-[U])	shift; shift;;
	--@(abbrev|pretty|format|notes|date|unified|stat|dirstat|submodule|color|word-diff|word-diff-regex|color-words)=*)	shift;;
	--@(pretty|format|notes|date|unified|stat|dirstat|submodule|color|word-diff|word-diff-regex|color-words))	shift; shift;;
	--)		break;;
	*)		logArgs+=("$1"); shift;;
    esac
done

triggerEachRecursion()
{
    local -r scriptName="$(basename -- "${BASH_SOURCE[0]}")"
    headerArg='--with-header'; [ "$eachRecursion" ] || headerArg=--with-basename-header
    HEADER_COLON='' git-each$eachType ${eachRecursion:+--recursive} $headerArg "${colorArg[@]}" -- "${scriptName#git-}" $eachOutputFormatArg "${nonRecursiveArgs[@]}" "$@"
}
if [ -n "$eachType" ]; then
    eval 'triggerEachRecursion "$@"' "${formatter:+|}" '"${formatter[@]}"' "${pager:+|}" '"${pager[@]}"'
    exit $?
fi


[ "$isSummary" ] && [ ${#shortlogOrderingArg[@]} -gt 0 ] && \
    preFilter=(sed -e '/^[[:space:]]*1[[:space:]]\+/{ $b }' -e ':loop' -e 's/^[[:space:]]*1[[:space:]]\+\(.*\)$/\1/' -e T -e 'H; $!{ N; s/.*\n//; b loop }' -e '${ g; s/^\n/  Once:\t/; s/\n/, /g }'  )

if [ ${#logArgs[@]} -eq 0 ]; then
    git shortlog "${shortlogOrderingArg[@]}" "${shortlogArgs[@]}" "$@"
else
    git log --pretty=$prettyFormat "${logArgs[@]}" "$@" | git shortlog "${shortlogOrderingArg[@]}" "${shortlogArgs[@]}"
fi | \
    eval '"${preFilter[@]}"' \
	"${filterSelector:+|}$filterSelector" \
	"${postFilter:+|}" '"${postFilter[@]}"' \
	"${finalSelector:+|}$finalSelector" \
	"${pager:+|}" '"${pager[@]}"'
