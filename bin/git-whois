#!/bin/bash
set -o pipefail
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-1|--first|-s|--select|-S|--select-many] [-n|--name|-e|--email] [--via-email|-E] [--accept-unknown] [--range-is-last|--since <date>|--max-count <number>|-<number>|--range <range> [--range ...]] AUTHOR-PATTERN [...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --accept-unknown AUTHOR-PATTERN [...]|NAME EMAIL@HOST|"NAME <EMAIL@HOST>"'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... --accept-unknown --select-many AUTHOR-PATTERN|NAME EMAIL@HOST|"NAME <EMAIL@HOST>" [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Look up person(s) by name or email address, based on all previous committers to
the repository.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --first|-1		Show only the first (most recent) candidate found in
			the commit logs.
    --select|-s		Interactively select a candidate.
    --select-many|-S	Interactively select multiple candidate(s).
    --name|-n		Just print the person's name; drop the email address.
    --email|-e		Just print the person's email address; drop the name.
    --via-email|-E	In GitHub, look up the person by email address instead
			of full name. (Note that a public configured email is
			optional.)
    --accept-unknown	Also accept new names in the form NAME EMAIL@HOST (two
			arguments) or "NAME <EMAIL@HOST>" (one argument) that
			are not yet found in the repository.
HELPTEXT
}

isAcceptUnknown=
isShowFirstCandidate=
isSelect=
isSelectMany=
isRangeLastArg=
typeset -a rangeArgs=()
typeset -a rangeModificationArgs=()
typeset -a personFilter=()
hubLookupFormat=%aN
hubQueryTerm=fullname:
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--accept-unknown)   shift; isAcceptUnknown=t;;
	--first|-1)	shift; isShowFirstCandidate=t;;
	--select|-s)    shift; isSelect=t;;
	--select-many|-S)
			shift; isSelect=t; isSelectMany=t;;
	--name|-n)	shift; personFilter=(sed -e 's# \+<[^ ]\+@[^ ]\+>$##');;
	--email|-e)	shift; personFilter=(sed -e 's#^.* \+<\([^ ]\+@[^ ]\+\)>$#\1#');;
	--via-email|-E)	shift; hubLookupFormat=%aE; hubQueryTerm=in:email;;

	--range-is-last)
			shift; isRangeLastArg=t;;
	--since)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count=*|-+([0-9]))
			rangeArgs+=("$1"); shift;;
	--range)	shift; rangeArgs+=("$1"); shift;;
	--range=*)	rangeArgs+=("${1#--range=}"); shift;;
	--follow)	rangeModificationArgs+=("$1"); shift;;

	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

if [ "$isRangeLastArg" ]; then
    typeset -a parsedRangeArgs=("${rangeArgs[@]}")

    if [ $# -gt 0 ]; then
	rangeArgs=("${!#}")
	set -- "${@:1:$(($#-1))}"
    fi

    set -- "${parsedRangeArgs[@]}" "${rangeModificationArgs[@]}" # Undo the parsing of range args; let the rangeModificationArgs apply to both.
fi

if type -t commandOnSelected >/dev/null; then
    # Delegate to external tool.
    selectCandidates()
    {
	typeset -a commandOnSelectedArgs=(--accept-single)

	[ "$isSelectMany" ] || commandOnSelectedArgs+=(--single-only)

	if [ ${#personFilter[@]} -gt 0 ]; then
	    printf -v quotedPersonFilter '%q ' "${personFilter[@]}"
	    commandOnSelectedArgs+=(--post-filter "printf %s\\\\n {} | ${quotedPersonFilter% }")
	fi

	commandOnSelected "${commandOnSelectedArgs[@]}" -- "$@"
    }
else
    selectCandidates()
    {
	if [ $# -eq 0 ]; then
	    echo >&2 'ERROR: No candidates found.'
	    exit 1
	elif [ $# -eq 1 ]; then
	    printPersons "$1"
	else
	    typeset -a selectedPersons=()
	    select person
	    do
		if [ "$person" ]; then
		    selectedPersons+=("$person")
		    [ "$isSelectMany" ] || break
		elif [ "$REPLY" = '.' ]; then
		    break
		elif [ ! "$REPLY" ]; then
		    exit 1
		elif [ "$REPLY" = '?' ]; then
		    cat >&2 <<-'EOF'
			Enter a number to select the person.
			Filter the list by entering "grep" arguments. (Double backslashes.)
			Abort via Ctrl-D.
EOF
		else
		    typeset -a filteredCandidates=(); readarray -t filteredCandidates < <(unset IFS; printf '%s\n' "$@" | grep $REPLY)
		    selectCandidates "${filteredCandidates[@]}"
		    break
		fi
	    done

	    printPersons "${selectedPersons[@]}"
	fi
    }
fi

printPersons()
{
    eval 'printf %s\\n "$@"' \
	"${personFilter:+|}" '"${personFilter[@]}"' \
	"${personFilter:+|sort --unique}"
}

getFromLog()
{
    local format="${1:?}"; shift
    git log -i ${isShowFirstCandidate:+-1} --pretty="tformat:${format}" "${@/#/--author=}" "${rangeArgs[@]}" "${rangeModificationArgs[@]}"
}

if [ "$HUB" ]; then
    # Source: https://stackoverflow.com/a/75888626/813602
getCandidates()
{
    typeset -a users=(); readarray -t users < <(getFromLog "$hubLookupFormat" "$@" | sort --unique)
    local query=$'query {\n'
    for idx in "${!users[@]}"
    do
	query+=" query${idx}: search(query: \"${hubQueryTerm} ${users[$idx]}\", type: USER, first: 1) { nodes { ... on User { login email } } }"$'\n'
    done
    query+='}'

    local response
    if response="$(gh api graphql --raw-field query="$query")"; then
	printf '%s\n' "$response" | jq --raw-output '.data | to_entries[] | .value.nodes[] | .login + (if .email | length > 0 then " <" + .email + ">" else "" end)'
    else
	return 1
	# Note: "gh api graphql" already extracts and prints the error message.
	#printf '%s\n' "$response" | jq --raw-output '.errors | .[] | .message' >&2
    fi
}
else
getCandidates()
{
    getFromLog '%aN <%aE>' "$@"
}
fi

readarray -t candidates < <(getCandidates "$@" | sort --unique)

if [ ${#candidates[@]} -eq 0 ]; then
    if [ "$isAcceptUnknown" ]; then
	typeset -a newPersons=()
	while [ $# -gt 0 ]
	do
	    if ! [[ "$1" =~ @ ]] && [[ "$2" =~ ^[^\ ]+@[^\ ]+$ ]]; then
		person="$1 <$2>"; shift; shift
	    else
		person="$1"; shift
	    fi
	    if [[ "$person" =~ ^[^\ ].*[^\ ]\ \<[^\ ]+@[^\ ]+\>$ ]]; then
		newPersons+=("$person")
	    else
		printf >&2 'ERROR: Did not pass a valid NAME <EMAIL@HOST>: %s\n' "$person"
		exit 2
	    fi
	done
    fi

    [ ${#newPersons[@]} -gt 0 ] || exit 1
    if [ ${#newPersons[@]} -gt 1 ] && [ ! "$isSelectMany" ]; then
	printf >&2 'Note: %d new persons passed; ignoring all but the first.\n' ${#newPersons[@]}
	newPersons=("${newPersons[0]}")
    fi
    printPersons "${newPersons[@]}"
    exit 0
fi

if [ "$isShowFirstCandidate" ]; then
    printPersons "${candidates[0]}"
elif [ "$isSelect" ]; then
    selectCandidates "${candidates[@]}"
else
    printPersons "${candidates[@]}"
fi
