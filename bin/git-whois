#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Look up person(s) by name or email address, based on all previous committers to
the repository. With --accept-unknown, will also accept new names in the form
NAME EMAIL@HOST (two arguments) or "NAME <EMAIL@HOST>" (one argument) that are
not yet found in the repository.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-1|--first|-s|--select|-S|--select-many] [-n|--name|-e|--email] [--accept-unknown] [--range-is-last|--since <date>|--max-count <number>|-<number>|--range <range> [--range ...]] AUTHOR-PATTERN [...]|NAME EMAIL@HOST|"NAME <EMAIL@HOST>" [-?|-h|--help]'
}

isAcceptUnknown=
isShowFirstCandidate=
isSelect=
isSelectMany=
isRangeLastArg=
typeset -a rangeArgs=()
typeset -a rangeModificationArgs=()
typeset -a personFilter=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--accept-unknown)   shift; isAcceptUnknown=t;;
	--first|-1)	shift; isShowFirstCandidate=t;;
	--select|-s)    shift; isSelect=t;;
	--select-many|-S)
			shift; isSelect=t; isSelectMany=t;;
	--name|-n)	shift; personFilter=(sed -e 's# \+<[^ ]\+@[^ ]\+>$##');;
	--email|-e)	shift; personFilter=(sed -e 's#^.* \+<\([^ ]\+@[^ ]\+\)>$#\1#');;

	--range-is-last)
			shift; isRangeLastArg=t;;
	--since)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count)	rangeArgs+=("$1" "$2"); shift; shift;;
	--max-count=*|-+([0-9]))
			rangeArgs+=("$1"); shift;;
	--range)	shift; rangeArgs+=("$1"); shift;;
	--range=*)	rangeArgs+=("${1#--range=}"); shift;;
	--follow)	rangeModificationArgs+=("$1"); shift;;

	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

if [ "$isRangeLastArg" ]; then
    typeset -a parsedRangeArgs=("${rangeArgs[@]}")

    if [ $# -gt 0 ]; then
	rangeArgs=("${!#}")
	set -- "${@:1:$(($#-1))}"
    fi

    set -- "${parsedRangeArgs[@]}" "${rangeModificationArgs[@]}" # Undo the parsing of range args; let the rangeModificationArgs apply to both.
fi

if type -t commandOnSelected >/dev/null; then
    # Delegate to external tool.
    selectCandidates()
    {
	typeset -a commandOnSelectedArgs=(--accept-single)

	[ "$isSelectMany" ] || commandOnSelectedArgs+=(--single-only)

	if [ ${#personFilter[@]} -gt 0 ]; then
	    printf -v quotedPersonFilter '%q ' "${personFilter[@]}"
	    commandOnSelectedArgs+=(--post-filter "printf %s\\\\n {} | ${quotedPersonFilter% }")
	fi

	commandOnSelected "${commandOnSelectedArgs[@]}" -- "$@"
    }
else
    selectCandidates()
    {
	if [ $# -eq 0 ]; then
	    echo >&2 'ERROR: No candidates found.'
	    exit 1
	elif [ $# -eq 1 ]; then
	    printPersons "$1"
	erlse
	    typeset -a selectedPersons=()
	    select person
	    do
		if [ "$person" ]; then
		    selectedPersons+=("$person")
		    [ "$isSelectMany" ] || break
		elif [ "$REPLY" = '.' ]; then
		    break
		elif [ ! "$REPLY" ]; then
		    exit 1
		elif [ "$REPLY" = '?' ]; then
		    cat >&2 <<-'EOF'
			Enter a number to select the person.
			Filter the list by entering "grep" arguments. (Double backslashes.)
			Abort via Ctrl-D.
EOF
		else
		    typeset -a filteredCandidates=(); readarray -t filteredCandidates < <(unset IFS; printf '%s\n' "$@" | grep $REPLY)
		    selectCandidates "${filteredCandidates[@]}"
		    break
		fi
	    done

	    printPersons "${selectedPersons[@]}"
	fi
    }
fi

printPersons()
{
    eval 'printf %s\\n "$@"' "${personFilter:+|}" '"${personFilter[@]}"' "${personFilter:+|sort --unique}"
}

getCandidates()
{
    git log -i ${isShowFirstCandidate:+-1} --pretty='tformat:%aN <%aE>' "${@/#/--author=}" "${rangeArgs[@]}" "${rangeModificationArgs[@]}"
}
readarray -t candidates < <(getCandidates "$@" | sort --unique)

if [ ${#candidates[@]} -eq 0 ]; then
    if [ "$isAcceptUnknown" -a \( $# -eq 1 -o $# -eq 2 \) ]; then
	case $# in
	    1)	person="$1";;
	    2)	person="$1 <$2>";;
	esac
	if [[ "$person" =~ ^[^\ ].*[^\ ]\ \<[^\ ]+@[^\ ]+\>$ ]]; then
	    printPersons "$person"
	    exit
	else
	    printf >&2 'ERROR: Did not pass a valid NAME <EMAIL@HOST>: %s\n' "$person"
	    exit 2
	fi
    fi

    exit 1
fi

if [ "$isShowFirstCandidate" ]; then
    printPersons "${candidates[0]}"
elif [ "$isSelect" ]; then
    selectCandidates "${candidates[@]}"
else
    printPersons "${candidates[@]}"
fi
