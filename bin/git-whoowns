#!/bin/bash
set -o pipefail

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--csv|--spark|-n|--names-only [-1|--most-only]|-1|--most-only] [-c|--committer] [-e|--email] [--each-file|--each-dir [-r|--recursive] [--full]] [-N|--alphabetic] ([--since=<date>] [<commit>] | [<revision range>]) [--] [<path> ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show statistics on how many lines were last changed (based on a blame) by which
author.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --names-only|-n	Only show the authors that changed files.
    --alphabetic|-N	Output sorted by author instead of changed lines.
    --most-only|-1	Only show the single author with the most changed lines.
    --csv		Show the number of lines and author name,
			comma-separated.
    --spark		Show a sparkline bar (the higher, the more lines)
			followed by the author's initials, all in one line.
    --each-file		Show separate single authors with the most changed lines
			for each file [in <path>(s)].
    --each-dir		Show separate single authors with the most changed lines
			for each directory [in <path>(s)].
    --recursive|-r	Also separately cover files / directories in
			subdirectories instead of just including them in the
			tally for the directory itself.
    --full		Show the full statistics of lines per author, not just
			the sparkline bar, also with --each-file or --each-dir.

For finer granularity, use git-whocontributed which considers the whole file
history.
For coarser granularity, use git-whodid [--summary] which considers the number
of commits.
HELPTEXT
}

typeset -a colorArg=(--color=always)
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
if [ ! -t 1 ]; then
    colorArg=()
    pager=()
    formatter=()
fi
typeset -a blameArgs=()
isEmail=
blameFilter='author'
commit=
typeset -a sorter=(sort -nr)
selector=
postSelector=
typeset -a postFilter=()
eachOutputFormatArg='--spark'
eachType=
eachRecursion=
while [ $# -ne 0 ]
do
    case "$1" in
	--color=auto)	shift; continue;;
	--no-color|--color=*)
			colorArg=("$1"); shift; continue;;
	--color)	[ "$2" = auto ] || colorArg=("$1" "$2"); shift; shift; continue;;

	--each-file)	shift; eachType=File; continue;;
	--each-dir)	shift; eachType=Dir; continue;;
	--recursive|-r)	shift; eachRecursion=t; continue;;
	--)		shift; break;;
	--csv)		: ${HEADER_NEWLINE=$'\n'}; export HEADER_NEWLINE;&
	--spark|--most-only|-1)
			eachOutputFormatArg="$1";;
	--full)		shift; : ${HEADER_NEWLINE=$'\n'}; export HEADER_NEWLINE; eachOutputFormatArg=''; continue;;

	--blame)	shift
			commit="$1"; shift
			filespec="${!#}"
			if [ -z "$commit" -a ! -e "$filespec" ]; then
			    # Default to the checked-in HEAD commit if the file
			    # has been removed from the working copy.
			    set -- HEAD "$@"
			fi
			exec git blame --line-porcelain "$@"
			;;
    esac

    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	--committer|-c)	shift; blameFilter='committer';;
	--email|-e)	shift; isEmail=t;;
	--alphabetic|-N)
			shift; sorter=();;
	--names-only|-n)
			shift; postFilter=(sed -e 's/^[[:space:]]*[[:digit:]]\+%\?[[:space:]]\+//');;
	--spark)
			printf -v postSelector '%q ' fieldMap --field-separator , 2 'gensub(/^[[:digit:]]+$/, "??", 1, $fieldNr)' 2 '|nameToInitials -u' 3 '" "' 4 '" "'
			printf -v postSelector '%s | spark' "$postSelector"
			;&	# Continue with CSV.
	--csv)
			shift; printf -v selector '%q ' sed -n -e '/^[[:space:]]*<none>$/d' -e 's/^[[:space:]]*\([[:digit:]]\+\)[[:space:]]\+\([^[:space:]].*\)$/\1,\2/p';;
	--most-only|-1)	shift; sorter=(sort -nr); selector='countFieldToPercentage 1 | head -n 1';;
	--since)	blameArgs+=("$1" "$2"); shift; shift;;
	--since=*)	blameArgs+=("$1"); shift;;

	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*..*)		if [ -z "$commit" -a ${#blameArgs[@]} -eq 0 ] && potentialCommit="${1##*..}" && git rev-parse --verify --quiet "${potentialCommit:-HEAD}" >/dev/null; then
			    commit="$potentialCommit"; blameArgs+=("$1"); shift
			else
			    break
			fi
			;;
	*)		if [ -z "$commit" ] && git rev-parse --verify --quiet "$1" >/dev/null; then
			    commit="$1"; blameArgs+=("$1"); shift
			else
			    break
			fi
			;;
    esac
done
[ $# -gt 0 ] || set -- .

triggerEachRecursion()
{
    local -r scriptName="$(basename -- "${BASH_SOURCE[0]}")"
    headerArg='--with-header'; [ "$eachRecursion" ] || headerArg=--with-basename-header
    HEADER_COLON='' git-each$eachType ${eachRecursion:+--recursive} $headerArg "${colorArg[@]}" -- "${scriptName#git-}" $eachOutputFormatArg "$@"
}
if [ -n "$eachType" ]; then
    eval 'triggerEachRecursion "$@"' "${formatter:+|}" '"${formatter[@]}"' "${pager:+|}" '"${pager[@]}"'
    exit $?
fi

[ "$isEmail" ] \
    && typeset -a blameSedArgs=(-n -e "/^${blameFilter} /{ s/^${blameFilter} //; h; }" -e "/^${blameFilter}-mail /{ s/^${blameFilter}-mail //; H; g; s/\\n/ /; p; }") \
    || typeset -a blameSedArgs=(-ne "s/^${blameFilter} //p")

for filespec
do
    if [ -d "$filespec" ]; then
	git ls-tree -r -z --name-only "${commit:-HEAD}" -- "$filespec"
    else
	printf '%s\0' "$filespec"
    fi
done \
    | xargs --no-run-if-empty --null -n 1 "${BASH_SOURCE[0]}" --blame "$commit" "${blameArgs[@]}" -- \
    | sed "${blameSedArgs[@]}" \
    | sort \
    | eval 'uniq -c' \
	"${sorter:+|}" '"${sorter[@]}"' \
	"${selector:+|}$selector" \
	"${postSelector:+|}$postSelector" \
	"${postFilter:+|}" '"${postFilter[@]}"' \
	"${pager:+|}" '"${pager[@]}"'
