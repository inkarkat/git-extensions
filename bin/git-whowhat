#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n|--names-only [-1|--most-only]|-1|--most-only] [-c|--committer] [-e|--email] [-N|--alphabetic] [--follow] [--since=<date>|<revision range>] [--] [FILE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Show who created the FILE(s), did the most commits to them, currently have last
changed how many lines, and did how many total changes over their history.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --names-only|-n	Only show the authors without counts / percentages.
    --alphabetic|-N	Output sorted by author instead of counts / percentages.
    --most-only|-1	Only show the single author with the most commits /
			changes.
HELPTEXT
}
typeset -a colorArg=(--color=always)
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
if [ ! -t 1 ]; then
    colorArg=()
    pager=()
fi
typeset -a args=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--color=auto)	shift;;
	--no-color|--color=*)
			colorArg=("$1"); shift;;
	--color)	[ "$2" = auto ] || colorArg=("$1" "$2"); shift; shift;;
	--most-only|-1)	args+=("$1"); shift
			[ -z "${HEADER_SEPARATOR+t}" -a -z "${HEADER_NEWLINE+t}" ] && \
			    export HEADER_SEPARATOR='' HEADER_NEWLINE='\t'
			;;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

whowhat()
{
    header "${colorArg[@]}" --first 'Creation'; git-whocreated --summary "$@"
    header "${colorArg[@]}" 'Commit number'; git-whodid --summary "$@"
    header "${colorArg[@]}" 'Blame lines'; git-whoowns "$@"
    header "${colorArg[@]}" 'Total changes'; git-whocontributed "$@"
}

eval 'whowhat "$@"' "${pager:+|}" '"${pager[@]}"'
