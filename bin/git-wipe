#!/bin/bash
shopt -qs extglob

printUsage()
{
    cat <<HELPTEXT
Reset HEAD, working copy and index [to <commit>] [for <paths> ... only]. Ensures
that the current branch isn't dirty.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-f|--force] [--gui|--terminal|--none] [<commit>] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-f|--force] [CHECKOUT-ARGS ...] [--] <paths> ...'
    #printf 'Usage: %q %s\n' "$(basename "$1")" '[-f|--force] [CHECKOUT-ARGS ...] [<commit>] [--] <paths> ...'
    # Note: "wipe <commit> [--] <paths>" is discouraged; better use checkout[selected][previous][selected].
}

isForce=
typeset -a gitArgs=()
logArg=
unset paths
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--force|-f)	shift; isForce=t;;
	--@(gui|terminal|none))
			logArg="$1"; shift;;
	--)		shift; typeset -a paths=("$@"); break;;
	*)		gitArgs+=("$1"); shift;;
    esac
done
# DWIM here: Allow both git wipe FILE1 ... and git wipe <commit> FILE1 ... by
# checking whether the arguments exist as files.
if [ -z "${paths+t}" ]; then
    # No files after -- captured yet; need to investigate parsed and
    # remaining args from behind for files.
    typeset -a paths=()
    gitArgs+=("$@")
    while [ ${#gitArgs[@]} -ne 0 ]
    do
	lastArg="${gitArgs[-1]}"
	[ -e "$lastArg" ] || break

	paths=("$lastArg" "${paths[@]}")
	gitArgs=("${gitArgs[@]:0:${#gitArgs[@]}-1}")
    done
fi

handleDirtyWorkingCopy()
{
    if ! git-dirty --quiet -- "${paths[@]}"; then
	if [ ${#gitArgs[@]} -eq 0 ]; then
	    IFS=' '
	    printf >&2 'No uncommitted changes; working copy and index are clean%s.\n' "${paths:+ below }${paths[*]}"
	    return 1
	else
	    # The user requested a special checkout (e.g. of another <commit>);
	    # as the working copy is clean, we're free to immediately do this.
	    return 0
	fi
    fi

    echo 'Uncommitted changes:'
    git status --porcelain -- "${paths[@]}" | grep -v '^??'

    while :
    do
	choice="$(userchoiceFromList --keep-prompt --question 'Discard these changes?' --no-cancel --ignore-case -- '[Y]es' '[N]o' '[D]iff')" || exit $?
	case "$choice" in
	    Yes)    break;;
	    No)	    return 1;;
	    Diff)   git diff;;
	esac
    done
}

[ "$isForce" ] || handleDirtyWorkingCopy || exit $?

if [ ${#paths[@]} -gt 0 ]; then
    # git reset --hard ... <paths>... is not allowed ("fatal: Cannot do hard reset with paths.")
    # The right command is git checkout HEAD <paths>...
    if [ ${#gitArgs[@]} -eq 0 ] || ! git rev-parse --verify --quiet "${gitArgs[-1]}" >/dev/null 2>&1; then
	gitArgs+=(HEAD)
    fi
    exec git checkout "${gitArgs[@]}" -- "${paths[@]}"
fi

if [ ${#gitArgs[@]} -eq 0 -o -z "$logArg" -o "$logArg" = --none ]; then
    exec git reset --hard "${gitArgs[@]}"
else
    exec git-logdelta $logArg -- reset --hard "${gitArgs[@]}"
fi
