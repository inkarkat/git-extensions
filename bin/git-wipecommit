#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Completely remove the last / N commit(s) / REVISION, also from working copy and
index. If a merge commit is wiped, asks which merge parent to pick up.
Ensures that the current branch isn't dirty.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n N|--count N|-r|--revision REVISION] [--first-parent|--unmerge|--parent-number N] [-?|-h|--help]'
}

commit='HEAD'
parentNumber=
isUnmerge=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--count|-n)	shift
			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
			    printUsage "$0" >&2
			    exit 2
			fi
			commit="HEAD~$(($1 - 1))"
			shift
			;;
	--revision|-r)	shift; commit="${1:?}"; shift;;
	--first-parent)	shift; parentNumber=1;;
	--unmerge)	shift; isUnmerge=t;;
	--parent-number)
			shift; parentNumber="${1:?}"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

readarray -t parentCommits < <(git-ismerge --print "$commit"; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
[ ${parentCommits[-1]} -ne 0 ] && exit ${parentCommits[-1]}
unset 'parentCommits[-1]'; [ -z "${parentCommits[-1]}" ] && unset 'parentCommits[-1]'

case ${#parentCommits[@]} in
    0)	echo 'ERROR: Cannot wipe the root commit.'; exit 1;;
    1)	wipeCommit="${parentCommits[0]}";;
    *)	if [ -n "$parentNumber" ]; then
	    if [ $parentNumber -gt ${#parentCommits[@]} ]; then
		printf >&2 'ERROR: Only %s merge parents.\n' ${#parentCommits[@]}
		exit 1
	    fi
	    wipeCommit="${parentCommits[$((parentNumber - 1))]}"
	elif [ "$isUnmerge" ]; then
	    if [ ${#parentCommits[@]} -eq 2 ]; then
		wipeCommit="${parentCommits[1]}"
	    else
		parentCommits=("${parentCommits[@]:1}")	# Drop the first parent.
		echo >&2 "More than one head has been merged here:"
		git log1 "$commit"
		printf >&2 '\nPlease select the desired merge parent commit:\n'
		GIT_SELECTEDCOMMIT_COMMAND='show --no-patch' \
		    exec git-selectedcommit-command --single-only autostash "${parentCommits[@]/#/--range=}" git-wipe
	    fi
	else
	    echo >&2 "You're wiping a merge commit:"
	    git log1 "$commit"
	    printf >&2 '\nPlease select the desired merge parent commit:\n'
	    GIT_SELECTEDCOMMIT_COMMAND='show --no-patch' \
		exec git-selectedcommit-command --single-only autostash "${parentCommits[@]/#/--range=}" git-wipe
	fi
	;;
esac

exec git-autostash git-wipe "$wipeCommit"
