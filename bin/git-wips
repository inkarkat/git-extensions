#!/bin/bash
set -o pipefail
shopt -qs nullglob

: ${GIT_WIPS_DOWNSTREAM_BRANCHES_IGNORE_PATTERN='stable'}   # Origin branches that need not appear in upstream for +downstreambranches check.
: ${GIT_WIPS_UPSTREAM_BRANCHES_IGNORE_PATTERN=''}   # Upstream branches that are not considered as merge targets for origin branches in +unmergeddownstream check.
: ${GIT_WIPS_CHANGELOG_FILENAME:=CHANGELOG.md}	# Filename of a changelog file in the repository root or one subdirectory below.

readonly EXCLUDED_TAGS_CONFIG_KEY='uptodate.excludedTags'

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--submodules|--all-submodules] [--no-submodule-recurse] [--filter-worktree-duplicates] [-a|--all] [-v|--verbose] [-q|--quiet|--color=(always|auto|never)|--no-color] [(+|-)(empty|dirty|private|stashed|noremote|outgoing|incoming|fallenbehind|behind|behindtags|wipcommit|nonmaster|unmergeddownstream|downstreambranches|todo|inactivefork) ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Test whether the repository (working copy and remote branches) is in an
incomplete, "work-in-progress" state that will require follow-up actions to
conclude the project.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --submodules	Check each submodule if the repository itself is clean.
    --all-submodules	Always also check each submodule, also if the repository
			itself got reported already.
    --no-submodule-recurse
			Do not recurse into submodules of submodules; just
			check the direct submodules of the current repo.
    --filter-worktree-duplicates
			Skip checks that would report the same state in each
			worktree (like stashes) when executed in a secondary
			worktree. Pass this when iterating over multiple
			worktrees to avoid duplicates.
    --all|-a		Execute each check instead of stopping after the first
			positive check that found unresolved work.
    --verbose|-v	Show each check's name as it's being executed.
    --quiet|-q		Don't print details on the work-in-progress; just
			indicate via the exit status whether there is some.
			(Any errors are still output.)
    --color=(always|auto|never)|--no-color
			Influence the default coloring of output when output is
			to the terminal.

Individual checks can be selected (from a baseline of no checks) via +name /
deselected (from all checks on offer) via -name.
- empty:    empty repository without any commit
- dirty:    uncommitted changes
- private:  unversioned files (that are not ignored)
- stashed:  recorded local changes that have been stashed away
- noremote: no remotes have been defined yet; the repository only exists locally
- outgoing: where not all commits (on the current branch) have already been
	    pushed to origin
- incoming: where the current branch misses commits that have been fetched and
	    exist in origin
- fallenbehind:
	    differences in the changelog document (to the same remote branch or
	    else master, but not if a tag is checked out) exist in upstream
- behind:   where the current branch misses commits that have been fetched and
	    exist in upstream
- behindtags:
	    where the working copy has checked out a tag and there are upstream
	    branch(es) that have more recent tags
	    You can ignore certain tag patterns via the $EXCLUDED_TAGS_CONFIG_KEY
	    (multi-valued) config key:
	    $ git config --add $EXCLUDED_TAGS_CONFIG_KEY TAGNAME-*
- wipcommit:where the last commit had "WIP:" in the message summary
- nonmaster:a branch different from the master branch (or the base branch if
	    defined) is checked out
- unmergeddownstream:
	    branches in origin that have not yet been merged into (any) upstream
	    branch
- downstreambranches:
	    a branch that only exists in origin, but not upstream; may represent
	    concurrent work or a pull request
- todo:	    a todo.txt file exists in the working copy root
- inactivefork:
	    my GitHub clone is up-to-date with upstream, has no non-master
	    branches, and therefore can be archived (made read-only).
HELPTEXT
}
typeset -a recursiveArgs=()
recurseSubmodules()
{
    HEADER_PREFIX="${HEADER_PREFIX}Â» " \
    GIT_SUBDO_EXIT_STATUS_NO_SUBMODULES=0 \
    GIT_SUBDO_STORE_ID='wips' \
	git-subdo-core --no-pager "${colorArg[@]}" --single-success "${subdoRecursiveArg[@]}" -- wips "${recursiveArgs[@]}"
}
printSubmoduleSeparator()
{
    printf "${HEADER_SEPARATOR-\\n}"
}
positiveCheck() {
    if [ "$isSubmodulesAlways" ]; then
	printSubmoduleSeparator
	recurseSubmodules
    fi
    exit 0
}
typeset -a colorArg=()
typeset -a gitColorConfigArg=()
isSubmodules=
isSubmodulesAlways=
isFilterWorktreeDuplicates=
typeset -a subdoRecursiveArg=(--recursive)
isVerbose=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			recursiveArgs+=("$1"); colorArg=("$1"); shift;;
	--color)	recursiveArgs+=("$1" "$2"); colorArg=("$1" "$2"); shift; shift;;
	--submodules)	shift; isSubmodules=t;;
	--filter-worktree-duplicates)
			shift; isFilterWorktreeDuplicates=t;;
	--all-submodules)
			shift; isSubmodules=t; isSubmodulesAlways=t;;
	--no-submodule-recurse)
			shift; subdoRecursiveArg=();;
	--all|-a)	recursiveArgs+=("$1"); shift; positiveCheck() { echo; overallStatus=0; };;
	--verbose|-v)	recursiveArgs+=("$1"); shift; isVerbose=t;;
	--quiet|-q)	recursiveArgs+=("$1"); shift; exec 1>/dev/null;;
	*)		recursiveArgs+=("$@"); break;;
    esac
done
if isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    colorArg=('--color=always')
else
    colorArg=('--color=never')
    gitColorConfigArg=(-c 'color.status=false')
fi

isFirst=t
declare -A checks=([empty]=t [dirty]=t [private]=t [stashed]=t [noremote]=t [outgoing]=t [incoming]=t [fallenbehind]=t [behind]=t [behindtags]=t [wipcommit]=t [nonmaster]=t [unmergeddownstream]=t [downstreambranches]=t [todo]=t [inactivefork]=t)
while [ $# -gt 0 ]
do
    case "$1" in
	+*) [ "$isFirst" ] && checks=()
	    checks["${1:1}"]=t
	    shift
	    ;;
	-[^-]?*)
	    unset "checks[${1:1}]"
	    shift
	    ;;
	-*) { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)  printUsage "$0" >&2; exit 2;;
    esac
    isFirst=
done

if [ "$isFilterWorktreeDuplicates" ] && git-isworktree; then
    # These checks are independent of the current worktree / current branch:
    unset 'checks[stashed]' 'checks[noremote]' 'checks[unmergeddownstream]' 'checks[downstreambranches]' 'checks[inactivefork]'
fi

isSubsequentCheck=
: ${CLEAR_PREVIOUS_LINE=[1F[0K}
considerCheck()
{
    local check="${1:?}"; shift
    [ "${checks[$check]}" ] || return 1

    if [ "$isVerbose" ]; then
	printf >/dev/tty '%sChecking %s...\n' "${isSubsequentCheck:+$CLEAR_PREVIOUS_LINE}" "$check"
	isSubsequentCheck=t
    fi

    return 0
}

overallStatus=1
considerCheck empty \
    && if git empty; then echo 'Empty repository.'; positiveCheck; fi

considerCheck dirty \
    && if git-dirty --quiet; then git "${gitColorConfigArg[@]}" st; positiveCheck; fi

findPrivateFiles()
{
    local IFS=$'\n'
    readarray -t privateFiles < <(git-lsprivate)
    [ ${#privateFiles[@]} -eq 0 ] && return 1
    printf 'Unversioned file: %s\n' "${privateFiles[@]}"
}
considerCheck private \
    && if findPrivateFiles; then positiveCheck; fi

considerCheck stashed \
    && if git rev-parse --verify --quiet refs/stash >/dev/null; then git stashl "${colorArg[@]}"; positiveCheck; fi

considerCheck noremote \
    && if ! git existsremote; then echo "Local-only repository; no remotes defined yet."; positiveCheck; fi

considerCheck outgoing \
    && git existsremote origin \
    && git remotebr origin >/dev/null 2>&1 \
    && if git ooutlgx "${colorArg[@]}" | headtail --separator-cutline | outputAndPrintf 'Outgoing to origin:\n'; then positiveCheck; fi

considerCheck incoming \
    && git existsremote origin \
    && git remotebr origin >/dev/null 2>&1 \
    && if git oinlgx "${colorArg[@]}" | headtail --separator-cutline | outputAndPrintf 'Incoming from origin:\n'; then positiveCheck; fi

printChangelogDifferences()
{
    local root; root="$(git root 2>/dev/null)" || return 1
    local changelogFilespec="${root}/${GIT_WIPS_CHANGELOG_FILENAME}"
    if [ ! -r "$changelogFilespec" ]; then
	typeset -a changelogs=("$root"/*/"${GIT_WIPS_CHANGELOG_FILENAME}")
	[ ${#changelogs[@]} -gt 0 ] && changelogFilespec="${changelogs[0]}" || return 1
    fi

    local remoteBranch; remoteBranch="$(git-remotebr upstream 2>/dev/null || git-master-command -2 echo upstream/MASTER)" || return 1
    git diff -R "${colorArg[@]}" "$remoteBranch" -- "$changelogFilespec" | outputAndPrintf 'Behind changes in upstream:\n'
    return ${PIPESTATUS[-1]}
}
considerCheck fallenbehind \
    && git existsremote upstream \
    && ! git istagged \
    && if printChangelogDifferences; then positiveCheck; fi

printBehindCommits()
{
    git uinlgx "${colorArg[@]}" | headtail --separator-cut-what '... use "git uinl[o]g" for the full list ...' | outputAndPrintf 'Behind upstream:\n'
    return ${PIPESTATUS[-1]}
}
considerCheck behind \
    && git existsremote upstream \
    && git remotebr upstream >/dev/null 2>&1 \
    && git brname --real-branch-only >/dev/null 2>&1 \
    && if printBehindCommits; then positiveCheck; fi

printBehindTags()
{
    local tagName="${1:?}"; shift

    typeset -a excludedTagsArgs=(); readarray -t excludedTagsArgs < <(git config --get-all "$EXCLUDED_TAGS_CONFIG_KEY")

    GIT_BRREFDO_SOURCE_COMMAND='git ubr' git-brrefdo --no-header --no-pager -- lgtaggeduntiltag --tag "$tagName" "${excludedTagsArgs[@]/#/--decorate-refs-exclude=refs/tags/}" "${colorArg[@]}" --branch {} | \
		uniqueStable | outputAndPrintf 'Behind these tags in upstream:\n'
    return ${PIPESTATUS[-1]}
}
considerCheck behindtags \
    && git existsremote upstream \
    && tagName="$(git istagged --print)" \
    && if printBehindTags "$tagName"; then positiveCheck; fi

considerCheck wipcommit \
    && if git l --max-count=1 "${colorArg[@]}" | grep '\(^\| \)WIP: '; then positiveCheck; fi

considerCheck nonmaster \
    && if branchName="$(git-brname --real-branch-only 2>/dev/null)"
	[ -n "$branchName" -a "$branchName" != "$(git-mbr)" -a "$branchName" != "$(git-nbr 2>/dev/null)" ]
    then printf 'On branch %s\n' "$branchName"; positiveCheck; fi

findUnmergedDownstreamBranches()
{
    local baseBranch="$(git-nbr 2>/dev/null)"
    typeset -a upstreamBranches=()
    readarray -t upstreamBranches < <(git ubr | sed -e 's/^ \+//' ${GIT_WIPS_UPSTREAM_BRANCHES_IGNORE_PATTERN:+-e "/^upstream\\/\\(${GIT_WIPS_UPSTREAM_BRANCHES_IGNORE_PATTERN}\\)\$/d"})
    local upstreamBranch; for upstreamBranch in "${upstreamBranches[@]}"
    do
	git branch --remotes --no-merged "$upstreamBranch"
    done | \
	sed -n -e 's/^ \+//' -e "/^origin\/$(git-mbr)/d" ${baseBranch:+-e "/^origin\/${baseBranch}/d"} -e '/^origin\/HEAD -> /d' -e 's/^origin\//not merged: /p' | \
	uniqueStable | \
	outputAndPrintf 'These branches in origin have not yet been merged to upstream:\n'
}
considerCheck unmergeddownstream \
    && git existsremote origin \
    && git existsremote upstream \
    && if findUnmergedDownstreamBranches; then positiveCheck; fi

findDownstreamBranches()
{
    typeset -a originBranches=()
    readarray -t originBranches < <(git obr | sed -e 's/^ \+//' ${GIT_WIPS_DOWNSTREAM_BRANCHES_IGNORE_PATTERN:+-e "/^origin\\/\\(${GIT_WIPS_DOWNSTREAM_BRANCHES_IGNORE_PATTERN}\\)\$/d"})
    local originBranch status=1; for originBranch in "${originBranches[@]}"
    do
	if ! git existsbr -- "${originBranch/#origin/upstream}"; then
	    printf 'origin-only: %s\n' "${originBranch/#origin\//}"
	    status=0
	fi
    done
    return $status
}
considerCheck downstreambranches \
    && git existsremote origin \
    && git existsremote upstream \
    && if findDownstreamBranches; then positiveCheck; fi

hasTodo()
{
    if type -t todo-local.sh >/dev/null; then
	# Use my own custom extension if it exists; it also considers submodules, has
	# default task filtering, and the todo.sh formatting.
	TODOTXT_VERBOSE=0 todo-local.sh | outputAndPrintf 'Open tasks:\n'
	return ${PIPESTATUS[-1]}
    else
	local root; root="$(git root 2>/dev/null)" || return 1
	local todoFilespec="${root}/todo.txt"
	[ -s "$todoFilespec" ] || return 1

	if type -t todo.sh >/dev/null; then
	    # Use todo.sh for formatting.
	    TODO_FILE="$todoFilespec" TODO_DIR="$root" TODOTXT_VERBOSE=0 todo.sh | outputAndPrintf 'Open tasks:\n'
	else
	    # Fall back to simple cat'ting of the file.
	    headtail --separator-cut-what "... see $todoFilespec for the full list ..." -- "$todoFilespec" | outputAndPrintf 'Open tasks:\n'
	fi
	return ${PIPESTATUS[-1]}
    fi
}
considerCheck todo \
    && if hasTodo; then positiveCheck; fi

findInactiveFork()
{
    local masterBranch; masterBranch="$(git-mbr)" || return 3
    git obr | grep -v --quiet --fixed-strings --line-regexp "origin/$masterBranch" && return 1 # There still are non-master origin branches.
    git diff --quiet "upstream/$masterBranch" "origin/$masterBranch" || return 1    # origin and upstream have diverged.
    hub-isarchived && return 1	# origin has already been archived (made read-only).

    echo 'origin has no active branches, is up-to-date with upstream, and can be archived.'
}
considerCheck inactivefork \
    && git existsremote origin \
    && git existsremote upstream \
    && if findInactiveFork; then positiveCheck; fi

[ "$isVerbose" ] && printf >/dev/tty %s "$CLEAR_PREVIOUS_LINE"

if [ "$isSubmodules" ] && { [ "$isSubmodulesAlways" ] || [ $overallStatus -ne 0 ]; }; then
    [ $overallStatus -eq 0 ] && printSubmoduleSeparator
    recurseSubmodules && overallStatus=0
fi

exit $overallStatus
