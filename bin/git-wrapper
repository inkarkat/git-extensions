#!/bin/bash

fixPath()
{
    # XXX: Git puts itself in front of the PATH; need precedence for our
    # scripts, though. Solve this by putting our dirspec in front again. Take
    # that, Git!
    readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && absoluteScriptFile="$(readlink -nf -- "${BASH_SOURCE[0]}")" && dirname -- "$absoluteScriptFile" || exit 3)"
    [ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }
    PATH="${scriptDir}:$PATH"
}

typeset -a gitConfigArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	-c) gitConfigArgs+=("$1" "$2"); shift; shift;;
	*)  break;;
    esac
done
# If there's no alias we can simply pass gitConfigArgs directly after the "git"
# command. Aliases however need to do this on their own (if their Git command(s)
# need to react to config overrides). We can just pass the arguments along here.
# eval "typeset -a gitConfigArgs=($GIT_CONFIG_ARGS)"
# command git "${gitConfigArgs[@]}" SUBCOMMAND "ARG1" ...
#   or directly:
# eval "command git $GIT_CONFIG_ARGS SUBCOMMAND \"ARG1\" ..." # or
GIT_CONFIG_ARGS=; [ ${#gitConfigArgs[@]} -gt 0 ] && printf -v GIT_CONFIG_ARGS '%q ' "${gitConfigArgs[@]}"; export GIT_CONFIG_ARGS

wrappedCommand=git
gitSubAlias="git-$1-$2"
gitAlias="git-$1"
if type -t hub >/dev/null; then
    wrappedCommand=hub	# Built-in Git / hub commands are always executed through hub.

    # When there are both git-* and hub-* commands, only invoke the hub-*
    # variant when actually invoked via "hub" (or when the client expressly
    # chooses the hub variant via HUB=t), but not when invoked via "git".
    # This allows us to obtain different functionality depending on what command
    # is used to invoke it.
    hubSubAlias="hub-$1-$2"
    hubAlias="hub-$1"
    if type -t "$hubSubAlias" >/dev/null && { [ "$HUB" ] || ! type -t "$gitSubAlias" >/dev/null; }; then
	shift; shift
	fixPath
	$hubSubAlias "$@"
	exit $?
    elif type -t "$hubAlias" >/dev/null && { [ "$HUB" ] || ! type -t "$gitAlias" >/dev/null; }; then
	shift
	fixPath
	$hubAlias "$@"
	exit $?
    fi
fi

if type -t "$gitSubAlias" >/dev/null; then
    shift; shift
    fixPath
    $gitSubAlias "$@"
elif type -t "$gitAlias" >/dev/null; then
    shift
    fixPath
    $gitAlias "$@"
elif [[ "$1" =~ [!-z][A-Z] ]]; then
    # Translate "X" to "-x" to enable aliases with uppercase letters.
    translatedAlias="$(echo "$1" | sed -e 's/[[:upper:]]/-\l\0/g')"
    shift
    exec "$wrappedCommand" "${gitConfigArgs[@]}" "$translatedAlias" "$@"
else
    exec "$wrappedCommand" "${gitConfigArgs[@]}" "$@"
fi
