#!/bin/bash
set -o pipefail

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."

: ${HUB_BRANCHPROTECTION_OWNER:='{owner}'}
: ${HUB_BRANCHPROTECTION_REPO:='{repo}'}
# Specification: https://docs.github.com/en/rest/branches/branch-protection#update-branch-protection
: ${HUB_SETBRANCHPROTECTION_DEFAULT_FILESPEC:=${projectDir}/etc/hub-branch-protection.json}

printUsage()
{
    cat <<HELPTEXT
List the branch protection rule for the passed BRANCH if it exists, or fail if
there's no branch protection.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'list BRANCH [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Check whether a branch protection rule for the passed BRANCH exists.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'exists BRANCH [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Set force-push protection and PR conversation resolution before merging for the
passed BRANCH.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'set BRANCH'
    echo
    cat <<HELPTEXT
Delete branch protection for the passed BRANCH.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'delete BRANCH'
}

action=usageError
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	list)		shift; action=listProtection; break;;
	exists)		shift; action=existsProtection; break;;
	set)		shift; action=setProtection; break;;
	delete)		shift; action=deleteProtection; break;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
branch="$1"; shift
if [ $# -ne 0 -o -z "$branch" ]; then
    printUsage "$0" >&2
    exit 2
fi

usageError()
{
    printUsage "$0" >&2
    exit 2
}

apiCall()
{
    hub api "$@" "repos/${HUB_BRANCHPROTECTION_OWNER}/${HUB_BRANCHPROTECTION_REPO}/branches/${branch:?}/protection"
}

deleteUrlsFromResponse()
{
    jq 'walk(if type == "object" then delpaths([["url"], ["contexts_url"], ["checks"]]) else . end)'
}

collapseEnabledBooleans()
{
    jq 'with_entries(if .value | type == "object" then if .value | has("enabled") then {key: .key, value:.value.enabled} else . end else . end)'
}

listProtection()
{
    local response
    if response="$(apiCall "$@")"; then
	printf '%s\n' "$response" \
	    | deleteUrlsFromResponse \
	    | collapseEnabledBooleans \
	    | jtbl -r
    else
	status=$?
	printf '%s\n' "$response" \
	    | jq --raw-output '.message' >&2
	return $status
    fi
}

existsProtection()
{
    listProtection "$@" >/dev/null || return 1
}

setProtection()
{
    listProtection --method PUT --input "$HUB_SETBRANCHPROTECTION_DEFAULT_FILESPEC"
}

deleteProtection()
{
    apiCall --method DELETE \
	| jq --raw-output '.message'
}

$action "$@"
