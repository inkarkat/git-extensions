#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Delete all passed branch(es) locally as well as in the tracked remote (unless it
has already been auto-deleted by GitHub).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '<branch> [...] [-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

hasBranchBeenAutoDeletedOnMerge()
{
    local trackedRemote="${1:?}"; shift
    local branch="${1:?}"; shift

    [ "$(hub-settings --remote "$trackedRemote" get deleteBranchOnMerge 2>/dev/null)" = 'true' ] || return 1
    RETRY_SUCCEED_VERB='got auto-deleted' RETRY_FAIL_VERB='still exists' RETRY_ABORT_VERB='did not get auto-deleted' \
	retry --silent-command --command-name 'The remote branch' --verbose-or-none --interval 2 --abort-timeout 20 \
	    negateThis git-existsremotebr "$trackedRemote" "$branch"
}

status=99
for branch
do
    tracks="$(git-tracks "$branch" 2>/dev/null)"
    trackedRemote="${tracks%%/*}"
    typeset -a rldeletebrArgs=()
    if [ -z "$trackedRemote" ]; then
	trackedRemote='origin'
	rldeletebrArgs=(--ignore-missing-in-origin)
    fi
    if hasBranchBeenAutoDeletedOnMerge "$trackedRemote" "$branch"; then
	printf >&2 "Note: GitHub already has automatically deleted the merged branch '%s' in %s.\\n" "$branch" "$trackedRemote"
	if git-existsbr "$branch"; then
	    git-deletebr --force "$branch"	# Need force here because without a pull the local repository is not aware of the remote branch deletion and would complain about it not being fully merged.
	    status=$(status99Reduction "$status" $?)
	else
	    printf >&2 "Note: The local branch '%s' already got deleted.\\n" "$branch"
	    status=$(status99Reduction "$status" 99)
	fi
    else
	git-rldeletebr "$trackedRemote" --ignore-missing-local "${rldeletebrArgs[@]}" "$branch"
	status=$(status99Reduction "$status" $?)
    fi
done
exit $status
