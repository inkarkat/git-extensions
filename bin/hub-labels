#!/bin/bash
set -o pipefail

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 "ERROR: Cannot determine script directory!"; exit 3; }
readonly projectDir="${scriptDir}/.."

: ${HUB_LABELS_OWNER:='{owner}'}
: ${HUB_LABELS_REPO:='{repo}'}
: ${HUB_LABELS_DEFAULT_LABEL_FILESPEC:=${projectDir}/etc/github-issue-labels.tsv}

printUsage()
{
    cat <<HELPTEXT
List the labels defined for the current GitHub repository.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--color=(always|auto|never)|--no-color] list [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Add / update [/ delete only LABEL-NAME(s) from] my default labels to the current
GitHub repository.
The labels are stored as tab-separated values (RGB-COLOR NAME DESCRIPTION); by
default in file ${HUB_LABELS_DEFAULT_LABEL_FILESPEC}
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'set [DEFAULT-LABEL-FILESPEC] [LABEL-NAME ...]'
    echo
    cat <<HELPTEXT
Delete the passed labels on the current GitHub repository.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'delete LABEL-NAME [...]'
}

isColor=; type -t colorizeHex >/dev/null && [ -t 1 ] && isColor=t
action=usageError
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=never)
			isColor=; shift;;
	--color=always)	isColor=t; shift;;
	--color)	case "$2" in
			    always) isColor=t;;
			    never)  isColor=;;
			esac
			shift; shift
			;;
	list)		shift; action=listLabels; break;;
	set)		shift; action=setDefaultLabels; break;;
	delete)		shift; action=deleteLabels; break;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

usageError()
{
    printUsage "$0" >&2
    exit 2
}

unset label
apiCall()
{
    hub api "$@" "repos/${HUB_LABELS_OWNER}/${HUB_LABELS_REPO}/labels${label:+/}${label}"
}

listLabels()
{
    [ $# -eq 0 ] || usageError

    apiCall \
	| jq --raw-output '.[] | "#" + .color + "\t" + .name + "\t" + (.description // "(no description)")' \
	| eval "column -s \$'\\t' -t" "${isColor:+|colorizeHex}"
}

setDefaultLabels()
{
    typeset -A existingLabels=() existingColors=() existingDescriptions=() unprocessedLabels=()
    local name; while IFS=$'\t' read -r name color description
    do
	existingLabels["$name"]=t
	existingColors["$name"]="$color"
	existingDescriptions["$name"]="$description"
	unprocessedLabels["$name"]=t
    done < <(
	apiCall \
	    | jq --raw-output '.[] | .name + "\t" + "#" + .color + "\t" + .description'
    )

    if [ -r "$1" ]; then
	local defaultLabelsFilespec="$1"; shift
    else
	local defaultLabelsFilespec="$HUB_LABELS_DEFAULT_LABEL_FILESPEC"
    fi
    if [ ! -r "$defaultLabelsFilespec" ]; then
	printf >&2 'ERROR: Default labels definition does not exist: %s\n' "$defaultLabelsFilespec"
	exit 1
    fi

    local hasPassedLabels=
    typeset -A passedLabels=()
    for label
    do
	hasPassedLabels=t
	passedLabels["$label"]=t
    done

    local color description status=0
    exec 3<&0
    while IFS=$'\t' read -r color label description
    do
	[ ! "$hasPassedLabels" ] || [ "${passedLabels["$label"]}" ] || continue

	if [ "${existingColors["$label"]}" != "${color,,}" ] \
	    || [ "${existingDescriptions["$label"]}" != "$description" ]
	then
	    local labelJson; labelJson="$(jo -- name="$label" -s color="${color#\#}" description="$description")" || exit 3
	    if [ "${existingLabels["$label"]}" ]; then
		apiCall --method PATCH --input <(printf "%s\n" "$labelJson") >/dev/null <&3 \
		    && printf 'Updated label "%s"\n' "$label" \
		    || { status=$?; printf >&2 'ERROR: Failed to update label "%s"\n' "$label"; }
	    else
		label='' apiCall --method POST --input <(printf '%s\n' "$labelJson") >/dev/null <&3 \
		    && printf 'Added label "%s"\n' "$label" \
		    || { status=$?; printf >&2 'ERROR: Failed to add label "%s"\n' "$label"; }
	    fi
	fi

	unset "unprocessedLabels[$label]"
	unset "passedLabels[$label]"
    done < "$defaultLabelsFilespec"

    if [ "$hasPassedLabels" ]; then
	typeset -a undesiredLabels=()
	for label in "${!passedLabels[@]}"
	do
	    if [ "${unprocessedLabels["$label"]}" ]; then
		undesiredLabels+=("$label")
	    else
		printf 'Note: Label "%s" does not exist in GitHub.\n' "$label"
	    fi
	done
	[ ${#undesiredLabels[@]} -eq 0 ] || deleteLabels "${undesiredLabels[@]}"
    elif [ ${#unprocessedLabels[@]} -gt 0 ]; then
	printf 'Note: Additional label in GitHub: "%s"\n' "${!unprocessedLabels[@]}"
    fi
    return $status
}

deleteLabels()
{
    [ $# -gt 0 ] || usageError

    local status=0
    for label
    do
	apiCall --method DELETE || status=$?
    done
    return $status
}

$action "$@"
