#!/bin/bash
set -o pipefail

: ${HUB_PRISREADY_OWNER:='{owner}'}
: ${HUB_PRISREADY_REPO:='{repo}'}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[#ID|<commit>] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Tests whether the passed GitHub pull request with #ID / that has HEAD / <commit>
as the branch's HEAD is not in draft state.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
EXIT STATUS:
    0	Pull request exists and is ready.
    1	Pull request exists but is still in draft state.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    4	No pull request with the given ID / for <commit> exists.
    99	A pull request exists but is't not in open state any longer.
HELPTEXT
}

case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
case $# in
    0)	set -- 'HEAD';;
    1)	;;
    *)	printUsage "$0" >&2; exit 2;;
esac

apiCall()
{
    local prId="${1:?}"; shift
    gh api "$@" --jq '.state + " " + (.draft | tostring)' "repos/${HUB_PRISREADY_OWNER}/${HUB_PRISREADY_REPO}/pulls/${prId:?}"
}

typeset -a commitIds=()
typeset -a identifiers=()
for arg
do
    if [[ "$arg" =~ ^#[[:digit:]]+$ ]]; then
	identifiers+=("${arg#\#}")
    else
	commitId="$(git rev-parse "$arg" 2>/dev/null)" && commitIds+=("$commitId")
    fi
done
[ ${#commitIds[@]} -gt 0 -o ${#identifiers[@]} -gt 0 ] || exit 4


if [ ${#commitIds[@]} -gt 0 ]; then
    while IFS=$'\t' read -r prCommitId prIdentifier
    do
	if contains "$prCommitId" "${commitIds[@]}"; then
	    identifiers+=("$prIdentifier")
	fi
    done < <(hub pr list -f "%sH	%I%n")
fi
[ ${#identifiers[@]} -eq 1 ] || exit 4

response="$(apiCall "${identifiers[0]}")" || exit 3
case "$response" in
    open\ true)
	exit 1;;
    open\ false)
	exit 0;;
    open\ *)
	echo >&2 "ASSERT: Response is not a boolean: $response"; exit 3;;
    *)
	exit 99;
esac
