#!/bin/bash

: ${HUB_PRREVIEWDURATION_OWNER:='{owner}'}
: ${HUB_PRREVIEWDURATION_REPO:='{repo}'}
: ${HUB_PRREVIEWDURATION_COLOR_PRID=[35m}
: ${HUB_PRREVIEWDURATION_COLOR_REVIEWER=[32m}
: ${HUB_PRREVIEWDURATION_COLOR_TITLE=[0m}
: ${HUB_PRREVIEWDURATION_COLOR_RESET=[0m}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, they can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--color=(always|auto|never)|--no-color] [--reviewer=<pattern> [--reviewer ...]] [--since=<date>] [--until=<date>] [--sort-by-duration|--sort-by-reviewdate] [-s|--summary [--raw]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print durations from the opening / request of a pull request review to the
actual review / comments on the PR, by author and PR.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --reviewer=<pattern>
			Limit the reviews to those done by reviewers matching
			the specified pattern (regular expression).
    --since=<date>	Limit the reviews to those more recent than the
			specified date.
    --until=<date>	Limit the reviews to those older than the specified
			date.
    --sort-by-duration	Order the output by the duration (descending).
			The default sort order is by PR number, descending.
    --sort-by-reviewdate
			Order the output by the time the review was done
			(descending).
    --summary|-s	Only print statistics about the durations.
    --raw		Print just the bare, space-separated numbers.
SEE ALSO:
- (Commands offering complementary functionality, or commands using this command.)

RELATED COMMANDS:
- (Alternatives from other authors, other approaches, references not used here.)

cla-exitstatus
HELPTEXT
}

isColor=t
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS)
typeset -a formatter=(column -s $'\t' -t)
typeset -a secondsToDurationAlignmentArgs=(--width 10)
if [ ! -t 1 ]; then
    isColor=
    pager=()
    formatter=()
    secondsToDurationAlignmentArgs=()
fi
typeset -a reviewers=()
sinceEpoch=
untilEpoch=
typeset -a sorter=()
printer=printList
summarizer=renderDuration
typeset -a statisticsArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=never)
			shift; isColor=;;
	--color=always)	shift; isColor=t;;
	--color=*)	shift;;
	--color)	case "$2" in never) isColor=;; always) isColor=t;; esac; shift; shift;;

	--reviewer)	shift; reviewers+=("${1?}"); shift;;
	--reviewer=*)	reviewers+=("${1#--reviewer=}"); shift;;
	--since=*)	sinceEpoch=$(date --date="${1#--since=}" +%s) || exit 2; shift;;
	--since)	shift; sinceEpoch=$(date --date="${1:?}" +%s) || exit 2; shift;;
	--until=*)	untilEpoch=$(date --date="${1#--until=}" +%s) || exit 2; shift;;
	--until)	shift; untilEpoch=$(date --date="${1:?}" +%s) || exit 2; shift;;
	--sort-by-duration)
			shift; sorter=(sort --field-separator $'\t' -k1,1nr);;
	--sort-by-reviewdate)
			shift; sorter=(sort --field-separator '@' -k2,2nr);;
	--summary|-s)	shift; summarizer=summarize; printer=printDurationOnly; pager=();;
	--raw)		statisticsArgs=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ "$isColor" ] || unset "${!HUB_PRREVIEWDURATION_COLOR_@}"

apiCall()
{
    memoizeCall --for 1h --successful-only \
    	--memoize-group hub-prreviewduration \
	--subject "$(git root)/${HUB_PRREVIEWDURATION_OWNER}/${HUB_PRREVIEWDURATION_REPO}" \
    	-- hub api --paginate graphql \
	    --raw-field query="
query(\$endCursor: String) {
    repository(owner: \"${HUB_PRREVIEWDURATION_OWNER}\", name: \"${HUB_PRREVIEWDURATION_REPO}\") {
	pullRequests(first: 100, after: \$endCursor, states: [OPEN, CLOSED, MERGED]) {
	    nodes {
		number
		createdAt
		title
		reviews(first: 100) {
		    nodes {
			author {
			    login
			}
			submittedAt
		    }
		}
		timelineItems(itemTypes: [REVIEW_REQUESTED_EVENT], first: 100) {
		    nodes {
			... on ReviewRequestedEvent {
			    requestedReviewer {
				__typename
				... on User {
				    login
				}
			    }
			    createdAt
			}
		    }
		}
	    }
	    pageInfo {
		hasNextPage
		endCursor
	    }
	}
    }
}"
}

extractAndOrder()
{
    jq --raw-output '
	    .data.repository.pullRequests.nodes | .[]
		| (.number | tostring) as $prNr
		| (.createdAt | fromdateiso8601 | tostring) as $prDate
		| .title as $prTitle
		|
		    (.timelineItems.nodes | .[] | $prNr + "\t" + .requestedReviewer.login + "\t" + (.createdAt | fromdateiso8601 | tostring) + "\t?"),
		    (.reviews.nodes | .[] | $prNr + "\t" + .author.login + "\t" + $prDate + "\t*\n"
			+ $prNr + "\t" + .author.login + "\t" + (.submittedAt | fromdateiso8601 | tostring) + "\t!\t" + $prTitle
		    )' \
	| sort --field-separator $'\t' --unique -k1,1nr -k2,2 -k3,3n -k4,4
}

printDeltas()
{
    local previousPrId prId previousUsername username previousEpoch epoch eventType prTitle
    while IFS=$'\t' read -r prId username epoch eventType prTitle
    do
	# echo >&2 "**** $prId $username $epoch $eventType $prTitle"
	if [ "$eventType" = '!' ]; then
	    if [ -n "$previousEpoch" ] \
	    	&& isMatchingDate $previousEpoch $epoch \
	    	&& isMatchingReviewer "$username"
	    then
		$printer $((${epoch:?} - ${previousEpoch:?})) "${prId:?}" "${username:?}" ${epoch:?} "$eventType" "$prTitle"
	    fi
	    previousPrId=''
	    previousUsername=''
	    previousEpoch=''
	elif [ "$prId" = "$previousPrId" -a "$username" = "$previousUsername" ]; then
	    previousEpoch=$epoch
	else
	    previousPrId=$prId
	    previousUsername="$username"
	    previousEpoch=$epoch
	fi
    done
}

isMatchingDate()
{
    local date; for date
    do
	[ -z "$sinceEpoch" -o $date -ge ${sinceEpoch:-0} ] \
	    && [ -z "$untilEpoch" -o $date -le ${untilEpoch:-0} ] \
	    || return 1
    done
    return 0
}

isMatchingReviewer()
{
    local username="${1:?}"; shift
    [ ${#reviewers[@]} -gt 0 ] || return 0

    local reviewer; for reviewer in "${reviewers[@]}"
    do
    	[[ "$username" =~ $reviewer ]] && return 0
    done
    return 1
}

printDurationOnly()
{
    printf '%d\n' "${1:?}"
}

printList()
{
    local duration="${1:?}"; shift
    local prId="${1:?}"; shift
    local username="${1:?}"; shift
    local epoch="${1:?}"; shift
    local eventType="${1:?}"; shift
    local prTitle="${1:?}"; shift

    printf '%d\t%s(%s, @%d)%s\t%s#%d%s %s%s%s\n' \
	$duration \
	"$HUB_PRREVIEWDURATION_COLOR_REVIEWER" "$username" "$epoch" "$HUB_PRREVIEWDURATION_COLOR_RESET" \
	"$HUB_PRREVIEWDURATION_COLOR_PRID" "$prId" "$HUB_PRREVIEWDURATION_COLOR_RESET" \
	"${prTitle:+$HUB_PRREVIEWDURATION_COLOR_PRTITLE}" "$prTitle" "${prTitle:+$HUB_PRREVIEWDURATION_COLOR_RESET}"
}

renderDuration()
{
    reldate --date-pattern '' \
	| eval "secondsToDuration --match '^&' --precision 7 \"\${secondsToDurationAlignmentArgs[@]}\"" \
	"${formatter:+|}" '"${formatter[@]}"'
}

summarize()
{
    if [ ${#statisticsArgs[@]} -eq 0 ]; then
	STATISTICS_PRECISION=0 acceptStatus 0 99 statistics \
	    | secondsToDuration --precision 7 --skip '[Nâ‰ ]:&'
    else
	STATISTICS_PRECISION=0 STATISTICS_SEP=$'\t' acceptStatus 0 99 statistics "${statisticsArgs[@]}"
    fi
}

apiCall "$@" \
    | extractAndOrder \
    | eval printDeltas \
    "${sorter:+|}" '"${sorter[@]}"' \
    | eval "$summarizer" \
    "${pager:+|}" '"${pager[@]}"'
