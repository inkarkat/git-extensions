#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-i|--as-integration-message|-m|--as-merge-message] [-Q|--qualified-with-userrepo] [<commit> [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Obtain corresponding GitHub pull request(s) that have HEAD / <commit>(s) as the
branch's HEAD, and print its title(s); on separate lines, with a summary header
listing the PR numbers followed by an empty line) then.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --as-integration-message|-i
			Output in a format suitable for a pull request that
			references the superproject that integrates the changes
			in this submodule.
    --as-merge-message|-m
			Output in a format suitable for a merge commit instead
			of a plain list.
    --qualified-with-userrepo|-Q
			Put the USER/REPO in front of the pull request number.
HELPTEXT
}
action=list
isQualified=
prIdentifierFormat='%i'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--as-integration-message|-i)
			shift; action=integrationMessage;;
	--as-merge-message|-m)
			shift; action=mergeMessage;;
	--qualified-with-userrepo|-Q)
			shift; isQualified=t; prIdentifierFormat='%U';;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

contains()
{
    local elem needle=$1; shift
    for elem
    do
	[ "$needle" = "$elem" ] && return 0
    done
    return 1
}

list()
{
    [ ${#titles[@]} -gt 0 ] || return 99
    local i; for ((i = 0; i < ${#identifiers[@]}; i++))
    do
	printf '%s %s\n' "${identifiers[$i]}" "${titles[$i]}"
    done
}

integrationMessage()
{
    [ ${#titles[@]} -gt 0 ] || return 99
    local i; for ((i = 0; i < ${#identifiers[@]}; i++))
    do
	[ "$isQualified" ] && title='' || title="${titles[$i]}"
	printf '* Note: This is being integrated via %s%s\n' "${identifiers[$i]}" "${title:+ }${title}"
    done
}

mergeMessage()
{
    IFS=$'\n'
    case "${#titles[@]}" in
	0)  return 99;;
	1)  printf '%s\n\nIntegrated via %s\n' "${titles[0]}" "${identifiers[0]}";;
	*)  printf -v summary '%s, ' "${identifiers[@]}"; summary="${summary%, }"
	    printf 'Merge pull requests %s\n\n' "$summary"
	    printf '%s\n' "${titles[@]}"
	    printf '\nIntegrated via %s\n' "$summary"
	    ;;
    esac
}

[ $# -gt 0 ] || set -- 'HEAD'
typeset -a commitIds=()
for c
do
    commitId="$(git rev-parse "$c" 2>/dev/null)" && commitIds+=("$commitId")
done
[ ${#commitIds[@]} -gt 0 ] || exit 1


typeset -a titles=()
typeset -a identifiers=()
while IFS=$'\t' read -r prCommitId prIdentifier prTitle
do
    if contains "$prCommitId" "${commitIds[@]}"; then
	titles+=("$prTitle")
	if [ "$isQualified" ]; then
	    identifiers+=("$(hub-userrepo "$prIdentifier")")
	else
	    identifiers+=("$prIdentifier")
	fi
    fi
done < <(hub pr list -f "%sH	$prIdentifierFormat	%t%n")

$action
