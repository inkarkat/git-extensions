#!/bin/bash
set -o pipefail

readarray -t defaultArgs < <(eval "git $GIT_CONFIG_ARGS config --get-all pull-request.defaultArg")
set -- "${defaultArgs[@]}" "$@"

base=
head=
isEdit=
isBrowse=
isCopy=
isPrint=
hasMessage=
typeset -a args=()
typeset -a outputArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-\?)	shift; exec hub pull-request --help;;
	--base|-b)	args+=("$1" "${2:?}"); shift; base="$1"; shift;;
	--head|-h)	args+=("$1" "${2:?}"); shift; head="$1"; shift;;
	--edit|-e)	args+=("$1"); shift; isEdit=t;;
	--browse|-o)	outputArgs+=("$1"); shift; isBrowse=t;;
	--copy|-c)	outputArgs+=("$1"); shift; isCopy=t;;
	--print)	shift; isPrint=t;;
	--message|-m)	args+=("$1" "${2?}"); shift; shift; hasMessage=t;;
	--file|-F)	shift
			# XXX: Multiple --message are supported, but --file is
			# ignored once a --message is passed.
			if [ "$1" = - ]; then
			    args+=(--message "$(</dev/stdin)")
			else
			    args+=(--message "$(<"${1?}")")
			fi
			shift
			hasMessage=t
			;;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
typeset -a appendedPullRequestTemplateArgs=()

editPullRequestMessage()
{
    # Need to update the matching pull request.
    local prId; prId="${head:+$(hub pr show --head "$head" -f '%I')}"

    local gitDir="$(git rev-parse --git-dir 2>/dev/null)"
    TMPDIR="$gitDir" tempedit \
	--basename PULLREQ_EDITMSG \
	--sink-exec sed -e 1d -e '2{/^$/d}' -- {} \; \
	--sink-exec gh pr edit $prId --body-file - \; \
	"$@" \
	-- hub pr show ${head:+--head "$head"} -f $'%t (← do not edit here)\n\n%b'
}

if hub-existspr ${base:+--base "$base"} ${head:+--head "$head"} --print | outputAndPrintf "${HUB_PULLREQUEST_WHAT:-A} pull request already exists:\\n"; then
    typeset -a choices=('[E]dit message body' '[S]kip' '[A]bort')
    [ "$hasMessage" ] && choices=('[U]pdate message body from template' "${choices[@]}")
    choice="$(userchoiceFromList --ignore-case --no-cancel -- "${choices[@]}")" || exit $?
    case "$choice" in
	Update\ message\ body\ from\ template)
	    gitDir="$(git rev-parse --git-dir 2>/dev/null)"
	    templateTempFilespec="$(git-commitMessagePrint "${args[@]}" \
		| TMPDIR="$gitDir" tempfile \
		    --quiet --basename PULLREQ_EDITMSG_TEMPLATE)" || exit 3
	    [ "${DEBUG:-}" ] || trap 'rm -f -- "$templateTempFilespec" 2>/dev/null' EXIT
	    editPullRequestMessage --editor-args -d -o "$templateTempFilespec" \;
	    exit $?
	    ;;
	Edit\ message\ body)
	    editPullRequestMessage; exit $?;;
	Skip)	exit 99;;
	Abort)	exit 4;;
	*)	printf >&2 'ASSERT: Unhandled choice: %s\n' "$choice"; exit 3;;
    esac
fi

root="$(git root)" || exit $?
if [ "$hasMessage" ] && [ "$isEdit" ]; then
    # Source: https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository
    for templateFilespec in \
	"${root}/pull_request_template.md" \
	"${root}/docs/pull_request_template.md" \
	"${root}/.github/pull_request_template.md"
	# TODO: Allow template selection from PULL_REQUEST_TEMPLATE/ subdir.
    do
	if [ -r "$templateFilespec" ]; then
	    appendedPullRequestTemplateArgs=(--message "$(<"$templateFilespec")")
	    break
	fi
    done
fi

if [ "$isPrint" ] && { [ "$isBrowse" ] || [ "$isCopy" ]; }; then
    # XXX: hub pull-request unfortunately prints the URL as the default action,
    # and --browse or --copy override that behavior, so we cannot have both.
    # We have to let hub pull-request do the default output and emulate the
    # other output action ourselves.
    output="$(hub pull-request "${args[@]}" "${appendedPullRequestTemplateArgs[@]}" "$@")" || exit $?

    printf '%s\n' "$output"
    [ "$isBrowse" ] && git-browse "$output"
    [ "$isCopy" ] && printf '%s\n' "$output" | clipboard

    exit 0
fi

exec hub pull-request "${args[@]}" "${outputArgs[@]}" "${appendedPullRequestTemplateArgs[@]}" "$@"
