#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-y|--yes|--if-up-to-date] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Push the current branch to all of: upstream (if writeable) / tracked remote /
origin (in an order that makes sense).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --if-up-to-date	Do not push if the branch is not up-to-date (in any
			applicable remote).
HELPTEXT
}

isUpToDateCheck=
typeset -a gitRemoteMutateArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--yes|-y)	gitRemoteMutateArgs+=("$1"); shift;;
	--if-up-to-date)
			isUpToDateCheck=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

if git-isdetached; then
    echo >&2 'ERROR: Detached working copy; cannot push.'
    exit 99
fi

hasRemote()
{
    local remote="${1:?}"; shift
    git-existsbr "${remote}/${targetBranch}" \
	&& ! git-remote-isreadonly "$remote"
}

targetBranch="$(git-brname --real-branch-only)" || exit $?
printf -v quotedTargetBranch %q "$targetBranch"
targetTracks="$(git-tracks 2>/dev/null)"

if [ -n "$targetTracks" ]; then
    targetTrackedRemote="${targetTracks%%/*}"
    contextCommand="git rev-range-outgoing $targetTrackedRemote --color=always --one-more-command greyonelinelog --one-more-only-to-terminal lg --branch $quotedTargetBranch"
else
    typeset -a remotes=(); readarray -t remotes < <(git remote)
    targetTrackedRemote="$(userchoiceFromList --keep-prompt --question "No upstream configured for branch '$targetBranch' yet; choose remote?" --ignore-case -- "${remotes[@]}")" \
	|| exit 99
    contextCommand="git rev-range-this-branch --color=always --one-more-command greyonelinelog --one-more-only-to-terminal lg --branch $quotedTargetBranch"
fi

typeset -A pushRemotes=()
if [ "$targetTrackedRemote" = 'origin' ]; then
    hasRemote upstream \
	&& pushRemotes[upstream]=t
else
    hasRemote origin \
	&& pushRemotes[origin]=t
    pushRemotes["$targetTrackedRemote"]=t
fi

if [ "$isUpToDateCheck" ]; then
    status=0
    printf 'Final up-to-date check before pushing %s:\n' "$targetBranch"
    for remote in "${!pushRemotes[@]}"
    do
	git-uptodate --tracked "${remote}/${targetBranch}" || status=$?
    done
    [ $status -eq 0 ] || exit $status
    gitRemoteMutateArgs+=(--yes)
fi

if [ "${pushRemotes[upstream]}" ]; then
    # First push to upstream; we usually want to catch up origin to
    # upstream, but keep it at the current state if pushing to upstream
    # failed.
    git-remote-mutate upstream --message 'Push' --argument "$targetBranch" --context-command "git uoutlg --color=always --branch $quotedTargetBranch" "${gitRemoteMutateArgs[@]}" \
	push upstream "HEAD:refs/heads/${targetBranch}" || exit $?
fi
if [ -n "$targetTrackedRemote" ]; then
    # Push to the tracked remote (usually origin).
    git-remote-mutate "$targetTrackedRemote" --message 'Push' --argument "$targetBranch" --context-command "$contextCommand" "${gitRemoteMutateArgs[@]}" \
	push "$targetTrackedRemote" "HEAD:refs/heads/${targetBranch}" || exit $?
fi
if [ "${pushRemotes[origin]}" ]; then
    # Push to origin (if it's different from the tracked remote) last.
    git-remote-mutate origin --message 'Push' --argument "$targetBranch" --context-command "git ooutlg --color=always --branch $quotedTargetBranch" "${gitRemoteMutateArgs[@]}" \
	push origin "HEAD:refs/heads/${targetBranch}" || exit $?
fi
