#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Print the remote name used for GitHub interactions.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

# gh asks (if there are multiple remotes) for the repository on the first run if
# none has been specified so far; this information is stored (a bit
# intransparenly; cp. https://github.com/cli/cli/issues/1864) in the repo's Git
# configuration under remote.<remote>.gh-resolved. We can query that to obtain
# the selected value.
# Source: https://github.com/cli/cli/issues/2300#issuecomment-717476725
obtainRemote()
{
    # Note: In gh 2.42.0, there's now "gh repo set-default --view", but this prints
    # the owner/repo instead of the remote name. We could resolve this through "git
    # remote", but the parsing is more involved than simply reading the internal
    # config.
    git config --local --get-regexp '\.gh-resolved$' | cut -f2 -d.
}

remote="$(obtainRemote)"
if [ -z "$remote" ]; then
    readarray -t remotes < <(git remote)
    case ${#remotes[@]} in
	0)	printf >&2 'ERROR: No remotes defined.\n'; exit 3;;
	1)	remote="${remotes[0]}";;
	*)	# gh 2.42.0 has a dedicated command to set the default remote; for older gh versions, any repo query will trigger the prompt.
		{
		    gh repo set-default 2>/dev/null \
			|| gh repo view --json name --template '{{""}}'
		} </dev/tty >/dev/tty # Need to give terminal access to make gh prompt for input.
		remote="$(obtainRemote)"
		;;
    esac
fi
if [ -z "$remote" ]; then
    # XXX: When gh somehow could not prompt for the remote (no terminal)
    # it complains "repository required when not running interactively" followed by
    # its lengthy usage. We suppress all of that (see above), and instead give a
    # sensible error here so that the user knows what's wrong and how it can be
    # fixed.
    echo >&2 'No default remote repository has been set yet. Please run "gh repo set-default" to select a default remote repository first.'
    exit 3
fi

printf '%s\n' "$remote"
