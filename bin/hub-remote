#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Print the remote name used for GitHub interactions.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=*)
			shift;;
    --color)		shift; shift;;
esac
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

# gh asks (if there are multiple remotes) for the repository on the first run if
# none has been specified so far; this information is stored (a bit
# intransparenly; cp. https://github.com/cli/cli/issues/1864) in the repo's Git
# configuration under remote.<remote>.gh-resolved. We can query that to obtain
# the selected value.
# Source: https://github.com/cli/cli/issues/2300#issuecomment-717476725
obtainRemote()
{
    git config --local --get-regexp '\.gh-resolved$' | cut -f2 -d.
}

remote="$(obtainRemote)"
if [ -z "$remote" ]; then
    readarray -t remotes < <(git remote)
    case ${#remotes[@]} in
	0)	printf >&2 'ERROR: No remotes defined.\n'; exit 3;;
	1)	remote="${remotes[0]}";;
	*)	gh repo view --json name --template '{{""}}'	# Note: Any repo query will do.
		remote="$(obtainRemote)"
		;;
    esac
fi
if [ -z "$remote" ]; then
    # XXX: When the script's output is not to a terminal (e.g. command
    # substitution), gh does not print its error message. We have to give a sensible
    # error so that the user knows what's wrong.
    echo >&2 'No default remote repository has been set yet. Please run "gh repo set-default" to select a default remote repository first.'
    exit 3
fi

printf '%s\n' "$remote"
