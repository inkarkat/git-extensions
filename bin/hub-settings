#!/bin/bash

: ${HUB_SETTINGS_OWNER:='{owner}'}
: ${HUB_SETTINGS_REPO:='{repo}'}

printUsage()
{
    cat <<HELPTEXT
List all cached GitHub settings for the current repository [in REMOTE].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--remote REMOTE] list [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Get cached / obtain and cache GitHub SETTING-NAME for the current repository [in REMOTE].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--remote REMOTE] get SETTING-NAME'
    echo
    cat <<HELPTEXT
Obtain (and cache) GitHub SETTING-NAME for the current repository [in REMOTE].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--remote REMOTE] obtain SETTING-NAME'
    echo
    cat <<HELPTEXT
Set (and cache) GitHub SETTING-NAME to the current repository [in REMOTE].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--remote REMOTE] set SETTING-NAME VALUE'
    echo
    cat <<HELPTEXT
Update all cached GitHub settings / SETTING-NAME for the current repository [in REMOTE].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--remote REMOTE] update-all|update SETTING-NAME'
    echo
    cat <<HELPTEXT
Clear cached GitHub settings / SETTING-NAME for the current repository [in REMOTE].
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--remote REMOTE] invalidate-all|invalidate SETTING-NAME'
}

remote=
typeset -a remoteRepositoryArg=()
action=usageError
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--remote|-r)	shift
			remote="${1:?}"; shift
			remoteUrl=$(git-remote-url "$remote") \
			    && remoteRepositoryArg=("$(hub-userrepo "$remoteUrl")") \
			    || exit $?
			HUB_SETTINGS_OWNER="${remoteRepositoryArg[0]%%/*}"
			HUB_SETTINGS_REPO="${remoteRepositoryArg[0]#*/}"
			;;
	list)		shift; action=listSettings; break;;
	get)		shift; action=getSetting; break;;
	obtain)		shift; action=obtainSetting; break;;
	set)		shift; action=setSetting; break;;
	update-all)	shift; action=updateAll; break;;
	update)		shift; action=updateSetting; break;;
	invalidate-all)	shift; action=invalidateAll; break;;
	invalidate)	shift; action=invalidateSetting; break;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

[ -n "$remote" ] || remote="$(hub-remote)" || exit 3

gitDir="$(git rev-parse --git-dir 2>/dev/null)" || exit $?
database()
{
    if [ -z "$remote" ]; then
	echo >&2 'Note: Cannot obtain the configured remote; cache access disabled.'
	return 1
    fi

    nanoDB --basedir "$gitDir" --namespace hub-settings --table "${remote:?}" "$@"
}

apiCall()
{
    gh api "$@" "repos/${HUB_SETTINGS_OWNER}/${HUB_SETTINGS_REPO}"
}

toUnderScoreNotation()
{
    local camelCaseName="${1?}"; shift
    printf '%s\n' "$camelCaseName" | sed -e 's/[[:upper:]]/_\l&/g'
}

usageError()
{
    printUsage "$0" >&2
    exit 2
}

listSettings()
{
    database --get-as-list '=' --newline-formatting $'\n    '
}

querySetting()
{
    local settingName="${1:?}"; shift

    # XXX: gh only supports some repo settings; everything else has to be
    # queried via the REST API.
    if gh repo view --json 2>&1 | grep --quiet --fixed-strings --line-regexp "  $settingName"; then
	gh repo view --json "$settingName" --template "{{.$settingName}}" "${remoteRepositoryArg[@]}"
    else
	# The REST API uses underscore_notation, whereas the JSON query uses
	# camelCase.
	apiCall --jq ".$(toUnderScoreNotation "$settingName")"
    fi
}

getSetting()
{
    local settingName="${1:?}"; shift
    local settingValue

    if settingValue="$(database --query "$settingName")"; then
	printf '%s\n' "$settingValue"
    else
	obtainSetting "$settingName"
    fi
}

obtainSetting()
{
    local settingName="${1:?}"; shift
    local status=0 settingValue

    settingValue="$(querySetting "$settingName")" || return $?
    database --update "$settingName" --value "$settingValue" || status=3

    printf '%s\n' "$settingValue"
    return $status
}

writeSetting()
{
    local settingName="${1:?}"; shift
    local settingValue="${1?}"; shift

    local settingJson; settingJson="$(jo -- "$(toUnderScoreNotation "$settingName")=${settingValue}")" || exit 3
    # The REST API uses underscore_notation, whereas the JSON query uses
    # camelCase.
    apiCall --method PATCH --input <(printf "%s\n" "$settingJson") >/dev/null
}

setSetting()
{
    local settingName="${1:?}"; shift
    local settingValue="${1?}"; shift

    writeSetting "$settingName" "$settingValue" || return $?

    unset cachedSettingValue
    cachedSettingValue="$(database --query "$settingName")"

    if [ -z "${cachedSettingValue+t}" ]; then
	printf 'New %s=%s\n' "$settingName" "$settingValue"
    elif [ "$cachedSettingValue" != "$settingValue" ]; then
	printf "Updated %s from '%s' to '%s'.\n" "$settingName" "$cachedSettingValue" "$settingValue"
    else
	return 99
    fi

    database --update "$settingName" --value "$settingValue" || return 3
}

updateAll()
{
    status=99
    local key; while IFS=$'\n' read -r key
    do
	updateSetting "$key"; status=$(status99Reduction "$status" $?)
    done < <(database --query-keys)
    return $status
}

updateSetting()
{
    local settingName="${1:?}"; shift
    unset cachedSettingValue

    cachedSettingValue="$(database --query "$settingName")"
    newSettingValue="$(querySetting "$settingName")" || return $?

    if [ -z "${cachedSettingValue+t}" ]; then
	printf 'New %s=%s\n' "$settingName" "$newSettingValue"
    elif [ "$cachedSettingValue" != "$newSettingValue" ]; then
	printf "Updated %s from '%s' to '%s'.\n" "$settingName" "$cachedSettingValue" "$newSettingValue"
    else
	return 99
    fi

    database --update "$settingName" --value "$newSettingValue" || return 3
}

invalidateAll()
{
    database --drop
}
invalidateSetting()
{
    local settingName="${1:?}"; shift
    database --delete "$settingName"
}

$action "$@"
