#!/bin/bash
set -o pipefail
shopt -qs extglob

readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

printUsage()
{
    cat <<HELPTEXT
Open a pull request for the current submodule / for all submodules that are on
the same branch as the superproject.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[HUB-PULL-REQUEST-ARGS ...] [-?|--help]'
    echo
    cat <<HELPTEXT
Just print the would-be pull request message template for the current submodule
/ for all submodules that are on the same branch as the superproject.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '--print-message'
}

action=openPullRequest
typeset -a recursiveArgs=()
typeset -a recursionArgs=(--interactive)
remote="$(git-trackedremote 2>/dev/null)" || remote='origin'
base="$(git-mbr)" || exit $?
head=
typeset -a args=()
superMessage=
unset superRelatedChanges
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-\?)	shift; printUsage "$0"; exit 0;;
	--print-message)
			recursiveArgs+=("$1"); shift; action=printMessage; recursionArgs=();;
	--base|-b)	shift; base="${1:?}"; shift;;
	--head|-h)	shift; git-equals "${1:?}" HEAD || head="$1"; shift;;
	--super-message)
			shift; superMessage="${1:?}"; shift;;
	--super-related-changes)
			shift; superRelatedChanges="${1:?}"; shift;;
	--existing-changes)
			shift
			currentSubmodule="${1?}"; shift
			readarray -t submodules < <(git subsamebrdo --subdo-command-name "${scriptName#hub-}" ${head:+--branch "$head"} --no-header)
			[ ${#submodules[@]} -eq 0 ] && exit 0
			git-subchanges "${remote}/${base}..${head}" --no-color --include-pull-requests --qualified-with-userrepo --as markdown ${currentSubmodule:+--exclude-submodule "$currentSubmodule"} "${submodules[@]}"
			exit 0
			;;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

getSuperMessage()
{
    local isInSubmodule="${1?}"; shift
    withSeparator \
	    --command "git ${isInSubmodule:+superdo --no-header} l ${remote}/${base}..${head} --" \
	    --command "git ${isInSubmodule:+superdo --no-header} superchanges --pretty=tformat:%B ${remote}/${base}..${head} -- | markdownEscape"
}

getSuperRelatedChanges()
{
    local isInSubmodule="${1?}"; shift
    git ${isInSubmodule:+superdo --no-header} superchanges --as markdown "${remote}/${base}..${head}"
}

openPullRequest()
{
    exec hub-wrapper pull-request --base "$base" ${head:+--head "$head"} --message "$message" --edit "$@"
}

printMessage()
{
    printf '%s\n' "$message"
}

if [ -n "$superMessage" ] || git issubmodule; then
    [ -n "$superMessage" ] \
	|| superMessage="$(getSuperMessage t)" \
	|| echo >&2 'Note: Found no corresponding changes in superproject.'
    : ${superRelatedChanges="$(getSuperRelatedChanges t)"}

    # Do this for each submodule, even if invoked in the superproject, as each
    # submodule iteration adds a pull request.
    currentSubmodule="$(git-supersubpath)" || exit $?
    existingChanges="$(git superdo --no-header "${scriptName#hub-}" --base "$base" ${head:+--head "$head"} --existing-changes "$currentSubmodule")"
    typeset -a existingChangesCommand=()
    readonly relatedChangesHeader='##### Related changes:'
    if [ -n "$superRelatedChanges" -a -n "$existingChanges" ]; then
	printf -v echoExistingChanges 'printf %%s\\\\n%%s\\\\n\\\\n%%s\\\\n %q %q %q' "$relatedChangesHeader" "$superRelatedChanges" "$existingChanges"
	existingChangesCommand=(--command "$echoExistingChanges")
    elif [ -n "$superRelatedChanges" -o -n "$existingChanges" ]; then
	printf -v echoExistingChanges 'printf %%s\\\\n%%s\\\\n %q %q' "$relatedChangesHeader" "${superRelatedChanges}${existingChanges}"
	existingChangesCommand=(--command "$echoExistingChanges")
    fi

    message="$(withSeparator \
	--command "git l ${remote}/${base}..${head} --" \
	"${existingChangesCommand[@]}" \
	--command "hub-logForPullRequest ${remote}/${base}..${head} --" \
	--command "hub-additionalInfoForPullRequest $head" \
    )" || exit $?

    message="${superMessage}${superMessage:+$'\n\n'}$message"
    $action "$@"
else
    superMessage="$(getSuperMessage '')" || exit $?
    superRelatedChanges="$(getSuperRelatedChanges '')" || exit $?

    exec hub-wrapper subsamebrdo --subdo-command-name "${scriptName#hub-}" ${head:+--branch "$head"} --no-git-color "${recursionArgs[@]}" \
	    "${scriptName#hub-}" "${recursiveArgs[@]}" --base "$base" ${head:+--head "$head"} --super-message "$superMessage" --super-related-changes "$superRelatedChanges"
fi
