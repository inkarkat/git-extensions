#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-i|--as-integration-message|--as-title-and-integration-message] [-Q|--qualified-with-userrepo] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Obtain corresponding GitHub pull request(s) of the submodule's superproject, and
print its title(s); on separate lines, with a summary header listing the PR
numbers followed by an empty line) then.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --as-integration-message|-i
			Output in a format suitable for a pull request that
			references the superproject that integrates the changes
			in this submodule.
    --qualified-with-userrepo|-Q
			Put the USER/REPO in front of the pull request number.
HELPTEXT
}

typeset -a prTitleArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=*)
			shift;;
	--color)	shift; shift;;
	--as-integration-message|-i|--as-title-and-integration-message|--qualified-with-userrepo|-Q)
			prTitleArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
elif ! superproject="$(git-issubmodule --print)"; then
    echo >&2 'Not a submodule.'
    exit 1
fi

cd "$superproject" || exit $?
exec hub-prtitle "${prTitleArgs[@]}"
