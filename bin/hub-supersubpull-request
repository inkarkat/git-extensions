#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${HUB_SUPERSUBPULLREQUEST_SUBMODULE_END=;}

readonly scriptName="$(basename -- "${BASH_SOURCE[0]}")"

printUsage()
{
    cat <<HELPTEXT
Open pull requests for the superproject and the current submodule / for all
submodules [from the passed SUBMODULE(s)] that are on the same branch as the
superproject.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[HUB-PULL-REQUEST-ARGS ...] [--for -|--for SUBMODULE [...] ${HUB_SUPERSUBPULLREQUEST_SUBMODULE_END}] [-?|--help]"
}

remote="$(git-trackedremote 2>/dev/null)" || remote='origin'
base="$(git-mbr)" || exit $?
head=
typeset -a args=()
typeset -a subdoArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-\?)	shift; printUsage "$0"; exit 0;;
	--base|-b)	shift; base="${1:?}"; shift;;
	--head|-h)	shift; git-equals "${1:?}" HEAD || head="$1"; shift;;
	--for)		subdoArgs+=("$1"); shift
			if [ "$1" = - ]; then
			    subdoArgs+=("$1"); shift
			else
			    while [ $# -gt 0 -a "$1" != "$HUB_SUPERSUBPULLREQUEST_SUBMODULE_END" ]
			    do
				subdoArgs+=("$1")
				shift
			    done
			    if [ $# -eq 0 ]; then
				echo "ERROR: --for must be concluded with '${HUB_SUPERSUBPULLREQUEST_SUBMODULE_END}'"; echo; printUsage "$0"
				exit 2
			    fi >&2
			    subdoArgs+=("$1")
			    shift
			fi
			;;
	--repeat)	subdoArgs+=("$1");;
	--)		args+=("$1"); shift; break;;
	*)		args+=("$1"); shift;;
    esac
done
set -- "${args[@]}" "$@"

goToSuperproject() { :; }
if git issubmodule; then
    goToSuperproject()
    {
	cd "${superprojectRoot:?}" || exit 3
	header "../$(git-wcname)"
	goToSuperproject() { :; }
    }

    superprojectRoot="$(git superproject)" || exit 3
    submoduleRoot="$PWD"
    cd "$superprojectRoot" || exit 3
    header "../$(git-wcname)"

    handleSubmodules()
    {
	cd "$submoduleRoot" || exit 3
	header "$(git-wcname)"
	hub-existspr --base "$base" ${head:+--head "$head"} --print | outputAndPrintf 'Note: Submodule pull request already exists; skipping:\n' \
	    && return 99

	local message
	message="$(withSeparator \
	    --command 'hub-superpr' \
	    --command "git l ${remote}/${base}..${head} -- | markdownEscape" \
	    --command "hub-logForPullRequest ${remote}/${base}..${head} --" \
	)" || exit $?

	hub-wrapper pull-request --base "$base" ${head:+--head "$head"} --message "$message" --edit "$@"
    }
else
    handleSubmodules()
    {
	local message quotedMessage quotedArgs
	message="$(hub-prtitle --as-title-and-integration-message --qualified-with-userrepo)" || return $?  # This is like hub-superpr but invoked once and then rendered into each submodule PR for efficiency.
	printf -v quotedMessage '%q' "$message"
	quotedArgs=; [ $# -eq 0 ] || printf -v quotedArgs ' %q' "$@"

	GIT_SUBDO_SUBMODULE_END="$HUB_SUPERSUBPULLREQUEST_SUBMODULE_END" \
	    hub subsamebrdo --subdo-command-name "${scriptName#hub-}" ${head:+--branch "$head"} --no-git-color --interactive --status-99-is-noop "${subdoArgs[@]}" --command "\\
		hub-existspr --base $base ${head:+--head "$head"} --print | outputAndPrintf 'Note: Submodule pull request already exists; skipping:\n' \\
		    && exit 99; \\
		logs=\"\$( \\
		    withSeparator \\
			--command 'git l ${remote}/${base}..${head} -- | markdownEscape' \\
			--command 'hub-logForPullRequest ${remote}/${base}..${head} --' \\
		)\"; \\
		hub-wrapper pull-request --base $base ${head:+--head "$head"} --message ${quotedMessage}\$'\\n\\n'\"\$logs\" --edit${quotedArgs};"
    }
fi

if ! hub-existspr --base "$base" ${head:+--head "$head"} --print | outputAndPrintf 'Note: Superproject pull request already exists; skipping:\n'; then
    message="$(withSeparator \
	--command "git l ${remote}/${base}..${head} -- | markdownEscape" \
	--command "hub-logForPullRequest ${remote}/${base}..${head} --" \
	--command "git-servername --message -- $head" \
    )" || exit $?
    hub-wrapper pull-request --draft --base "$base" ${head:+--head "$head"} --message "$message" --edit "$@" \
	|| userBinaryChoice --keep-prompt --console --question 'The superproject pull-request failed / was aborted; do you still want to continue with the submodules?' --yes-no \
	|| exit 4
fi
echo

handleSubmodules "$@"; status=$?
case $status in
    0|99)   ;;
    *)	    exit $status;;
esac

goToSuperproject
exec tempedit \
    --basename PULLREQ_EDITMSG \
    --sink-exec sed -e 1d -e '2{/^$/d}' -- {} \; \
    --sink-exec gh pr edit --body-file - \; \
    -- withSeparator \
	--command 'hub pr show -f "%t (‚Üê do not edit here)%n%n%b"' \
	--command "git l ${remote}/${base}..${head} -- | markdownEscape" \
	--command "git-subchanges ${remote}/${base}..${head} --no-color --include-pull-requests --qualified-with-userrepo --as markdown" \

