#!/bin/bash
set -o pipefail

: ${HUB_WORKFLOWSTATUS_OWNER:='{owner}'}
: ${HUB_WORKFLOWSTATUS_REPO:='{repo}'}
: ${HUB_WORKFLOWSTATUS_WAIT_INTERVAL:=20s}
: ${HUB_WORKFLOWSTATUS_WAIT_TIMEOUT:=20m}
: ${HUB_WORKFLOWSTATUS_COLOR_STATUS_COMPLETED=[37m}
: ${HUB_WORKFLOWSTATUS_COLOR_STATUS_IN_PROGRESS=[1;34m}
: ${HUB_WORKFLOWSTATUS_COLOR_STATUS_SCHEDULED=[36m}
: ${HUB_WORKFLOWSTATUS_COLOR_COMPLETED_SUCCESS=[37;42m}
: ${HUB_WORKFLOWSTATUS_COLOR_COMPLETED_CANCELLED=[37;40m}
: ${HUB_WORKFLOWSTATUS_COLOR_COMPLETED_FAILURE=[37;41m}
: ${HUB_WORKFLOWSTATUS_COLOR_RESET=[0m}
readonly WORKFLOW_ID_CONFIG_KEY=github.workflow-id

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: [HUB_WORKFLOWSTATUS_WORKFLOW_ID=WORKFLOW_ID|WORKFLOW_FILENAME] %q %s\n' "$(basename "$1")" '[--id WORKFLOW_ID|WORKFLOW_FILENAME] [-u|--user USER] [-b|--branch BRANCH|-B|--current-branch|-P|--pull-request N] [-r|--revision REVISION|-R|--current-revision] [-l|--latest] [--is STATE [--is ...] [--print-all]] [--concluded CONCLUSION [--concluded ...] [--print-all]] [--wait WHAT|-w|--wait-for-completion|-W|--wait-for-success] [-q|--quiet] [-?|-h|--help]'
    echo
    printf 'Usage: [HUB_WORKFLOWSTATUS_WORKFLOW_ID=WORKFLOW_ID|WORKFLOW_FILENAME] %q %s\n' "$(basename "$1")" '[--id WORKFLOW_ID|WORKFLOW_FILENAME] [-u|--user USER] [-b|--branch BRANCH|-B|--current-branch|-P|--pull-request N] [-r|--revision REVISION|-R|--current-revision] [-l|--latest] --browse|--url|--raw'
    echo
    printf 'Usage: [HUB_WORKFLOWSTATUS_WORKFLOW_ID=WORKFLOW_ID|WORKFLOW_FILENAME] %q %s\n' "$(basename "$1")" '--has-workflow [--id WORKFLOW_ID|WORKFLOW_FILENAME]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print / check the status of a GitHub workflow.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --id WORKFLOW_ID|WORKFLOW_FILENAME
			The ID of the workflow. You can also pass the workflow
			file name. If not specified, will use the
			${WORKFLOW_ID_CONFIG_KEY} config setting.
    --user|-u USER	Limit to workflow runs of USER.
    --branch|-b BRANCH	Limit to workflow runs associated with BRANCH.
    --current-branch|-B	Limit to workflow runs associated with the current branch.
    --pull-request|-P N	Limit to workflows associated with pull request N.
    --revision|-r REVISION
			Limit to workflow runs that build REVISION.
    --current-revision|-R
			Limit to workflow runs that build the current HEAD
			revision of the tracked remote branch.
    --latest|-l		Only print / consider the last status.
    --is STATE		Only print if one / the status is STATE; else fail.
			Can be one of: "queued", "in_progress", or "completed".
    --concluded CONCLUSION
			Only print if one / the workflow concluded with
			CONCLUSION; else fail.
			Can be one of the "success", "failure", "neutral",
			"cancelled", "skipped", "timed_out", or
			"action_required".
    --print-all		A match of STATE / CONCLUSION only determines the exit
			status but does not drop non-matching workflows from the
			output.
    --wait WHAT		Block and repeatedly check whether STATE and/or
			CONCLUSION have been reached. It's recommended to
			combine this with --latest (or at least use --quiet to
			avoid printing all statuses).
    --wait-for-completion|-w
			Block and repeatedly check whether the last workflow has
			completed. Equivalent to:
			--latest --is completed --wait 'The workflow'
    --wait-for-success|-W
			Block and repeatedly check whether the last workflow has
			completed AND concluded with success. Equivalent to:
			--latest --is completed --concluded success --wait 'The
			workflow'
    --browse		Open the URL(s) of the workflow status page(s) in a
			browser.
    --url		Only print the URL(s) of the workflow status page(s).
    --raw		Print the raw JSON response.
    --quiet|-q		Don't print the status.
    --has-workflow	Just (silently) check whether a workflow ID has been
			configured or passed.

EXIT STATUS:
    0	Complete success.
    1	--is STATE given but the STATE wasn't seen.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    126	STATE has not been reached within the wait time.
HELPTEXT
}

isColor=; [ -t 1 ] && isColor=t
isWorkflowCheck=
workflowId="${HUB_WORKFLOWSTATUS_WORKFLOW_ID}"
typeset -a queryArgs=()
parser=parseResponse
preAction=
action=list
compareAction=
typeset -a acceptedStates=()
typeset -a acceptedConclusions=()
isWait=
waitWhat=
isFiltering=t
typeset -a recursiveArgs=()
typeset -a retryArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--no-color|--color=never)
			recursiveArgs+=("$1"); isColor=; shift;;
	--color=always)	recursiveArgs+=("$1"); isColor=t; shift;;
	--color=auto)	recursiveArgs+=("$1"); shift;;
	--color)	recursiveArgs+=("$1" "$2"); case "$2" in
			    always) isColor=t;;
			    never)  isColor=;;
			    auto)   ;;
			    *)	    echo >&2 "ERROR: Invalid --color arg: $2"
				    echo >&2
				    printUsage "$0" >&2
				    exit 2
				    ;;
			esac
			shift; shift
			;;
	--has-workflow)	shift; isWorkflowCheck=t;;
	--id)		recursiveArgs+=("$1" "$2"); shift; workflowId="${1?}"; shift;;

	--user|-u)	recursiveArgs+=("$1" "$2"); shift; queryArgs+=(--field "actor=${1:?}"); shift;;
	--branch|-b)	recursiveArgs+=("$1" "$2"); shift; queryArgs+=(--field "branch=${1:?}"); shift;;
	--current-branch|-B)
			shift
			branchName="$(git-brname --real-branch-only)" || exit 2
			queryArgs+=(--field "branch=$branchName")
			recursiveArgs+=(--branch "$branchName")	# Don't repeat the lookup on each recursive invocation.
			;;
	--pull-request|-P)
			shift
			rev="$(gh pr view --json headRefOid --template '{{.headRefOid}}{{"\n"}}' "${1:?}")" || exit 2
			queryArgs+=(--field "head_sha=$rev"); shift
			recursiveArgs+=(--revision "$rev")	# Don't repeat the lookup on each recursive invocation.
			;;
	--revision|-r)	recursiveArgs+=("$1" "$2"); shift
			commitId="$(git-commitid -- "${1:?}")" || exit 2
			queryArgs+=(--field "head_sha=$commitId")
			shift
			;;
	--current-revision|-R)
			shift
			if ! tracks="$(git-tracks)"; then
			    echo >&2 'ERROR: The current branch does not track a remote branch.'
			    exit 2
			fi
			commitId="$(git-commitid -- "$tracks")" || exit 2
			if ! git-equals HEAD "$commitId"; then
			    printf >&2 'Note: The current branch is not up-to-date with the tracked remote branch:\n%s\n' "$(git ab HEAD "$commitId")"
			fi
			queryArgs+=(--field "head_sha=$commitId")
			recursiveArgs+=(--revision "$commitId")	# Don't repeat the lookup on each recursive invocation.
			;;
	--latest|-l)	recursiveArgs+=("$1"); shift; preAction='filterLatest';;
	--is)		recursiveArgs+=("$1" "$2"); shift; acceptedStates+=("${1:?}"); shift; compareAction+=${compareAction:+|}compareState;;
	--concluded)	recursiveArgs+=("$1" "$2"); shift; acceptedConclusions+=("${1:?}"); shift; compareAction+=${compareAction:+|}compareConclusion;;
	--wait)		shift; waitWhat="$1"; shift; isWait=t;;
	--wait-for-completion|-w)
			shift; set -- "$@" --latest --is completed --wait 'The workflow';;
	--wait-for-success|-W)
			shift; set -- "$@" --latest --is completed --concluded success --wait 'The workflow';;
	--print-all)	shift; isFiltering=;;
	--quiet|-q)	recursiveArgs+=("$1"); shift; action=''; retryArgs+=(--silent-command);;
	--raw)		recursiveArgs+=("$1"); shift; parser=''; action=cat;;

	--browse)	shift; action=browseUrl;;
	--url)		shift; action=printUrl;;
	--)		recursiveArgs+=("$1"); shift; break;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
if [ -z "$workflowId" ]; then
    workflowId="$(git config --get "$WORKFLOW_ID_CONFIG_KEY")"
    if [ -z "$workflowId" ]; then
	[ "$isWorkflowCheck" ] && exit 1
	echo >&2 "ERROR: No workflow specified (via --id WORKFLOW_ID|WORKFLOW_FILENAME, \$HUB_WORKFLOWSTATUS_WORKFLOW_ID, or the $WORKFLOW_ID_CONFIG_KEY configuration)."
	exit 2
    elif [ "$isWorkflowCheck" ]; then
	exit 0
    fi
fi

if [ "$isWait" ]; then
    if [ ${#acceptedStates[@]} -eq 0 -a ${#acceptedConclusions[@]} -eq 0 ]; then
	echo 'ERROR: Need --is STATE and/or --concluded CONCLUSION to wait for.'
	echo
	printUsage "$0"
	exit 2
    fi >&2

    verb="$(joinBy --omit-empty ' and ' "$(joinBy ' or ' "${acceptedStates[@]}")" "$(joinBy --prefix 'a ' ' or ' "${acceptedConclusions[@]}")")"
    RETRY_SUCCEED_VERB="got $verb" \
    RETRY_FAIL_VERB="still is not ${verb}${action:+: %OUTPUT%}" \
    RETRY_ABORT_VERB="did not become ${verb}${action:+: %OUTPUT%}" \
	retry "${retryArgs[@]}" --command-name "${waitWhat:-The workflow action}" ${action:+--verbose-or-none --verbose-output} \
	    --interval "$HUB_WORKFLOWSTATUS_WAIT_INTERVAL" --abort-timeout "$HUB_WORKFLOWSTATUS_WAIT_TIMEOUT" \
	    --alert --alert-after "$HUB_WORKFLOWSTATUS_WAIT_INTERVAL" \
	    "${BASH_SOURCE[0]}" --print-all "${recursiveArgs[@]}" "$@"
    exit $?
fi

apiCall()
{
    hub api -XGET "${queryArgs[@]}" "/repos/${HUB_WORKFLOWSTATUS_OWNER}/${HUB_WORKFLOWSTATUS_REPO}/actions/workflows/${workflowId}/runs" || exit 3
}

parseResponse()
{
    jq --raw-output '.workflow_runs | try .[] | (.run_number | tostring) + "\t" + .status + "\t" + .conclusion + "\t" + .updated_at + (if .run_attempt > 1 then "\t(" + (.run_attempt | tostring) + ")" else "\t " end) + "\t" + .html_url' \
	| sort --field-separator $'\n' --numeric-sort --key=1,1 \
	    || exit 3
}

filterLatest()
{
    tail -n 1
}

compareState()
{
    local runNumber statusValue timestamp isFound=
    while IFS=$'\t' read -r runNumber statusValue conclusionValue timestamp
    do
	if contains "$statusValue" "${acceptedStates[@]}"; then
	    isFound=t
	elif [ "$isFiltering" ]; then
	    continue
	fi
	printf '%s\t%s\t%s\t%s\n' "$runNumber" "$statusValue" "$conclusionValue" "$timestamp"
    done
    [ "$isFound" ]
}

compareConclusion()
{
    local runNumber statusValue timestamp isFound=
    while IFS=$'\t' read -r runNumber statusValue conclusionValue timestamp
    do
	if contains "$conclusionValue" "${acceptedConclusions[@]}"; then
	    isFound=t
	elif [ "$isFiltering" ]; then
	    continue
	fi
	printf '%s\t%s\t%s\t%s\n' "$runNumber" "$statusValue" "$conclusionValue" "$timestamp"
    done
    [ "$isFound" ]
}

colorize()
{
    fieldMap --field-separator $'\t' \
	-v "statusCompleted=${HUB_WORKFLOWSTATUS_COLOR_STATUS_COMPLETED//\\/\\\\}" \
	-v "statusInProgress=${HUB_WORKFLOWSTATUS_COLOR_STATUS_IN_PROGRESS//\\/\\\\}" \
	-v "statusScheduled=${HUB_WORKFLOWSTATUS_COLOR_STATUS_SCHEDULED//\\/\\\\}" \
	-v "completedSuccess=${HUB_WORKFLOWSTATUS_COLOR_COMPLETED_SUCCESS//\\/\\\\}" \
	-v "completedCancelled=${HUB_WORKFLOWSTATUS_COLOR_COMPLETED_CANCELLED//\\/\\\\}" \
	-v "completedFailure=${HUB_WORKFLOWSTATUS_COLOR_COMPLETED_FAILURE//\\/\\\\}" \
	-v "reset=${HUB_WORKFLOWSTATUS_COLOR_RESET//\\/\\\\}" \
	--function 'colorizeStatus(status) { switch (status) { case "completed": return statusCompleted; case "in_progress": return statusInProgress; case "scheduled": return statusScheduled; } }' \
	--function 'colorizeCompleted(completed) { switch (completed) { case "success": return completedSuccess; case "cancelled": return completedCancelled; case "failure": return completedFailure; } }' \
	1 'colorizeStatus($fieldNr) $fieldNr reset' \
	2 'colorizeCompleted($fieldNr) $fieldNr reset' \

}

list()
{
    field --field-separator $'\t' --remove 1 \
	| eval tac "${isColor:+| colorize}" \
	| reldate --delta-each --within all \
	| column -s $'\t' -t \
	| tac
}

printUrl()
{
    field --field-separator $'\t' -1
}

browseUrl()
{
    readarray -t urls < <(printUrl)
    [ ${#urls[@]} -gt 0 ] || exit 1
    exec git-browse "${urls[@]}"
}

eval 'apiCall "$@"' \
    "${parser:+|}$parser" \
    "${preAction:+|}$preAction" \
    "${compareAction:+|}$compareAction" \
    "${action:+|}${action:->/dev/null}"
