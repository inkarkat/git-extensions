[alias]
	; Alternative: Do this programmatically:
	; 	git config --global alias.foo 'commit -m "foobar"'

	; Note: You cannot override a built-in Git command via an alias. Cp.
	; http://stackoverflow.com/questions/3538774/is-it-possible-to-override-git-command-by-git-alias
	;
	;alias = config --get-regexp 'alias\\..*' ; List all defined aliases.
	;; alias: List all Git aliases [starting with <pattern>].
	;; aliases: List all (documented) Git aliases, command extensions, and newly defined commands [starting with <pattern>].
	; Note: If you name the shell command "git-aliasname", there's no need
	; to define an alias here; Git will automatically pick it up; in fact,
	; git-aliasname takes precedence over the alias!
	;
	;alias = !git-alias
	; The following two definitions are equivalent (the second is preferred):
	;	echoalias1 = !git-echo fixed-argument
	;	echoalias2 = echo fixed-argument
	;
	; Note: You also cannot use a shell command "git-builtin" to override
	; the "git builtin" command! To achieve that, you need a custom "git"
	; shell function that intercepts the git call.
	; To do something with individual arguments, use something like this:
	;x = "!sh -c 'echo args: \"$@\"' -"
	; But I prefer defining an external git-subcommand for this.
	;
	; Note: To define a Git alias containing a semicolon, wrap the entire alias right-hand side in double quotes.
	;; callable: Test whether a Git alias or command NAME exists.

	; Handle the common typo "git git COMMAND" through my wrapper. Note: Does not handle "git git-COMMAND".
	git = wrapper

	;; confighelp: Browse the user's gitconfig (for hints and suggestions).
	configlist = config --local --list
	configedit = config --local --edit
	;; userlocalconfig: Get and set per-user options for the entire local system. Use if the user's default config (~/.gitconfig) is shared across systems.

	;; me: Show my Git user configuration (in the context of the current repository).
	me-in-github = config --get github.user
	whoami = me --whoami
	;; set-email: Set my user's email address for the current repository.
	team = team-command --no-option-name whois	; Show the person(s) belonging to the team.

	; Stop recording the executable file mode.
	; This can be necessary when using both MSysGit and Cygwin's Git, and
	; "git diff" shows this output for every file:
	;   old mode 100755
	;   new mode 100644
	; Best set this locally only via
	;   git config core.filemode false
	;filemode = false
	config-no-filemode = config core.filemode false
	addx = add --chmod=+x	; Add files with the execute bit set (on Windows, where filemode = false).

	;; iscontrolled: Test whether the current directory / passed DIRSPEC is inside a Git working copy / the passed FILESPEC is tracked by Git (i.e. not unversioned).
	;; isnonemptyrepo: Test whether the current directory / passed DIRSPEC is a repository that has at least one commit in it. Fails if not a working copy or a just-initialized empty repo without any commits.

	;; init: Create an empty Git repository and automatically chdir into it.
	;; clone: Clone a repository into a new directory and automatically chdir into it.
	;; oclone: Clone my GitHub repo with the passed REPO-NAME (not the full <repository>).
	;; uclone: Clone a repository and name the remote repository "upstream" (commonly used for repos you don't own yourself) instead of the default "origin".

	;; system-setup: Setup system-specific Git configuration for a system.
	;; isworktree: Test whether the current working copy is a secondary worktree.
	;; isdetached: Test whether the current working copy directly refers to a particular commit as opposed to a named branch.
	;; istag: Test whether <commit> is a tag reference (or some other ref).
	;; istagged: Test whether the current commit / REVISION in the working copy / passed FILESPEC directly refers to a tagged commit.

	;; cat: Retrieve the contents of <path> as it exists in revision <ref>.
	catselected = selectedcommit-command --single-only --pass-file-args -2 cat COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits in the passed <range>.
	catselectedonemore = selectedcommit-command --single-only --pass-file-args --one-more -2 cat COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits in the passed <range> plus one more.
	cat1 = catselected --max-count 1
	cat2 = catselected --max-count 2
	cat3 = catselected --max-count 3
	cat4 = catselected --max-count 4
	cat5 = catselected --max-count 5
	cat6 = catselected --max-count 6
	cat7 = catselected --max-count 7
	catx = catselected --max-count 12
	catq = catselected --max-count 25
	catz = catselected --max-count 100
	catg = selectedgcommit-command --single-only --pass-file-args -2 cat COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	catchanged = selectedchangedcommit-command --single-only --pass-file-args -2 cat COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	cattouched = selectedtouchedcommit-command --single-only --pass-file-args -2 cat COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	;; cp: Retrieve the contents of <path> as it exists in revision <ref> and save it as <path>.<ref> (or <target> if given).
	cpselected = selectedcommit-command --single-only --pass-file-args -2 cp COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits in the passed <range> and save it as <path>.<ref> (to <target> is not supported here).
	cpselectedonemore = selectedcommit-command --single-only --pass-file-args --one-more -2 cp COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits in the passed <range> plus one more and save it as <path>.<ref> (to <target> is not supported here).
	cp1 = cpselected --max-count 1
	cp2 = cpselected --max-count 2
	cp3 = cpselected --max-count 3
	cp4 = cpselected --max-count 4
	cp5 = cpselected --max-count 5
	cp6 = cpselected --max-count 6
	cp7 = cpselected --max-count 7
	cpx = cpselected --max-count 12
	cpq = cpselected --max-count 25
	cpz = cpselected --max-count 100
	cpg = selectedgcommit-command --single-only --pass-file-args -2 cp COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits where log messages match the specified text or /regexp/ and save it as <path>.<ref> (to <target> is not supported here).
	cpchanged = selectedchangedcommit-command --single-only --pass-file-args -2 cp COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	cptouched = selectedtouchedcommit-command --single-only --pass-file-args -2 cp COMMITS	; Retrieve the contents of <path> as it exists in the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	rename = mv

	cherrypickcontinue = cherry-pick --continue	; Commit (after adding resolved conflicts) and continue with any subsequent commits to be cherry-picked.
	chpc = cherrypickcontinue
	cherrypickskip = cherry-pick --skip	; Skip the current commit and continue with the rest of the sequence.
	chps = cherrypickskip
	cherrypickquit = cherry-pick --abort	; Cancel the operation and return to the pre-sequence state.
	chpq = cherrypickquit

	;; cherrypick: Apply the changes introduced by some existing commits (cummulatively) to the index and working copy.
	chp = cherrypick
	cherrypickselected = selectedcommit-command -2 cherrypick COMMITS	; Apply the changes introduced by some existing commits interactively chosen from the commits in the passed <range> (cummulatively) to the index and working copy.
	cherrypick1 = cherrypickselected --max-count 1
	cherrypick2 = cherrypickselected --max-count 2
	cherrypick3 = cherrypickselected --max-count 3
	cherrypick4 = cherrypickselected --max-count 4
	cherrypick5 = cherrypickselected --max-count 5
	cherrypick6 = cherrypickselected --max-count 6
	cherrypick7 = cherrypickselected --max-count 7
	cherrypickx = cherrypickselected --max-count 12
	cherrypickq = cherrypickselected --max-count 25
	cherrypickz = cherrypickselected --max-count 100
	cherrypickg = selectedgcommit-command -2 cherrypick COMMITS
	cherrypickchanged = selectedchangedcommit-command -2 cherrypick COMMITS
	cherrypicktouched = selectedtouchedcommit-command -2 cherrypick COMMITS

	cherrycommit = cherrypick --commit ; Apply and immediately commit each change (individually) introduced by some existing commit(s).
	cherrycommitselected = selectedcommit-command -2 cherrycommit COMMITS	; Apply the changes introduced by some existing commits interactively chosen from the commits in the passed <range> (cummulatively) to the index and working copy.
	cherrycommit1 = cherrycommitselected --max-count 1
	cherrycommit2 = cherrycommitselected --max-count 2
	cherrycommit3 = cherrycommitselected --max-count 3
	cherrycommit4 = cherrycommitselected --max-count 4
	cherrycommit5 = cherrycommitselected --max-count 5
	cherrycommit6 = cherrycommitselected --max-count 6
	cherrycommit7 = cherrycommitselected --max-count 7
	cherrycommitx = cherrycommitselected --max-count 12
	cherrycommitq = cherrycommitselected --max-count 25
	cherrycommitz = cherrycommitselected --max-count 100
	cherrycommitg = selectedgcommit-command -2 cherrycommit COMMITS
	cherrycommitchanged = selectedchangedcommit-command -2 cherrycommit COMMITS
	cherrycommittouched = selectedtouchedcommit-command -2 cherrycommit COMMITS

	;; cherrymerge: Apply and immediately commit each change (individually), recording the existing commit id(s) in the commit message, like the merge tracking in Subversion.
	cherrymergeselected = selectedcommit-command -2 cherrymerge COMMITS	; Apply and immediately commit each change introduced by some existing commits interactively chosen from the commits in the passed <range> (individually), recording the existing commit id(s) in the commit message, like the merge tracking in Subversion.
	cherrymerge1 = cherrymergeselected --max-count 1
	cherrymerge2 = cherrymergeselected --max-count 2
	cherrymerge3 = cherrymergeselected --max-count 3
	cherrymerge4 = cherrymergeselected --max-count 4
	cherrymerge5 = cherrymergeselected --max-count 5
	cherrymerge6 = cherrymergeselected --max-count 6
	cherrymerge7 = cherrymergeselected --max-count 7
	cherrymergex = cherrymergeselected --max-count 12
	cherrymergeq = cherrymergeselected --max-count 25
	cherrymergez = cherrymergeselected --max-count 100
	cherrymergeg = selectedgcommit-command -2 cherrymerge COMMITS
	cherrymergechanged = selectedchangedcommit-command -2 cherrymerge COMMITS
	cherrymergetouched = selectedtouchedcommit-command -2 cherrymerge COMMITS

	;; unapply-index: Drop the staged changes [compared to <commit>] from the working copy; i.e. revert the changes that are in the index in the working copy.
	ui = unapply-index
	;; unapply-index-selected: Interactively select (from staged files or passed list of files) files (or directly pass N, M, ... selections) and drop the staged changes from the working copy; i.e. revert the changes that are in the index in the working copy.
	uis = unapply-index-selected
	;; checkout-committed: Revert changes [for FILE(s)] in the working copy to the latest commit, but keep any changes in the index. These can be put back into the working copy via checkout.
	coc = checkout-committed
	;; checkout-committed-selected: Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) and revert changes in the working copy to the latest commit, but keep any changes in the index. These can be put back into the working copy via checkout.
	cocs = checkout-committed-selected

	;; checkoutrevision: Revert changes [for FILE(s)] in the working copy to the (with --previous commit prior to the) passed <commit> / HEAD. Like "git checkout <commit> [-- FILE ...]" but doesn't write to the index / cause the "detached HEAD" status when no FILEs are passed. This is meant to be for temporary investigation or verifying a test failure without the committed fix, so no dirty working copy is allowed (unless forced).
	cor = checkoutrevision
	;; checkoutrevisionselected: Interactively select (from files touched in <commit> / HEAD) files (or directly pass N, M, ... selections) to be reverted to what the content in (with --previous commit prior to the) passed <commit> was.
	cors = checkoutrevisionselected
	checkoutselectedrevisionselected = selectedcommit-command --single-only -4 checkoutrevisionselected --accept-single --revision COMMITS	; Interactively select (from files touched in a commit from the commits in the passed <range>) files (or directly pass N, M, ... selections) to be reverted to what the content in <commit> was.
	corss = checkoutselectedrevisionselected
	cors1 = checkoutselectedrevisionselected --max-count 1
	cors2 = checkoutselectedrevisionselected --max-count 2
	cors3 = checkoutselectedrevisionselected --max-count 3
	cors4 = checkoutselectedrevisionselected --max-count 4
	cors5 = checkoutselectedrevisionselected --max-count 5
	cors6 = checkoutselectedrevisionselected --max-count 6
	cors7 = checkoutselectedrevisionselected --max-count 7
	corsx = checkoutselectedrevisionselected --max-count 12
	corsq = checkoutselectedrevisionselected --max-count 25
	corsz = checkoutselectedrevisionselected --max-count 100
	corsg = selectedgcommit-command --single-only -4 checkoutrevisionselected --accept-single --revision COMMITS
	corschanged = selectedchangedcommit-command --single-only -4 checkoutrevisionselected --accept-single --revision COMMITS
	corstouched = selectedtouchedcommit-command --single-only -4 checkoutrevisionselected --accept-single --revision COMMITS

	checkoutprevious = checkoutrevision --previous	; Revert changes [for FILE(s)] in the working copy to the commit prior to passed <commit> / HEAD. Like "git checkout <commit>^ [-- FILE ...]" but doesn't write to the index / cause the "detached HEAD" status when no FILEs are passed. This is meant to be for temporary investigation or verifying a test failure without the committed fix, so no dirty working copy is allowed.
	cop = checkoutprevious
	checkoutpreviousselected = checkoutrevisionselected --previous	; Interactively select (from files touched in <commit> / HEAD) files (or directly pass N, M, ... selections) to be reverted to what the content *before* <commit> was.
	cops = checkoutpreviousselected
	checkoutselectedpreviousselected = selectedcommit-command --single-only -4 checkoutpreviousselected --accept-single --revision COMMITS	; Interactively select (from files touched in a commit from the commits in the passed <range>) files (or directly pass N, M, ... selections) to be reverted to what the content *before* <commit> was.
	copss = checkoutselectedpreviousselected
	cops1 = checkoutselectedpreviousselected --max-count 1
	cops2 = checkoutselectedpreviousselected --max-count 2
	cops3 = checkoutselectedpreviousselected --max-count 3
	cops4 = checkoutselectedpreviousselected --max-count 4
	cops5 = checkoutselectedpreviousselected --max-count 5
	cops6 = checkoutselectedpreviousselected --max-count 6
	cops7 = checkoutselectedpreviousselected --max-count 7
	copsx = checkoutselectedpreviousselected --max-count 12
	copsq = checkoutselectedpreviousselected --max-count 25
	copsz = checkoutselectedpreviousselected --max-count 100
	copsg = selectedgcommit-command --single-only -4 checkoutpreviousselected --accept-single --revision COMMITS
	copschanged = selectedchangedcommit-command --single-only -4 checkoutpreviousselected --accept-single --revision COMMITS
	copstouched = selectedtouchedcommit-command --single-only -4 checkoutpreviousselected --accept-single --revision COMMITS


	revertcontinue = revert --continue	; Continue after resolving conflicts in a failed revert.
	rvc = revertcontinue
	revertskip = revert --skip	; Skip the current commit and continue with the rest of the sequence.
	rvs = revertskip
	revertquit = revert --quit	; Clear the sequencer state after a failed revert.
	rvq = revertquit
	revertabort = revert --abort	; Cancel the operation and return to the pre-sequence state.
	rva = revertabort

	;;revert: Apply the reverted changes only to the index and working copy; the index does not have to match the HEAD commit, so you can revert multiple commits in a row.
	rv = wrapper-nocolor revert
	revertcommit = wrapper-nocolor revert --commit	; Apply the reverted changes and commit.
	revertlast = wrapper-nocolor revert HEAD	; Apply the reverted last commit only to the index and working copy.
	; revertlastselected is identical to uncommitselected
	revertcommitlast = revertcommit HEAD	; Apply the reverted last commit and commit. Basically wipecommit that doesn't rewrite history and records the undo.

	; revertcommitlastselected is too special to be useful
	revertselectedcommit = selectedcommit-command -2 revert COMMITS	; Apply the reverted changes interactively chosen from the commits in the passed <range> only to the index and working copy commit.
	revert1 = revertselectedcommit --max-count 1
	revert2 = revertselectedcommit --max-count 2
	revert3 = revertselectedcommit --max-count 3
	revert4 = revertselectedcommit --max-count 4
	revert5 = revertselectedcommit --max-count 5
	revert6 = revertselectedcommit --max-count 6
	revert7 = revertselectedcommit --max-count 7
	revertx = revertselectedcommit --max-count 12
	revertq = revertselectedcommit --max-count 25
	revertz = revertselectedcommit --max-count 100
	revertg = selectedgcommit-command -2 revert COMMITS
	revertchanged = selectedchangedcommit-command -2 revert COMMITS
	reverttouched = selectedtouchedcommit-command -2 revert COMMITS

	revertselectedfiles = selectedcommit-command --single-only -3 revert --selected COMMITS	; Revert files interactively chosen from the changes interactively chosen from a commit in the passed <range> only to the index and working copy commit.
	revertfiles1 = revertselectedfiles --max-count 1
	revertfiles2 = revertselectedfiles --max-count 2
	revertfiles3 = revertselectedfiles --max-count 3
	revertfiles4 = revertselectedfiles --max-count 4
	revertfiles5 = revertselectedfiles --max-count 5
	revertfiles6 = revertselectedfiles --max-count 6
	revertfiles7 = revertselectedfiles --max-count 7
	revertfilesx = revertselectedfiles --max-count 12
	revertfilesq = revertselectedfiles --max-count 25
	revertfilesz = revertselectedfiles --max-count 100
	revertfilesg = selectedgcommit-command --single-only -3 revert --selected COMMITS
	revertfileschanged = selectedchangedcommit-command --single-only -3 revert --selected COMMITS
	revertfilestouched = selectedtouchedcommit-command --single-only -3 revert --selected COMMITS

	revertselectedhunk = selectedcommit-command --single-only -3 revert --patch COMMITS	; Revert hunks interactively chosen from the changes interactively chosen from a commit in the passed <range> only to the index and working copy commit.
	reverthunk1 = revertselectedhunk --max-count 1
	reverthunk2 = revertselectedhunk --max-count 2
	reverthunk3 = revertselectedhunk --max-count 3
	reverthunk4 = revertselectedhunk --max-count 4
	reverthunk5 = revertselectedhunk --max-count 5
	reverthunk6 = revertselectedhunk --max-count 6
	reverthunk7 = revertselectedhunk --max-count 7
	reverthunkx = revertselectedhunk --max-count 12
	reverthunkq = revertselectedhunk --max-count 25
	reverthunkz = revertselectedhunk --max-count 100
	reverthunkg = selectedgcommit-command --single-only -3 revert --patch COMMITS
	reverthunkchanged = selectedchangedcommit-command --single-only -3 revert --patch COMMITS
	reverthunktouched = selectedtouchedcommit-command --single-only -3 revert --patch COMMITS

	revertcommitselected = selectedcommit-command -2 revertcommit COMMITS	; Apply the reverted changes interactively chosen from the commits in the passed <range> and commit.
	revertcommit1 = revertcommitselected --max-count 1
	revertcommit2 = revertcommitselected --max-count 2
	revertcommit3 = revertcommitselected --max-count 3
	revertcommit4 = revertcommitselected --max-count 4
	revertcommit5 = revertcommitselected --max-count 5
	revertcommit6 = revertcommitselected --max-count 6
	revertcommit7 = revertcommitselected --max-count 7
	revertcommitx = revertcommitselected --max-count 12
	revertcommitq = revertcommitselected --max-count 25
	revertcommitz = revertcommitselected --max-count 100
	revertcommitg = selectedgcommit-command -2 revertcommit COMMITS
	revertcommitchanged = selectedchangedcommit-command -2 revertcommit COMMITS
	revertcommittouched = selectedtouchedcommit-command -2 revertcommit COMMITS

	; No revertcommitselected{files,hunk} because I can use the revertselected{files,hunk} and then commit separately.


	;; add: Add and show status; --all/-A stages all, . stages new and modified, without deleted, -u stages modified and deleted, without new.
	;; addn: Add all modified and deleted files except those matching FILE(s) or the escaped GLOB(s). Like addu, but with inverted meaning of the file arguments.
	addns = selected-command addn	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to add all modified and deleted files except those selected by number.
	addns1 = addns 1
	addns2 = addns 2
	addns3 = addns 3
	addns4 = addns 4
	addns5 = addns 5
	addns6 = addns 6
	addns7 = addns 7
	addnsx = addns 12
	addnsq = addns 25
	addnsz = addns 100
	;; addu: Stage modified and deleted, without new files, and show status.
	addhunk = add --patch	; Interactively pick and add individual hunks changed in the working copy to the index.
	addh = addhunk
	addedit = add --edit	; Interactively choose lines to stage by directly editing the diff.
	;; addempty: Add empty DIR(s).
	;; adddeleted: Add manually deleted (or moved) files to the index.
	;; addi: Add unstaged changes from already staged files; update stage.
	;; addlike: Add the same files (inside <path>) as were modified in the last commit / N'th commit / passed <commit> to the index.
	; addlast is built into addlike (with no arguments).
	addlikeselected = selectedcommit-command --single-only -2 addlike COMMITS
	addlike1 = addlikeselected --max-count 1
	addlike2 = addlikeselected --max-count 2
	addlike3 = addlikeselected --max-count 3
	addlike4 = addlikeselected --max-count 4
	addlike5 = addlikeselected --max-count 5
	addlike6 = addlikeselected --max-count 6
	addlike7 = addlikeselected --max-count 7
	addlikex = addlikeselected --max-count 12
	addlikeq = addlikeselected --max-count 25
	addlikez = addlikeselected --max-count 100
	addlikeg = selectedgcommit-command --single-only -2 addlike COMMITS
	addlikechanged = selectedchangedcommit-command --single-only -2 addlike COMMITS
	addliketouched = selectedtouchedcommit-command --single-only -2 addlike COMMITS
	;; addr: Add from root (i.e. all in working copy, not just everything inside CWD); defaults to modified and deleted, without new.
	;; adduntracked: Add only new files, respecting the ignore patterns.
	addun = adduntracked
	;; adduu: Stage modified and deleted, and add new files, respecting the ignore patterns. Combination of git addu && git adduntracked.
	;; addselected: Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to stage by number.
	adds = addselected
	adds1 = adds 1
	adds2 = adds 2
	adds3 = adds 3
	adds4 = adds 4
	adds5 = adds 5
	adds6 = adds 6
	adds7 = adds 7
	addsx = adds 12
	addsq = adds 25
	addsz = adds 100
	addselectedhunk = addselected --patch
	addsh = addselectedhunk
	addsh1 = addsh 1
	addsh2 = addsh 2
	addsh3 = addsh 3
	addsh4 = addsh 4
	addsh5 = addsh 5
	addsh6 = addsh 6
	addsh7 = addsh 7
	addshx = addsh 12
	addshq = addsh 25
	addshz = addsh 100
	addselectededit = addselected --edit
	addse = addselectededit
	addse1 = addse 1
	addse2 = addse 2
	addse3 = addse 3
	addse4 = addse 4
	addse5 = addse 5
	addse6 = addse 6
	addse7 = addse 7
	addsex = addse 12
	addseq = addse 25
	addsez = addse 100
	;; addselecteduntracked: Interactively select (from new files, respecting the ignore patterns, or passed list of files) files (or directly pass N, M, ... selections) to stage by number.
	addsun = addselecteduntracked
	addsun1 = addsun 1
	addsun2 = addsun 2
	addsun3 = addsun 3
	addsun4 = addsun 4
	addsun5 = addsun 5
	addsun6 = addsun 6
	addsun7 = addsun 7
	addsunx = addsun 12
	addsunq = addsun 25
	addsunz = addsun 100

	remove = rm --cached	; Remove file(s) from version control, keeping the file for me, but deleting it for anyone else when they pull.
	;; remove-ignored: Remove file(s) from version control that are now gitignored.
	;; remove-and-ignore: Remove path(s) from version control and add them to gitignore.

	;; touch: Create the passed FILE(s) and add them to the index, to record (and not forget) the intention of adding them to the repository.

	;; commituntracked: Commit only new files, respecting the ignore patterns.
	cun = commituntracked
	cunn = commituntracked --no-edit
	commitselected = selected-command commit	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to commit by number.
	commitg = selectedg-command commit
	cs = commitselected
	cs1 = cs 1
	cs2 = cs 2
	cs3 = cs 3
	cs4 = cs 4
	cs5 = cs 5
	cs6 = cs 6
	cs7 = cs 7
	csx = cs 12
	csq = cs 25
	csz = cs 100

	c = wrapper-nocolor commit
	ca = commita
	;; commita: Commit all new files.
	cu = wrapper-nocolor commit --all	; Commit all modified and deleted files, without new.
	commitu = wrapper-nocolor commit --all	; Commit all modified and deleted files, without new.
	;; cuu: Commit modified and deleted, and add new files, respecting the ignore patterns. Combination of git adduu && git commit.
	;; testcommit: Do a test commit by appending MESSAGE to FILE and committing with MESSAGE(s).
	;; wipcommit: Do a quick commit with a short MESSAGE and WIP: keyword. / Do an incomplete commit with synthesized message and FIXME: keyword (that should be reworded, rebased, or squashed before the merge).
	;; commitwithdiff: Commit with the commit message seeded with the diff additions of the whole commit / passed FILE(s).
	;; commitwithdiffselected: Interactively select (from staged files or those filtered by passed list of files) files (or directly pass N, M, ... selections) to seed the commit message with their diff additions.
	;; commitpush: Commit and push [to REMOTE].
	;; commitaddemptyfirst: Insert a completely empty commit as the new initial root commit (to retroactively start with a clean slate, or to rebase and split the first commit).

	;; trailer-aliases: List all commit trailer aliases defined in the Git configuration.
	;; trailer-keys: git config list | sed -n -e 's/^trailer\.\(.*\)\.key=.*$/\1/p'

	;; correct: Commit as a correction of passed revision(s) [from the working copy that FILE or DIR resides in] (when it's too late or cumbersome to fixup the existing commit). This just adds a reference to the prior commit(s) in the commit message (title and body).
	correctlast = selectedpermanentcommit-command --accept-single --single-only --pass-file-args --allow-outside-workingcopy -2 correct COMMITS --max-count 1	; Commit as a correction of the last commit (of FILE; if you omit that the HEAD commit would be referenced, and you could just amend there).
	correctselected = selectedpermanentcommit-command --pass-file-args --allow-outside-workingcopy -2 correct COMMITS	; Commit as a correction of the commit(s) interactively chosen from the commits in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	correct1 = correctselected --max-count 1
	correct2 = correctselected --max-count 2
	correct3 = correctselected --max-count 3
	correct4 = correctselected --max-count 4
	correct5 = correctselected --max-count 5
	correct6 = correctselected --max-count 6
	correct7 = correctselected --max-count 7
	correctx = correctselected --max-count 12
	correctq = correctselected --max-count 25
	correctz = correctselected --max-count 100
	correctg = selectedgcommit-command -2 correct COMMITS	; Commit as a correction of the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	correctchanged = selectedchangedcommit-command -2 correct COMMITS	; Commit as a correction of the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	correcttouched = selectedtouchedcommit-command -2 correct COMMITS	; Commit as a correction of the commit interactively chosen from the commits where log messages match the specified text or /regexp/.

	correctst = stfiles-command selectedpermanentcommit-command -2 correct COMMITS	; Commit as a correction of the commit(s) interactively chosen from the commits of currently modified files in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	correctlastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 correct COMMITS --max-count 1	; Commit as a correction of the last commit of currently modified files (when it's too late or cumbersome to fixup the existing commit).
	correctst1 = correctst --max-count 1
	correctst2 = correctst --max-count 2
	correctst3 = correctst --max-count 3
	correctst4 = correctst --max-count 4
	correctst5 = correctst --max-count 5
	correctst6 = correctst --max-count 6
	correctst7 = correctst --max-count 7
	correctstx = correctst --max-count 12
	correctstq = correctst --max-count 25
	correctstz = correctst --max-count 100
	correctadst = selectedannotatediffcommit-command HEAD -2 correct COMMITS	; Commit as a correction of the commit(s) interactively chosen from the commits affected by lines that have been changed in currently modified files.

	correcti = stifiles-command selectedpermanentcommit-command -2 correct COMMITS	; Commit as a correction of the commit(s) interactively chosen from the commits of currently staged files in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	correctlasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 correct COMMITS --max-count 1	; Commit as a correction of the last commit of currently staged files (when it's too late or cumbersome to fixup the existing commit).
	correcti1 = correcti --max-count 1
	correcti2 = correcti --max-count 2
	correcti3 = correcti --max-count 3
	correcti4 = correcti --max-count 4
	correcti5 = correcti --max-count 5
	correcti6 = correcti --max-count 6
	correcti7 = correcti --max-count 7
	correctix = correcti --max-count 12
	correctiq = correcti --max-count 25
	correctiz = correcti --max-count 100
	correctadi = selectedannotatediffcommit-command --cached -2 correct COMMITS	; Commit as a correction of the commit(s) interactively chosen from the commits affected by lines that have been changed in currently staged files.

	correct-i = stIfiles-command selectedpermanentcommit-command -2 correct COMMITS	; Commit as a correction of the commit(s) interactively chosen from the commits of currently modified but not staged files in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	correctlast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 correct COMMITS --max-count 1	; Commit as a correction of the last commit of currently modified but not staged files (when it's too late or cumbersome to fixup the existing commit).
	correct-i1 = correct-i --max-count 1
	correct-i2 = correct-i --max-count 2
	correct-i3 = correct-i --max-count 3
	correct-i4 = correct-i --max-count 4
	correct-i5 = correct-i --max-count 5
	correct-i6 = correct-i --max-count 6
	correct-i7 = correct-i --max-count 7
	correct-ix = correct-i --max-count 12
	correct-iq = correct-i --max-count 25
	correct-iz = correct-i --max-count 100
	correctad-i = selectedannotatediffcommit-command -2 correct COMMITS	; Commit as a correction of the commit(s) interactively chosen from the commits affected by lines that have been changed in currently modified but not staged files.


	revertcorrect = wrapper-nocolor revert --correct	; Revert changes in <commit>(s) as a (single) correction of the original <commit>(s) (when it's too late or cumbersome to fixup the existing commit). This adds a reference to the prior commit(s) in the commit message instead of alluding to the revert.
	revertcorrectlast = selectedpermanentcommit-command --accept-single --single-only --pass-file-args --allow-outside-workingcopy -2 revertcorrect COMMITS --max-count 1	; Revert changes in the last commit as a correction of the last commit.
	revertcorrectselected = selectedpermanentcommit-command --pass-file-args --allow-outside-workingcopy -2 revertcorrect COMMITS	; Revert changes of the commit(s) interactively chosen from the commits in the passed <range> as a correction (when it's too late or cumbersome to fixup the existing commit).
	revertcorrect1 = revertcorrectselected --max-count 1
	revertcorrect2 = revertcorrectselected --max-count 2
	revertcorrect3 = revertcorrectselected --max-count 3
	revertcorrect4 = revertcorrectselected --max-count 4
	revertcorrect5 = revertcorrectselected --max-count 5
	revertcorrect6 = revertcorrectselected --max-count 6
	revertcorrect7 = revertcorrectselected --max-count 7
	revertcorrectx = revertcorrectselected --max-count 12
	revertcorrectq = revertcorrectselected --max-count 25
	revertcorrectz = revertcorrectselected --max-count 100
	revertcorrectg = selectedgcommit-command -2 revertcorrect COMMITS	; Revert changes of the commit interactively chosen from the commits where log messages match the specified text or /regexp/ as a correction.
	revertcorrectchanged = selectedchangedcommit-command -2 revertcorrect COMMITS	; Revert changes of the commit interactively chosen from the commits where log messages match the specified text or /regexp/ as a correction.
	revertcorrecttouched = selectedtouchedcommit-command -2 revertcorrect COMMITS	; Revert changes of the commit interactively chosen from the commits where log messages match the specified text or /regexp/ as a correction.


	;; correcttostash: Stash as a correction of passed revision(s) [from the working copy that FILE or DIR resides in].
	correcttostashlast = selectedpermanentcommit-command --accept-single --single-only --pass-file-args --allow-outside-workingcopy -2 correcttostash COMMITS --max-count 1	; Stash as a correction of the last commit (of FILE).
	correcttostashselected = selectedpermanentcommit-command --pass-file-args --allow-outside-workingcopy -2 correcttostash COMMITS	; Stash as a correction of the commit(s) interactively chosen from the commits in the passed <range>.
	correcttostash1 = correcttostashselected --max-count 1
	correcttostash2 = correcttostashselected --max-count 2
	correcttostash3 = correcttostashselected --max-count 3
	correcttostash4 = correcttostashselected --max-count 4
	correcttostash5 = correcttostashselected --max-count 5
	correcttostash6 = correcttostashselected --max-count 6
	correcttostash7 = correcttostashselected --max-count 7
	correcttostashx = correcttostashselected --max-count 12
	correcttostashq = correcttostashselected --max-count 25
	correcttostashz = correcttostashselected --max-count 100
	correcttostashg = selectedgcommit-command -2 correcttostash COMMITS	; Stash as a correction of the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	correcttostashchanged = selectedchangedcommit-command -2 correcttostash COMMITS	; Stash as a correction of the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	correcttostashtouched = selectedtouchedcommit-command -2 correcttostash COMMITS	; Stash as a correction of the commit interactively chosen from the commits where log messages match the specified text or /regexp/.

	correcttostashst = stfiles-command selectedpermanentcommit-command -2 correcttostash COMMITS	; Stash as a correction of the commit(s) interactively chosen from the commits of currently modified files in the passed <range>.
	correcttostashlastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 correcttostash COMMITS --max-count 1	; Stash as a correction of the last commit of currently modified files.
	correcttostashst1 = correcttostashst --max-count 1
	correcttostashst2 = correcttostashst --max-count 2
	correcttostashst3 = correcttostashst --max-count 3
	correcttostashst4 = correcttostashst --max-count 4
	correcttostashst5 = correcttostashst --max-count 5
	correcttostashst6 = correcttostashst --max-count 6
	correcttostashst7 = correcttostashst --max-count 7
	correcttostashstx = correcttostashst --max-count 12
	correcttostashstq = correcttostashst --max-count 25
	correcttostashstz = correcttostashst --max-count 100
	correcttostashadst = selectedannotatediffcommit-command HEAD -2 correcttostash COMMITS	; Stash as a correction of the commit(s) interactively chosen from the commits affected by lines that have been changed in currently modified files.

	correcttostashi = stifiles-command selectedpermanentcommit-command -3 correcttostash --staged COMMITS	; Stash only index as a correction of the commit(s) interactively chosen from the commits of currently staged files in the passed <range>.
	correcttostashlasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -3 correcttostash --staged COMMITS --max-count 1	; Stash only index as a correction of the last commit of currently staged files.
	correcttostashi1 = correcttostashi --max-count 1
	correcttostashi2 = correcttostashi --max-count 2
	correcttostashi3 = correcttostashi --max-count 3
	correcttostashi4 = correcttostashi --max-count 4
	correcttostashi5 = correcttostashi --max-count 5
	correcttostashi6 = correcttostashi --max-count 6
	correcttostashi7 = correcttostashi --max-count 7
	correcttostashix = correcttostashi --max-count 12
	correcttostashiq = correcttostashi --max-count 25
	correcttostashiz = correcttostashi --max-count 100
	correcttostashadi = selectedannotatediffcommit-command --cached -3 correcttostash --staged COMMITS	; Stash only index as a correction of the commit(s) interactively chosen from the commits affected by lines that have been changed in currently staged files.

	correcttostashst = stIfiles-command selectedpermanentcommit-command -3 correcttostash --keep-index COMMITS	; Stash (index and unstaged) and keep changes in index staged as a correction of the commit(s) interactively chosen from the commits of currently modified but not staged files in the passed <range>.
	correcttostashlastst = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -3 correcttostash --keep-index COMMITS --max-count 1	; Stash (index and unstaged) and keep changes in index staged as a correction of the last commit of currently modified but not staged files.
	correcttostashst1 = correcttostashst --max-count 1
	correcttostashst2 = correcttostashst --max-count 2
	correcttostashst3 = correcttostashst --max-count 3
	correcttostashst4 = correcttostashst --max-count 4
	correcttostashst5 = correcttostashst --max-count 5
	correcttostashst6 = correcttostashst --max-count 6
	correcttostashst7 = correcttostashst --max-count 7
	correcttostashstx = correcttostashst --max-count 12
	correcttostashstq = correcttostashst --max-count 25
	correcttostashstz = correcttostashst --max-count 100
	correcttostashadst = selectedannotatediffcommit-command -3 correcttostash --keep-index COMMITS	; Stash (index and unstaged) and keep changes in index staged as a correction of the commit(s) interactively chosen from the commits affected by lines that have been changed in currently modified but not staged files.

	;; fixup: Commit with the intent of squashing this with the passed revision via interactive rebase later (now with --rebase).
	fixuplast = selectedpermanentcommit-command --accept-single --single-only -2 fixup COMMITS --max-count 1	; Commit with the intent of squashing this with the last commit (of FILE; if you omit that the HEAD commit would be referenced, and you could just amend there).
	fixupselected = selectedpermanentcommit-command --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits in the passed <range> via interactive rebase later.
	fixup1 = fixupselected --max-count 1
	fixup2 = fixupselected --max-count 2
	fixup3 = fixupselected --max-count 3
	fixup4 = fixupselected --max-count 4
	fixup5 = fixupselected --max-count 5
	fixup6 = fixupselected --max-count 6
	fixup7 = fixupselected --max-count 7
	fixupx = fixupselected --max-count 12
	fixupq = fixupselected --max-count 25
	fixupz = fixupselected --max-count 100
	fixupg = selectedgcommit-command --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	fixupchanged = selectedchangedcommit-command --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	fixuptouched = selectedtouchedcommit-command --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits where log messages match the specified text or /regexp/.

	fixupst = stfiles-command selectedpermanentcommit-command --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits of currently modified files in the passed <range> via interactive rebase later.
	fixuplastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixup COMMITS --max-count 1	; Commit with the intent of squashing this with the last commit of the currently modified files via interactive rebase later.
	fixupst1 = fixupst --max-count 1
	fixupst2 = fixupst --max-count 2
	fixupst3 = fixupst --max-count 3
	fixupst4 = fixupst --max-count 4
	fixupst5 = fixupst --max-count 5
	fixupst6 = fixupst --max-count 6
	fixupst7 = fixupst --max-count 7
	fixupstx = fixupst --max-count 12
	fixupstq = fixupst --max-count 25
	fixupstz = fixupst --max-count 100
	fixupadst = selectedannotatediffcommit-command HEAD --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits affected by lines that have been changed in currently modified files.

	fixupi = stifiles-command selectedpermanentcommit-command --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits of currently staged files in the passed <range> via interactive rebase later.
	fixuplasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixup COMMITS --max-count 1	; Commit with the intent of squashing this with the last commit of the currently staged files via interactive rebase later.
	fixupi1 = fixupi --max-count 1
	fixupi2 = fixupi --max-count 2
	fixupi3 = fixupi --max-count 3
	fixupi4 = fixupi --max-count 4
	fixupi5 = fixupi --max-count 5
	fixupi6 = fixupi --max-count 6
	fixupi7 = fixupi --max-count 7
	fixupix = fixupi --max-count 12
	fixupiq = fixupi --max-count 25
	fixupiz = fixupi --max-count 100
	fixupadi = selectedannotatediffcommit-command --cached --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits affected by lines that have been changed in currently staged files.

	fixup-i = stIfiles-command selectedpermanentcommit-command --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits of currently modified but not staged files in the passed <range> via interactive rebase later.
	fixuplast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixup COMMITS --max-count 1	; Commit with the intent of squashing this with the last commit of the currently modified but not staged files via interactive rebase later.
	fixup-i1 = fixup-i --max-count 1
	fixup-i2 = fixup-i --max-count 2
	fixup-i3 = fixup-i --max-count 3
	fixup-i4 = fixup-i --max-count 4
	fixup-i5 = fixup-i --max-count 5
	fixup-i6 = fixup-i --max-count 6
	fixup-i7 = fixup-i --max-count 7
	fixup-ix = fixup-i --max-count 12
	fixup-iq = fixup-i --max-count 25
	fixup-iz = fixup-i --max-count 100
	fixupad-i = selectedannotatediffcommit-command --single-only -2 fixup COMMITS	; Commit with the intent of squashing this with the commit interactively chosen from the commits affected by lines that have been changed in currently modified but not staged files.


	revertfixup = wrapper-nocolor revert --fixup	; Revert changes in <commit>(s) with the intent of squashing this with the original <commit> via interactive rebase later.
	revertfixuplast = selectedpermanentcommit-command --accept-single -2 revertfixup COMMITS --max-count 1	; Revert changes in the last commit with the intent of squashing this with the last commit later.
	revertfixupselected = selectedpermanentcommit-command -2 revertfixup COMMITS	; Revert changes of the commit(s) interactively chosen from the commits in the passed <range> with the intent of squashing this via interactive rebase later.
	revertfixup1 = revertfixupselected --max-count 1
	revertfixup2 = revertfixupselected --max-count 2
	revertfixup3 = revertfixupselected --max-count 3
	revertfixup4 = revertfixupselected --max-count 4
	revertfixup5 = revertfixupselected --max-count 5
	revertfixup6 = revertfixupselected --max-count 6
	revertfixup7 = revertfixupselected --max-count 7
	revertfixupx = revertfixupselected --max-count 12
	revertfixupq = revertfixupselected --max-count 25
	revertfixupz = revertfixupselected --max-count 100
	revertfixupg = selectedgcommit-command -2 revertfixup COMMITS	; Revert changes of the commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/ with the intent of squashing this via interactive rebase later.
	revertfixupchanged = selectedchangedcommit-command -2 revertfixup COMMITS	; Revert changes of the commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/ with the intent of squashing this via interactive rebase later.
	revertfixuptouched = selectedtouchedcommit-command -2 revertfixup COMMITS	; Revert changes of the commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/ with the intent of squashing this via interactive rebase later.


	fixamend = fixup --amend	; Commit with the intent of squashing this with the passed revision and overwriting the original commit message via interactive rebase later. Note: Keep the summary line 1 as-is; line 3 is the new summary and the commit message starts in line 5.
	fixamendlast = selectedpermanentcommit-command --accept-single --single-only -2 fixamend COMMITS --max-count 1	; Commit with the intent of squashing this with the last commit (of FILE; if you omit that the HEAD commit would be referenced, and you could just amend there) and overwriting the original commit message via interactive rebase later.
	fixamendselected = selectedpermanentcommit-command --single-only -2 fixamend COMMITS
	fixamend1 = fixamendselected --max-count 1
	fixamend2 = fixamendselected --max-count 2
	fixamend3 = fixamendselected --max-count 3
	fixamend4 = fixamendselected --max-count 4
	fixamend5 = fixamendselected --max-count 5
	fixamend6 = fixamendselected --max-count 6
	fixamend7 = fixamendselected --max-count 7
	fixamendx = fixamendselected --max-count 12
	fixamendq = fixamendselected --max-count 25
	fixamendz = fixamendselected --max-count 100
	fixamendg = selectedgcommit-command --single-only -2 fixamend COMMITS
	fixamendchanged = selectedchangedcommit-command --single-only -2 fixamend COMMITS
	fixamendtouched = selectedtouchedcommit-command --single-only -2 fixamend COMMITS

	fixamendst = stfiles-command selectedpermanentcommit-command --single-only -2 fixamend COMMITS
	fixamendlastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixamend COMMITS --max-count 1
	fixamendst1 = fixamendst --max-count 1
	fixamendst2 = fixamendst --max-count 2
	fixamendst3 = fixamendst --max-count 3
	fixamendst4 = fixamendst --max-count 4
	fixamendst5 = fixamendst --max-count 5
	fixamendst6 = fixamendst --max-count 6
	fixamendst7 = fixamendst --max-count 7
	fixamendstx = fixamendst --max-count 12
	fixamendstq = fixamendst --max-count 25
	fixamendstz = fixamendst --max-count 100
	fixamendadst = selectedannotatediffcommit-command HEAD --single-only -2 fixamend COMMITS

	fixamendi = stifiles-command selectedpermanentcommit-command --single-only -2 fixamend COMMITS
	fixamendlasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixamend COMMITS --max-count 1
	fixamendi1 = fixamendi --max-count 1
	fixamendi2 = fixamendi --max-count 2
	fixamendi3 = fixamendi --max-count 3
	fixamendi4 = fixamendi --max-count 4
	fixamendi5 = fixamendi --max-count 5
	fixamendi6 = fixamendi --max-count 6
	fixamendi7 = fixamendi --max-count 7
	fixamendix = fixamendi --max-count 12
	fixamendiq = fixamendi --max-count 25
	fixamendiz = fixamendi --max-count 100
	fixamendadi = selectedannotatediffcommit-command --cached --single-only -2 fixamend COMMITS

	fixamend-i = stIfiles-command selectedpermanentcommit-command --single-only -2 fixamend COMMITS
	fixamendlast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixamend COMMITS --max-count 1
	fixamend-i1 = fixamend-i --max-count 1
	fixamend-i2 = fixamend-i --max-count 2
	fixamend-i3 = fixamend-i --max-count 3
	fixamend-i4 = fixamend-i --max-count 4
	fixamend-i5 = fixamend-i --max-count 5
	fixamend-i6 = fixamend-i --max-count 6
	fixamend-i7 = fixamend-i --max-count 7
	fixamend-ix = fixamend-i --max-count 12
	fixamend-iq = fixamend-i --max-count 25
	fixamend-iz = fixamend-i --max-count 100
	fixamendad-i = selectedannotatediffcommit-command --single-only -2 fixamend COMMITS


	fixwording = fixup --reword	; Commit with the intent of squashing this with the passed revision and just rewording the original commit message (no changes!) via interactive rebase later. Note: Keep the summary line 1 as-is; line 3 is the new summary and the commit message starts in line 5.
	fixwordinglast = selectedpermanentcommit-command --accept-single --single-only -2 fixwording COMMITS --max-count 1	; Commit with the intent of squashing this with the last commit (of FILE; if you omit that the HEAD commit would be referenced, and you could just amend there) and just rewording the original commit message (no changes!) via interactive rebase later.
	fixwordingselected = selectedpermanentcommit-command --single-only -2 fixwording COMMITS
	fixwording1 = fixwordingselected --max-count 1
	fixwording2 = fixwordingselected --max-count 2
	fixwording3 = fixwordingselected --max-count 3
	fixwording4 = fixwordingselected --max-count 4
	fixwording5 = fixwordingselected --max-count 5
	fixwording6 = fixwordingselected --max-count 6
	fixwording7 = fixwordingselected --max-count 7
	fixwordingx = fixwordingselected --max-count 12
	fixwordingq = fixwordingselected --max-count 25
	fixwordingz = fixwordingselected --max-count 100
	fixwordingg = selectedgcommit-command --single-only -2 fixwording COMMITS
	fixwordingchanged = selectedchangedcommit-command --single-only -2 fixwording COMMITS
	fixwordingtouched = selectedtouchedcommit-command --single-only -2 fixwording COMMITS

	fixwordingst = stfiles-command selectedpermanentcommit-command --single-only -2 fixwording COMMITS
	fixwordinglastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixwording COMMITS --max-count 1
	fixwordingst1 = fixwordingst --max-count 1
	fixwordingst2 = fixwordingst --max-count 2
	fixwordingst3 = fixwordingst --max-count 3
	fixwordingst4 = fixwordingst --max-count 4
	fixwordingst5 = fixwordingst --max-count 5
	fixwordingst6 = fixwordingst --max-count 6
	fixwordingst7 = fixwordingst --max-count 7
	fixwordingstx = fixwordingst --max-count 12
	fixwordingstq = fixwordingst --max-count 25
	fixwordingstz = fixwordingst --max-count 100
	fixwordingadst = selectedannotatediffcommit-command HEAD --single-only -2 fixwording COMMITS

	fixwordingi = stifiles-command selectedpermanentcommit-command --single-only -2 fixwording COMMITS
	fixwordinglasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixwording COMMITS --max-count 1
	fixwordingi1 = fixwordingi --max-count 1
	fixwordingi2 = fixwordingi --max-count 2
	fixwordingi3 = fixwordingi --max-count 3
	fixwordingi4 = fixwordingi --max-count 4
	fixwordingi5 = fixwordingi --max-count 5
	fixwordingi6 = fixwordingi --max-count 6
	fixwordingi7 = fixwordingi --max-count 7
	fixwordingix = fixwordingi --max-count 12
	fixwordingiq = fixwordingi --max-count 25
	fixwordingiz = fixwordingi --max-count 100
	fixwordingadi = selectedannotatediffcommit-command --cached --single-only -2 fixwording COMMITS

	fixwording-i = stIfiles-command selectedpermanentcommit-command --single-only -2 fixwording COMMITS
	fixwordinglast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixwording COMMITS --max-count 1
	fixwording-i1 = fixwording-i --max-count 1
	fixwording-i2 = fixwording-i --max-count 2
	fixwording-i3 = fixwording-i --max-count 3
	fixwording-i4 = fixwording-i --max-count 4
	fixwording-i5 = fixwording-i --max-count 5
	fixwording-i6 = fixwording-i --max-count 6
	fixwording-i7 = fixwording-i --max-count 7
	fixwording-ix = fixwording-i --max-count 12
	fixwording-iq = fixwording-i --max-count 25
	fixwording-iz = fixwording-i --max-count 100
	fixwordingad-i = selectedannotatediffcommit-command --single-only -2 fixwording COMMITS


	fixuprb = fixup --rebase	; Commit and squash with the passed revision via interactive rebase.
	fixuprblast = selectedpermanentcommit-command --accept-single --single-only -2 fixuprb COMMITS --max-count 1	; Commit and squash with the last commit (of FILE; if you omit that the HEAD commit would be referenced, and you could just amend there).
	fixupselectedrb = selectedpermanentcommit-command --single-only -2 fixuprb COMMITS	; Commit and squash with the commit interactively chosen from the commits in the passed <range> via interactive rebase.
	fixuprb1 = fixupselectedrb --max-count 1
	fixuprb2 = fixupselectedrb --max-count 2
	fixuprb3 = fixupselectedrb --max-count 3
	fixuprb4 = fixupselectedrb --max-count 4
	fixuprb5 = fixupselectedrb --max-count 5
	fixuprb6 = fixupselectedrb --max-count 6
	fixuprb7 = fixupselectedrb --max-count 7
	fixuprbx = fixupselectedrb --max-count 12
	fixuprbq = fixupselectedrb --max-count 25
	fixuprbz = fixupselectedrb --max-count 100
	fixuprbg = selectedgcommit-command --single-only -2 fixuprb COMMITS	; Commit and squash with the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	fixuprbchanged = selectedchangedcommit-command --single-only -2 fixuprb COMMITS	; Commit and squash with the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	fixuprbtouched = selectedtouchedcommit-command --single-only -2 fixuprb COMMITS	; Commit and squash with the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	fixuprbst = stfiles-command selectedpermanentcommit-command --single-only -2 fixuprb COMMITS
	fixuprblastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixuprb COMMITS --max-count 1
	fixuprbst1 = fixuprbst --max-count 1
	fixuprbst2 = fixuprbst --max-count 2
	fixuprbst3 = fixuprbst --max-count 3
	fixuprbst4 = fixuprbst --max-count 4
	fixuprbst5 = fixuprbst --max-count 5
	fixuprbst6 = fixuprbst --max-count 6
	fixuprbst7 = fixuprbst --max-count 7
	fixuprbstx = fixuprbst --max-count 12
	fixuprbstq = fixuprbst --max-count 25
	fixuprbstz = fixuprbst --max-count 100
	fixuprbadst = selectedannotatediffcommit-command HEAD --single-only -2 fixuprb COMMITS

	fixuprbi = stifiles-command selectedpermanentcommit-command --single-only -2 fixuprb COMMITS
	fixuprblasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixuprb COMMITS --max-count 1
	fixuprbi1 = fixuprbi --max-count 1
	fixuprbi2 = fixuprbi --max-count 2
	fixuprbi3 = fixuprbi --max-count 3
	fixuprbi4 = fixuprbi --max-count 4
	fixuprbi5 = fixuprbi --max-count 5
	fixuprbi6 = fixuprbi --max-count 6
	fixuprbi7 = fixuprbi --max-count 7
	fixuprbix = fixuprbi --max-count 12
	fixuprbiq = fixuprbi --max-count 25
	fixuprbiz = fixuprbi --max-count 100
	fixuprbadi = selectedannotatediffcommit-command --cached --single-only -2 fixuprb COMMITS

	fixuprb-i = stIfiles-command selectedpermanentcommit-command --single-only -2 fixuprb COMMITS
	fixuprblast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixuprb COMMITS --max-count 1
	fixuprb-i1 = fixuprb-i --max-count 1
	fixuprb-i2 = fixuprb-i --max-count 2
	fixuprb-i3 = fixuprb-i --max-count 3
	fixuprb-i4 = fixuprb-i --max-count 4
	fixuprb-i5 = fixuprb-i --max-count 5
	fixuprb-i6 = fixuprb-i --max-count 6
	fixuprb-i7 = fixuprb-i --max-count 7
	fixuprb-ix = fixuprb-i --max-count 12
	fixuprb-iq = fixuprb-i --max-count 25
	fixuprb-iz = fixuprb-i --max-count 100
	fixuprbad-i = selectedannotatediffcommit-command --single-only -2 fixuprb COMMITS


	revertfixuprb = wrapper-nocolor revert --fixup --rebase	; Revert changes in <commit>(s) and squash this with the original <commit> via interactive rebase.
	revertfixuprblast = selectedpermanentcommit-command --accept-single -2 revertfixuprb COMMITS --max-count 1	; Revert changes in the last commit and squash this with the last commit.
	revertfixuprbselected = selectedpermanentcommit-command -2 revertfixuprb COMMITS	; Revert changes of the commit(s) interactively chosen from the commits in the passed <range> and squash this via interactive rebase.
	revertfixuprb1 = revertfixuprbselected --max-count 1
	revertfixuprb2 = revertfixuprbselected --max-count 2
	revertfixuprb3 = revertfixuprbselected --max-count 3
	revertfixuprb4 = revertfixuprbselected --max-count 4
	revertfixuprb5 = revertfixuprbselected --max-count 5
	revertfixuprb6 = revertfixuprbselected --max-count 6
	revertfixuprb7 = revertfixuprbselected --max-count 7
	revertfixuprbx = revertfixuprbselected --max-count 12
	revertfixuprbq = revertfixuprbselected --max-count 25
	revertfixuprbz = revertfixuprbselected --max-count 100
	revertfixuprbg = selectedgcommit-command -2 revertfixuprb COMMITS	; Revert changes of the commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/ and squash this via interactive rebase.
	revertfixuprbchanged = selectedchangedcommit-command -2 revertfixuprb COMMITS	; Revert changes of the commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/ and squash this via interactive rebase.
	revertfixuprbtouched = selectedtouchedcommit-command -2 revertfixuprb COMMITS	; Revert changes of the commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/ and squash this via interactive rebase.


	fixamendrb = fixup --amend --rebase	; Commit and squash and overwrite the original commit message with the passed revision via interactive rebase.
	fixamendrblast = selectedpermanentcommit-command --accept-single --single-only -2 fixamendrb COMMITS --max-count 1	; Commit and squash and overwrite the original commit message with the last commit (of FILE; if you omit that the HEAD commit would be referenced, and you could just amend there).
	fixamendselectedrb = selectedpermanentcommit-command --single-only -2 fixamendrb COMMITS	; Commit and squash and overwrite the original commit message with the commit interactively chosen from the commits in the passed <range> via interactive rebase.
	fixamendrb1 = fixamendselectedrb --max-count 1
	fixamendrb2 = fixamendselectedrb --max-count 2
	fixamendrb3 = fixamendselectedrb --max-count 3
	fixamendrb4 = fixamendselectedrb --max-count 4
	fixamendrb5 = fixamendselectedrb --max-count 5
	fixamendrb6 = fixamendselectedrb --max-count 6
	fixamendrb7 = fixamendselectedrb --max-count 7
	fixamendrbx = fixamendselectedrb --max-count 12
	fixamendrbq = fixamendselectedrb --max-count 25
	fixamendrbz = fixamendselectedrb --max-count 100
	fixamendrbg = selectedgcommit-command --single-only -2 fixamendrb COMMITS	; Commit and squash and overwrite the original commit message with the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	fixamendrbchanged = selectedchangedcommit-command --single-only -2 fixamendrb COMMITS	; Commit and squash and overwrite the original commit message with the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	fixamendrbtouched = selectedtouchedcommit-command --single-only -2 fixamendrb COMMITS	; Commit and squash and overwrite the original commit message with the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	fixamendrbst = stfiles-command selectedpermanentcommit-command --single-only -2 fixamendrb COMMITS
	fixamendrblastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixamendrb COMMITS --max-count 1
	fixamendrbst1 = fixamendrbst --max-count 1
	fixamendrbst2 = fixamendrbst --max-count 2
	fixamendrbst3 = fixamendrbst --max-count 3
	fixamendrbst4 = fixamendrbst --max-count 4
	fixamendrbst5 = fixamendrbst --max-count 5
	fixamendrbst6 = fixamendrbst --max-count 6
	fixamendrbst7 = fixamendrbst --max-count 7
	fixamendrbstx = fixamendrbst --max-count 12
	fixamendrbstq = fixamendrbst --max-count 25
	fixamendrbstz = fixamendrbst --max-count 100
	fixamendrbadst = selectedannotatediffcommit-command HEAD --single-only -2 fixamendrb COMMITS

	fixamendrbi = stifiles-command selectedpermanentcommit-command --single-only -2 fixamendrb COMMITS
	fixamendrblasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixamendrb COMMITS --max-count 1
	fixamendrbi1 = fixamendrbi --max-count 1
	fixamendrbi2 = fixamendrbi --max-count 2
	fixamendrbi3 = fixamendrbi --max-count 3
	fixamendrbi4 = fixamendrbi --max-count 4
	fixamendrbi5 = fixamendrbi --max-count 5
	fixamendrbi6 = fixamendrbi --max-count 6
	fixamendrbi7 = fixamendrbi --max-count 7
	fixamendrbix = fixamendrbi --max-count 12
	fixamendrbiq = fixamendrbi --max-count 25
	fixamendrbiz = fixamendrbi --max-count 100
	fixamendrbadi = selectedannotatediffcommit-command --cached --single-only -2 fixamendrb COMMITS

	fixamendrb-i = stIfiles-command selectedpermanentcommit-command --single-only -2 fixamendrb COMMITS
	fixamendrblast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixamendrb COMMITS --max-count 1
	fixamendrb-i1 = fixamendrb-i --max-count 1
	fixamendrb-i2 = fixamendrb-i --max-count 2
	fixamendrb-i3 = fixamendrb-i --max-count 3
	fixamendrb-i4 = fixamendrb-i --max-count 4
	fixamendrb-i5 = fixamendrb-i --max-count 5
	fixamendrb-i6 = fixamendrb-i --max-count 6
	fixamendrb-i7 = fixamendrb-i --max-count 7
	fixamendrb-ix = fixamendrb-i --max-count 12
	fixamendrb-iq = fixamendrb-i --max-count 25
	fixamendrb-iz = fixamendrb-i --max-count 100
	fixamendrbad-i = selectedannotatediffcommit-command --single-only -2 fixamendrb COMMITS


	fixwordingrb = fixup --reword --rebase	; Commit and squash and just reword the original commit message (no changes!) with the passed revision via interactive rebase.
	fixwordingrblast = selectedpermanentcommit-command --accept-single --single-only -2 fixwordingrb COMMITS --max-count 1	; Commit and squash and just reword the original commit message with the last commit (of FILE; if you omit that the HEAD commit would be referenced, and you could just amend there).
	fixwordingselectedrb = selectedpermanentcommit-command --single-only -2 fixwordingrb COMMITS	; Commit and squash and just reword the original commit message with the commit interactively chosen from the commits in the passed <range> via interactive rebase.
	fixwordingrb1 = fixwordingselectedrb --max-count 1
	fixwordingrb2 = fixwordingselectedrb --max-count 2
	fixwordingrb3 = fixwordingselectedrb --max-count 3
	fixwordingrb4 = fixwordingselectedrb --max-count 4
	fixwordingrb5 = fixwordingselectedrb --max-count 5
	fixwordingrb6 = fixwordingselectedrb --max-count 6
	fixwordingrb7 = fixwordingselectedrb --max-count 7
	fixwordingrbx = fixwordingselectedrb --max-count 12
	fixwordingrbq = fixwordingselectedrb --max-count 25
	fixwordingrbz = fixwordingselectedrb --max-count 100
	fixwordingrbg = selectedgcommit-command --single-only -2 fixwordingrb COMMITS	; Commit and squash and just reword the original commit message with the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	fixwordingrbchanged = selectedchangedcommit-command --single-only -2 fixwordingrb COMMITS	; Commit and squash and just reword the original commit message with the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	fixwordingrbtouched = selectedtouchedcommit-command --single-only -2 fixwordingrb COMMITS	; Commit and squash and just reword the original commit message with the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	fixwordingrbst = stfiles-command selectedpermanentcommit-command --single-only -2 fixwordingrb COMMITS
	fixwordingrblastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixwordingrb COMMITS --max-count 1
	fixwordingrbst1 = fixwordingrbst --max-count 1
	fixwordingrbst2 = fixwordingrbst --max-count 2
	fixwordingrbst3 = fixwordingrbst --max-count 3
	fixwordingrbst4 = fixwordingrbst --max-count 4
	fixwordingrbst5 = fixwordingrbst --max-count 5
	fixwordingrbst6 = fixwordingrbst --max-count 6
	fixwordingrbst7 = fixwordingrbst --max-count 7
	fixwordingrbstx = fixwordingrbst --max-count 12
	fixwordingrbstq = fixwordingrbst --max-count 25
	fixwordingrbstz = fixwordingrbst --max-count 100
	fixwordingrbadst = selectedannotatediffcommit-command HEAD --single-only -2 fixwordingrb COMMITS

	fixwordingrbi = stifiles-command selectedpermanentcommit-command --single-only -2 fixwordingrb COMMITS
	fixwordingrblasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixwordingrb COMMITS --max-count 1
	fixwordingrbi1 = fixwordingrbi --max-count 1
	fixwordingrbi2 = fixwordingrbi --max-count 2
	fixwordingrbi3 = fixwordingrbi --max-count 3
	fixwordingrbi4 = fixwordingrbi --max-count 4
	fixwordingrbi5 = fixwordingrbi --max-count 5
	fixwordingrbi6 = fixwordingrbi --max-count 6
	fixwordingrbi7 = fixwordingrbi --max-count 7
	fixwordingrbix = fixwordingrbi --max-count 12
	fixwordingrbiq = fixwordingrbi --max-count 25
	fixwordingrbiz = fixwordingrbi --max-count 100
	fixwordingrbadi = selectedannotatediffcommit-command --cached --single-only -2 fixwordingrb COMMITS

	fixwordingrb-i = stIfiles-command selectedpermanentcommit-command --single-only -2 fixwordingrb COMMITS
	fixwordingrblast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 fixwordingrb COMMITS --max-count 1
	fixwordingrb-i1 = fixwordingrb-i --max-count 1
	fixwordingrb-i2 = fixwordingrb-i --max-count 2
	fixwordingrb-i3 = fixwordingrb-i --max-count 3
	fixwordingrb-i4 = fixwordingrb-i --max-count 4
	fixwordingrb-i5 = fixwordingrb-i --max-count 5
	fixwordingrb-i6 = fixwordingrb-i --max-count 6
	fixwordingrb-i7 = fixwordingrb-i --max-count 7
	fixwordingrb-ix = fixwordingrb-i --max-count 12
	fixwordingrb-iq = fixwordingrb-i --max-count 25
	fixwordingrb-iz = fixwordingrb-i --max-count 100
	fixwordingrbad-i = selectedannotatediffcommit-command --single-only -2 fixwordingrb COMMITS


	;; commitidentical: Commit directly (without further edits) with the same commit message as the passed revision [from the working copy that FILE or DIR resides in].
	commitidenticallast = selectedpermanentcommit-command --accept-single --single-only --pass-file-args --allow-outside-workingcopy -2 commitidentical COMMITS --max-count 1	; Commit directly (without further edits) with the same commit message as the last commit.
	commitidenticalselected = selectedpermanentcommit-command --single-only --pass-file-args --allow-outside-workingcopy -2 commitidentical COMMITS	; Commit directly (without further edits) with the same commit message as the commit interactively chosen from the commits in the passed <range>.
	commitidentical1 = commitidenticalselected --max-count 1
	commitidentical2 = commitidenticalselected --max-count 2
	commitidentical3 = commitidenticalselected --max-count 3
	commitidentical4 = commitidenticalselected --max-count 4
	commitidentical5 = commitidenticalselected --max-count 5
	commitidentical6 = commitidenticalselected --max-count 6
	commitidentical7 = commitidenticalselected --max-count 7
	commitidenticalx = commitidenticalselected --max-count 12
	commitidenticalq = commitidenticalselected --max-count 25
	commitidenticalz = commitidenticalselected --max-count 100
	cis = commitidenticalselected7
	commitidenticalg = selectedgcommit-command --single-only -2 commitidentical COMMITS	; Commit directly (without further edits) with the same commit message as the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	commitidenticalchanged = selectedchangedcommit-command --single-only -2 commitidentical COMMITS	; Commit directly (without further edits) with the same commit message as the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	commitidenticaltouched = selectedtouchedcommit-command --single-only -2 commitidentical COMMITS	; Commit directly (without further edits) with the same commit message as the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	commitidenticalst = stfiles-command selectedpermanentcommit-command --single-only -2 commitidentical COMMITS	; Commit directly (without further edits) with the same commit message as the commit interactively chosen from the commits of currently modified files in the passed <range>.
	commitidenticallastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 commitidentical COMMITS --max-count 1	; Commit directly (without further edits) with the same commit message as the last commit of currently modified files.
	commitidenticalst1 = commitidenticalst --max-count 1
	commitidenticalst2 = commitidenticalst --max-count 2
	commitidenticalst3 = commitidenticalst --max-count 3
	commitidenticalst4 = commitidenticalst --max-count 4
	commitidenticalst5 = commitidenticalst --max-count 5
	commitidenticalst6 = commitidenticalst --max-count 6
	commitidenticalst7 = commitidenticalst --max-count 7
	commitidenticalstx = commitidenticalst --max-count 12
	commitidenticalstq = commitidenticalst --max-count 25
	commitidenticalstz = commitidenticalst --max-count 100
	commitidenticaladst = selectedannotatediffcommit-command HEAD --single-only -2 commitidentical COMMITS

	commitidenticali = stifiles-command selectedpermanentcommit-command --single-only -2 commitidentical COMMITS	; Commit directly (without further edits) with the same commit message as the commit interactively chosen from the commits of currently staged files in the passed <range>.
	commitidenticallasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 commitidentical COMMITS --max-count 1	; Commit directly (without further edits) with the same commit message as the last commit of currently staged files.
	commitidenticali1 = commitidenticali --max-count 1
	commitidenticali2 = commitidenticali --max-count 2
	commitidenticali3 = commitidenticali --max-count 3
	commitidenticali4 = commitidenticali --max-count 4
	commitidenticali5 = commitidenticali --max-count 5
	commitidenticali6 = commitidenticali --max-count 6
	commitidenticali7 = commitidenticali --max-count 7
	commitidenticalix = commitidenticali --max-count 12
	commitidenticaliq = commitidenticali --max-count 25
	commitidenticaliz = commitidenticali --max-count 100
	commitidenticaladi = selectedannotatediffcommit-command --cached --single-only -2 commitidentical COMMITS

	commitidentical-i = stIfiles-command selectedpermanentcommit-command --single-only -2 commitidentical COMMITS	; Commit directly (without further edits) with the same commit message as the commit interactively chosen from the commits of currently modified but not staged files in the passed <range>.
	commitidenticallast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 commitidentical COMMITS --max-count 1	; Commit directly (without further edits) with the same commit message as the last commit of currently modified but not staged files.
	commitidentical-i1 = commitidentical-i --max-count 1
	commitidentical-i2 = commitidentical-i --max-count 2
	commitidentical-i3 = commitidentical-i --max-count 3
	commitidentical-i4 = commitidentical-i --max-count 4
	commitidentical-i5 = commitidentical-i --max-count 5
	commitidentical-i6 = commitidentical-i --max-count 6
	commitidentical-i7 = commitidentical-i --max-count 7
	commitidentical-ix = commitidentical-i --max-count 12
	commitidentical-iq = commitidentical-i --max-count 25
	commitidentical-iz = commitidentical-i --max-count 100
	commitidenticalad-i = selectedannotatediffcommit-command --single-only -2 commitidentical COMMITS

	;; commitidenticaltosuper: Commit directly (without further edits) with the same commit message as the last commit / passed revision from the superproject.

	commitlike = commitidentical --edit 	; Commit with the same commit message as the passed revision as the base for further editing.
	commitlikelast = selectedpermanentcommit-command --accept-single --single-only --pass-file-args --allow-outside-workingcopy -2 commitlike COMMITS --max-count 1	; Commit with the same commit message as the last commit.
	commitlikeselected = selectedpermanentcommit-command --single-only --pass-file-args --allow-outside-workingcopy -2 commitlike COMMITS	; Commit with the same commit message as the commit interactively chosen from the commits in the passed <range> as the base for further editing.
	commitlike1 = commitlikeselected --max-count 1
	commitlike2 = commitlikeselected --max-count 2
	commitlike3 = commitlikeselected --max-count 3
	commitlike4 = commitlikeselected --max-count 4
	commitlike5 = commitlikeselected --max-count 5
	commitlike6 = commitlikeselected --max-count 6
	commitlike7 = commitlikeselected --max-count 7
	commitlikex = commitlikeselected --max-count 12
	commitlikeq = commitlikeselected --max-count 25
	commitlikez = commitlikeselected --max-count 100
	commitlikeg = selectedgcommit-command --single-only -2 commitlike COMMITS	; Commit with the same commit message as the commit interactively chosen from the commits where log messages match the specified text or /regexp/ as the base for further editing.
	commitlikechanged = selectedchangedcommit-command --single-only -2 commitlike COMMITS	; Commit with the same commit message as the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	commitliketouched = selectedtouchedcommit-command --single-only -2 commitlike COMMITS	; Commit with the same commit message as the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.
	cls = commitlikeselected7

	commitlikest = stfiles-command selectedpermanentcommit-command --single-only -2 commitlike COMMITS	; Commit with the same commit message as the commit interactively chosen from the commits of currently modified files in the passed <range> as the base for further editing.
	commitlikelastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 commitlike COMMITS --max-count 1	; Commit with the same commit message as the last commit of currently modified files.
	commitlikest1 = commitlikest --max-count 1
	commitlikest2 = commitlikest --max-count 2
	commitlikest3 = commitlikest --max-count 3
	commitlikest4 = commitlikest --max-count 4
	commitlikest5 = commitlikest --max-count 5
	commitlikest6 = commitlikest --max-count 6
	commitlikest7 = commitlikest --max-count 7
	commitlikestx = commitlikest --max-count 12
	commitlikestq = commitlikest --max-count 25
	commitlikestz = commitlikest --max-count 100
	commitlikeadst = selectedannotatediffcommit-command HEAD --single-only -2 commitlike COMMITS

	commitlikei = stifiles-command selectedpermanentcommit-command --single-only -2 commitlike COMMITS 	; Commit with the same commit message as the commit interactively chosen from the commits of currently staged files in the passed <range> as the base for further editing.
	commitlikelasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 commitlike COMMITS --max-count 1	; Commit with the same commit message as the last commit of currently staged files.
	commitlikei1 = commitlikei --max-count 1
	commitlikei2 = commitlikei --max-count 2
	commitlikei3 = commitlikei --max-count 3
	commitlikei4 = commitlikei --max-count 4
	commitlikei5 = commitlikei --max-count 5
	commitlikei6 = commitlikei --max-count 6
	commitlikei7 = commitlikei --max-count 7
	commitlikeix = commitlikei --max-count 12
	commitlikeiq = commitlikei --max-count 25
	commitlikeiz = commitlikei --max-count 100
	commitlikeadi = selectedannotatediffcommit-command --cached --single-only -2 commitlike COMMITS

	commitlike-i = stIfiles-command selectedpermanentcommit-command --single-only -2 commitlike COMMITS ; Commit with the same commit message as the commit interactively chosen from the commits of currently modified but not staged files in the passed <range> as the base for further editing.
	commitlikelast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 commitlike COMMITS --max-count 1	; Commit with the same commit message as the last commit of currently modified but not staged files.
	commitlike-i1 = commitlike-i --max-count 1
	commitlike-i2 = commitlike-i --max-count 2
	commitlike-i3 = commitlike-i --max-count 3
	commitlike-i4 = commitlike-i --max-count 4
	commitlike-i5 = commitlike-i --max-count 5
	commitlike-i6 = commitlike-i --max-count 6
	commitlike-i7 = commitlike-i --max-count 7
	commitlike-ix = commitlike-i --max-count 12
	commitlike-iq = commitlike-i --max-count 25
	commitlike-iz = commitlike-i --max-count 100
	commitlikead-i = selectedannotatediffcommit-command --single-only -2 commitlike COMMITS

	commitlikesuper = commitidenticaltosuper --edit	; Commit with the same commit message as the last commit / passed revision from the superproject as the base for further editing.

	;; commitrelate: Commit with the same commit message as passed revision(s) [from the working copy that FILE or DIR resides in] as the base for further editing, referencing prior commit(s) (when it's too late to amend the existing commit). This just adds a reference to the prior commit(s) in the commit message (title and body).
	commitrelatelast = selectedpermanentcommit-command --accept-single --single-only --pass-file-args --allow-outside-workingcopy -2 commitrelate COMMITS --max-count 1	; Commit with the same commit message as the last commit as the base for further editing, referencing prior commit (when it's too late to amend the existing commit).
	commitrelateselected = selectedpermanentcommit-command --pass-file-args --allow-outside-workingcopy -2 commitrelate COMMITS	; Commit with the same commit message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	commitrelate1 = commitrelateselected --max-count 1
	commitrelate2 = commitrelateselected --max-count 2
	commitrelate3 = commitrelateselected --max-count 3
	commitrelate4 = commitrelateselected --max-count 4
	commitrelate5 = commitrelateselected --max-count 5
	commitrelate6 = commitrelateselected --max-count 6
	commitrelate7 = commitrelateselected --max-count 7
	commitrelatex = commitrelateselected --max-count 12
	commitrelateq = commitrelateselected --max-count 25
	commitrelatez = commitrelateselected --max-count 100
	commitrelateg = selectedgcommit-command -2 commitrelate COMMITS	; Commit with the same commit message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/ (when it's too late or cumbersome to fixup the existing commit).
	commitrelatechanged = selectedchangedcommit-command -2 commitrelate COMMITS	; Commit with the same commit message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	commitrelatetouched = selectedtouchedcommit-command -2 commitrelate COMMITS	; Commit with the same commit message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	commitrelatest = stfiles-command selectedpermanentcommit-command -2 commitrelate COMMITS	; Commit with the same commit message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits of currently modified files in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	commitrelatelastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 commitrelate COMMITS --max-count 1	; Commit with the same commit message as the last commit of currently modified files as the base for further editing, referencing prior commit (when it's too late to amend the existing commit).
	commitrelatest1 = commitrelatest --max-count 1
	commitrelatest2 = commitrelatest --max-count 2
	commitrelatest3 = commitrelatest --max-count 3
	commitrelatest4 = commitrelatest --max-count 4
	commitrelatest5 = commitrelatest --max-count 5
	commitrelatest6 = commitrelatest --max-count 6
	commitrelatest7 = commitrelatest --max-count 7
	commitrelatestx = commitrelatest --max-count 12
	commitrelatestq = commitrelatest --max-count 25
	commitrelatestz = commitrelatest --max-count 100
	commitrelateadst = selectedannotatediffcommit-command HEAD -2 commitrelate COMMITS

	commitrelatei = stifiles-command selectedpermanentcommit-command -2 commitrelate COMMITS	; Commit with the same commit message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits of currently staged files in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	commitrelatelasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 commitrelate COMMITS --max-count 1	; Commit with the same commit message as the last commit of currently staged files as the base for further editing, referencing prior commit (when it's too late to amend the existing commit).
	commitrelatei1 = commitrelatei --max-count 1
	commitrelatei2 = commitrelatei --max-count 2
	commitrelatei3 = commitrelatei --max-count 3
	commitrelatei4 = commitrelatei --max-count 4
	commitrelatei5 = commitrelatei --max-count 5
	commitrelatei6 = commitrelatei --max-count 6
	commitrelatei7 = commitrelatei --max-count 7
	commitrelateix = commitrelatei --max-count 12
	commitrelateiq = commitrelatei --max-count 25
	commitrelateiz = commitrelatei --max-count 100
	commitrelateadi = selectedannotatediffcommit-command --cached -2 commitrelate COMMITS

	commitrelate-i = stIfiles-command selectedpermanentcommit-command -2 commitrelate COMMITS	; Commit with the same commit message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits of currently modified but not staged files in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	commitrelatelast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 commitrelate COMMITS --max-count 1	; Commit with the same commit message as the last commit of currently modified but not staged files as the base for further editing, referencing prior commit (when it's too late to amend the existing commit).
	commitrelate-i1 = commitrelate-i --max-count 1
	commitrelate-i2 = commitrelate-i --max-count 2
	commitrelate-i3 = commitrelate-i --max-count 3
	commitrelate-i4 = commitrelate-i --max-count 4
	commitrelate-i5 = commitrelate-i --max-count 5
	commitrelate-i6 = commitrelate-i --max-count 6
	commitrelate-i7 = commitrelate-i --max-count 7
	commitrelate-ix = commitrelate-i --max-count 12
	commitrelate-iq = commitrelate-i --max-count 25
	commitrelate-iz = commitrelate-i --max-count 100
	commitrelatead-i = selectedannotatediffcommit-command -2 commitrelate COMMITS


	;; stashrelate: Stash with the same message as passed revision(s) [from the working copy that FILE or DIR resides in] as the base for further editing, referencing prior commit(s). This just adds a reference to the prior commit(s) in the stash message (title and body).
	stashrelatelast = selectedpermanentcommit-command --accept-single --single-only --pass-file-args --allow-outside-workingcopy -2 stashrelate COMMITS --max-count 1	; Stash with the same message as the last commit as the base for further editing, referencing prior commit.
	stashrelateselected = selectedpermanentcommit-command --pass-file-args --allow-outside-workingcopy -2 stashrelate COMMITS	; Stash with the same message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits in the passed <range>.
	stashrelate1 = stashrelateselected --max-count 1
	stashrelate2 = stashrelateselected --max-count 2
	stashrelate3 = stashrelateselected --max-count 3
	stashrelate4 = stashrelateselected --max-count 4
	stashrelate5 = stashrelateselected --max-count 5
	stashrelate6 = stashrelateselected --max-count 6
	stashrelate7 = stashrelateselected --max-count 7
	stashrelatex = stashrelateselected --max-count 12
	stashrelateq = stashrelateselected --max-count 25
	stashrelatez = stashrelateselected --max-count 100
	stashrelateg = selectedgcommit-command -2 stashrelate COMMITS	; Stash with the same message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/.
	stashrelatechanged = selectedchangedcommit-command -2 stashrelate COMMITS	; Stash with the same message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	stashrelatetouched = selectedtouchedcommit-command -2 stashrelate COMMITS	; Stash with the same message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	stashrelatest = stfiles-command selectedpermanentcommit-command -2 stashrelate COMMITS	; Stash with the same message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits of currently modified files in the passed <range>.
	stashrelatelastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 stashrelate COMMITS --max-count 1	; Stash with the same message as the last commit of currently modified files as the base for further editing, referencing prior commit.
	stashrelatest1 = stashrelatest --max-count 1
	stashrelatest2 = stashrelatest --max-count 2
	stashrelatest3 = stashrelatest --max-count 3
	stashrelatest4 = stashrelatest --max-count 4
	stashrelatest5 = stashrelatest --max-count 5
	stashrelatest6 = stashrelatest --max-count 6
	stashrelatest7 = stashrelatest --max-count 7
	stashrelatestx = stashrelatest --max-count 12
	stashrelatestq = stashrelatest --max-count 25
	stashrelatestz = stashrelatest --max-count 100
	stashrelateadst = selectedannotatediffcommit-command HEAD -2 stashrelate COMMITS

	stashrelatei = stifiles-command selectedpermanentcommit-command -3 stashrelate --staged COMMITS	; Stash only index with the same message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits of currently staged files in the passed <range>.
	stashrelatelasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -3 stashrelate --staged COMMITS --max-count 1	; Stash only index with the same message as the last commit of currently staged files as the base for further editing, referencing prior commit.
	stashrelatei1 = stashrelatei --max-count 1
	stashrelatei2 = stashrelatei --max-count 2
	stashrelatei3 = stashrelatei --max-count 3
	stashrelatei4 = stashrelatei --max-count 4
	stashrelatei5 = stashrelatei --max-count 5
	stashrelatei6 = stashrelatei --max-count 6
	stashrelatei7 = stashrelatei --max-count 7
	stashrelateix = stashrelatei --max-count 12
	stashrelateiq = stashrelatei --max-count 25
	stashrelateiz = stashrelatei --max-count 100
	stashrelateadi = selectedannotatediffcommit-command --cached -3 stashrelate --staged COMMITS

	stashrelatest = stIfiles-command selectedpermanentcommit-command -3 stashrelate --keep-index COMMITS	; Stash (index and unstaged) and keep changes in index staged with the same message(s) as the passed revision(s) as the base for further editing, referencing prior commit(s) interactively chosen from the commits of currently modified but not staged files in the passed <range>.
	stashrelatelastst = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -3 stashrelate --keep-index COMMITS --max-count 1	; Stash (index and unstaged) and keep changes in index staged with the same message as the last commit of currently modified but not staged files as the base for further editing, referencing prior commit.
	stashrelatest1 = stashrelatest --max-count 1
	stashrelatest2 = stashrelatest --max-count 2
	stashrelatest3 = stashrelatest --max-count 3
	stashrelatest4 = stashrelatest --max-count 4
	stashrelatest5 = stashrelatest --max-count 5
	stashrelatest6 = stashrelatest --max-count 6
	stashrelatest7 = stashrelatest --max-count 7
	stashrelatestx = stashrelatest --max-count 12
	stashrelatestq = stashrelatest --max-count 25
	stashrelatestz = stashrelatest --max-count 100
	stashrelateadst = selectedannotatediffcommit-command -3 stashrelate --keep-index COMMITS


	amendrelate = commitrelate --amend  ; Amend with a reference to prior revision(s) (when it's too late to amend the existing commit).
	amendrelatelast = selectedpermanentcommit-command --accept-single --single-only -2 amendrelate COMMITS --max-count 1	; Amend with a reference to the last commit (when it's too late to amend the existing commit).
	amendrelateselected = selectedpermanentcommit-command -2 amendrelate COMMITS	; Amend with a reference to prior commit(s) interactively chosen from the commits in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	amendrelate1 = amendrelateselected --max-count 1
	amendrelate2 = amendrelateselected --max-count 2
	amendrelate3 = amendrelateselected --max-count 3
	amendrelate4 = amendrelateselected --max-count 4
	amendrelate5 = amendrelateselected --max-count 5
	amendrelate6 = amendrelateselected --max-count 6
	amendrelate7 = amendrelateselected --max-count 7
	amendrelatex = amendrelateselected --max-count 12
	amendrelateq = amendrelateselected --max-count 25
	amendrelatez = amendrelateselected --max-count 100
	amendrelateg = selectedgcommit-command -2 amendrelate COMMITS	; Amend with a reference to prior commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/ (when it's too late or cumbersome to fixup the existing commit).
	amendrelatechanged = selectedchangedcommit-command -2 amendrelate COMMITS	; Amend with a reference to prior commit(s) interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	amendrelatetouched = selectedtouchedcommit-command -2 amendrelate COMMITS	; Amend with a reference to prior commit(s) interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	amendrelatest = stfiles-command selectedpermanentcommit-command -2 amendrelate COMMITS	; Amend with a reference to prior commit(s) interactively chosen from the commits of currently modified files in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	amendrelatelastst = stfiles-command selectedpermanentcommit-command --accept-single --single-only -2 amendrelate COMMITS --max-count 1	; Amend with a reference to the last commit of currently modified files as the base for further editing, referencing prior commit (when it's too late to amend the existing commit).
	amendrelatest1 = amendrelatest --max-count 1
	amendrelatest2 = amendrelatest --max-count 2
	amendrelatest3 = amendrelatest --max-count 3
	amendrelatest4 = amendrelatest --max-count 4
	amendrelatest5 = amendrelatest --max-count 5
	amendrelatest6 = amendrelatest --max-count 6
	amendrelatest7 = amendrelatest --max-count 7
	amendrelatestx = amendrelatest --max-count 12
	amendrelatestq = amendrelatest --max-count 25
	amendrelatestz = amendrelatest --max-count 100
	amendrelateadst = selectedannotatediffcommit-command HEAD -2 amendrelate COMMITS

	amendrelatei = stifiles-command selectedpermanentcommit-command -2 amendrelate COMMITS	; Amend with a reference to prior commit(s) interactively chosen from the commits of currently staged files in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	amendrelatelasti = stifiles-command selectedpermanentcommit-command --accept-single --single-only -2 amendrelate COMMITS --max-count 1	; Amend with a reference to the last commit of currently staged files as the base for further editing, referencing prior commit (when it's too late to amend the existing commit).
	amendrelatei1 = amendrelatei --max-count 1
	amendrelatei2 = amendrelatei --max-count 2
	amendrelatei3 = amendrelatei --max-count 3
	amendrelatei4 = amendrelatei --max-count 4
	amendrelatei5 = amendrelatei --max-count 5
	amendrelatei6 = amendrelatei --max-count 6
	amendrelatei7 = amendrelatei --max-count 7
	amendrelateix = amendrelatei --max-count 12
	amendrelateiq = amendrelatei --max-count 25
	amendrelateiz = amendrelatei --max-count 100
	amendrelateadi = selectedannotatediffcommit-command --cached -2 amendrelate COMMITS

	amendrelate-i = stIfiles-command selectedpermanentcommit-command -2 amendrelate COMMITS	; Amend with a reference to prior commit(s) interactively chosen from the commits of currently modified but not staged files in the passed <range> (when it's too late or cumbersome to fixup the existing commit).
	amendrelatelast-i = stIfiles-command selectedpermanentcommit-command --accept-single --single-only -2 amendrelate COMMITS --max-count 1	; Amend with a reference to the last commit of currently modified but not staged files as the base for further editing, referencing prior commit (when it's too late to amend the existing commit).
	amendrelate-i1 = amendrelate-i --max-count 1
	amendrelate-i2 = amendrelate-i --max-count 2
	amendrelate-i3 = amendrelate-i --max-count 3
	amendrelate-i4 = amendrelate-i --max-count 4
	amendrelate-i5 = amendrelate-i --max-count 5
	amendrelate-i6 = amendrelate-i --max-count 6
	amendrelate-i7 = amendrelate-i --max-count 7
	amendrelate-ix = amendrelate-i --max-count 12
	amendrelate-iq = amendrelate-i --max-count 25
	amendrelate-iz = amendrelate-i --max-count 100
	amendrelatead-i = selectedannotatediffcommit-command -2 amendrelate COMMITS


	amen = wrapper-nocolor commit --amend --reuse-message=HEAD	; Amend to last commit without re-editing the message.
	amenu = wrapper-nocolor commit --all --amend --reuse-message=HEAD	; Amend all modified and deleted files to last commit without re-editing the message.
	amenun = commituntracked --all --amend --reuse-message=HEAD	; Amend only new files (respecting the ignore patterns) to last commit without re-editing the message.
	amend = wrapper-nocolor commit --amend --reedit-message=HEAD	; Amend to last commit.
	amendu = wrapper-nocolor commit --all --amend --reedit-message=HEAD	; Amend all modified and deleted files to last commit.
	amendun = commituntracked --all --amend --reedit-message=HEAD	; Amend only new files (respecting the ignore patterns) to last commit.
	amenpush = commitpush --force --amend --reuse-message=HEAD	; Amend to last commit without re-editing the message and push [to REMOTE].
	amenupush = commitpush --force --all --amend --reuse-message=HEAD	; Amend all modified and deleted files to last commit to last commit without re-editing the message and push [to REMOTE].
	amendpush = commitpush --force --amend --reedit-message=HEAD	; Amend to last commit and push [to REMOTE].
	amendupush = commitpush --force --all --amend --reedit-message=HEAD	; Amend all modified and deleted files to last commit to last commit and push [to REMOTE].
	amendonly = wrapper-nocolor commit --amend --only	; Reword commit message / amend passed files to last commit, ignoring any already staged changes.
	reword = amendonly --cleanup=strip
	;; rewordappend: Append the passed commit message(s) to the original commit message.
	;; pipereword: Reword the commit message of the last commit by piping its text through COMMAND.
	;; sedreword: Reword the commit message of the last commit through manipulation via SED-ARGUMENTS.
	;; rewordremovescope: Remove leading <scope>: arguments (but stop short of keywords) from the commit message of the last commit.

	;; amendlike: Amend the same files (inside <path>) as were modified in the last commit / N'th commit / passed revision to the last commit (ignoring any already staged changes).
	amendlikeselected = selectedpermanentcommit-command --single-only -2 amendlike COMMITS
	amendlike1 = amendlikeselected --max-count 1
	amendlike2 = amendlikeselected --max-count 2
	amendlike3 = amendlikeselected --max-count 3
	amendlike4 = amendlikeselected --max-count 4
	amendlike5 = amendlikeselected --max-count 5
	amendlike6 = amendlikeselected --max-count 6
	amendlike7 = amendlikeselected --max-count 7
	amendlikex = amendlikeselected --max-count 12
	amendlikeq = amendlikeselected --max-count 25
	amendlikez = amendlikeselected --max-count 100
	amendlikeg = selectedgcommit-command --single-only -2 amendlike COMMITS
	amendlikechanged = selectedchangedcommit-command --single-only -2 amendlike COMMITS
	amendliketouched = selectedtouchedcommit-command --single-only -2 amendlike COMMITS

	amenlike = amendlike --reuse-message=HEAD
	amenlikeselected = selectedpermanentcommit-command --single-only -2 amenlike COMMITS
	amenlike1 = amenlikeselected --max-count 1
	amenlike2 = amenlikeselected --max-count 2
	amenlike3 = amenlikeselected --max-count 3
	amenlike4 = amenlikeselected --max-count 4
	amenlike5 = amenlikeselected --max-count 5
	amenlike6 = amenlikeselected --max-count 6
	amenlike7 = amenlikeselected --max-count 7
	amenlikex = amenlikeselected --max-count 12
	amenlikeq = amenlikeselected --max-count 25
	amenlikez = amenlikeselected --max-count 100
	amenlikeg = selectedgcommit-command --single-only -2 amenlike COMMITS
	amenlikechanged = selectedchangedcommit-command --single-only -2 amenlike COMMITS
	amenliketouched = selectedtouchedcommit-command --single-only -2 amenlike COMMITS


	;; touchcommit: Amend the current commit without adding any modification and without changing the message, so just getting a new commit ID and date (e.g. to trigger a rebuild), potentially changing the commit author.
	;; reauthor: Change the last commit's author whose "NAME <EMAIL@HOST>" combo is either passed or selected from all previous committers (via passed AUTHOR-PATTERN).
	reauthorasme = mine-command --full -3 amen --only ME	; Just set myself as the author (and committer naturally as well) without making any other modifications.
	; To change a wrong author / email address over a sequence of commits, use
	; 	$ git rbi --exec 'git reauthorasme'
	amenasme = mine-command -2 amen ME	; Amend to last commit without re-editing the message and set the author to myself.
	amendasme = mine-command -2 amend ME	; Amend to last commit and set the author to myself.
	;; commitfor: Commit for another author whose "NAME <EMAIL@HOST>" combo is either passed or selected from all previous committers (via passed AUTHOR-PATTERN).

	;; commitwith: Commit with other author(s) whose "NAME <EMAIL@HOST>" combo(s) are either passed or selected from all previous committers (via passed AUTHOR-PATTERN(s)) attributed as co-authors.
	commitwithack = commitwith --attribution 'Acked-by'
	commitwithhelper = commitwith --attribution 'Helped-by'
	commitwithmentor = commitwith --attribution 'Mentored-by'
	commitwithreporter = commitwith --attribution 'Reported-by'
	commitwithreviewer = commitwith --attribution 'Reviewed-by'
	commitwithsignoff = commitwith --attribution 'Signed-off-by'
	commitwithsuggester = commitwith --attribution 'Suggested-by'
	commitwithtester = commitwith --attribution 'Tested-by'
	credit = commitwith --amend ; Attribute other author(s) whose "NAME <EMAIL@HOST>" combo(s) are either passed or selected from all previous committers (via passed AUTHOR-PATTERN(s)) as co-authors to the last commit.
	creditack = commitwithack --amend
	credithelper = commitwithhelper --amend
	creditmentor = commitwithmentor --amend
	creditreporter = commitwithreporter --amend
	creditreviewer = commitwithreviewer --amend
	creditsignoff = commitwithsignoff --amend
	creditsuggester = commitwithsuggester --amend
	credittester = commitwithtester --amend

	;; commitwithfiledate: Commit with the author date set to the most recent file modification date of files in the stage. Useful if you only now noticed that changes should have been committed a long time ago.
	;; clipboardcommit: Commit directly (without further edits, unless -e|--edit is given) with the commit message taken from the clipboard.
	cbc = clipboardcommit

	;; repofilemove: Copy FILE(s) from the current repository to OTHER-REPO-PATH.
	orepofilemove = repofilemove --remote origin
	urepofilemove = repofilemove --remote upstream

	;; show-branch: Shows the branch anchestry (heads are prefixed with !, current with *), then after a --- separator commits (+) and merges (-).
	;; br: branch with DWIM detection of branch listing via pattern (from the help: git branch <pattern> would try to create a branch, use git branch --list <pattern> to list matching branches).
	;; brinfo: Add additional information (shortlog of the last commit) about each branch from the input.
	;; brv: List branches and additional information (shortlog of the last commit) about each branch.
	;; brname: Print current (local) branch name.
	;; brurl: Print the URL of the tracked branch. / Turn (remote, tracked) branch names printed by BRANCH-COMMAND into URLs.
	;; abr: List all branches, both local and remote [matching <glob>].
	abrurl = brurl abr	; List URLs of all branches, both local (tracked) and remote [matching <glob>].
	blname = name-rev --name-only @{-1}	; Print name of last checked-out branch.
	;; brage: List branches by age (descending, starting with old branches).
	brrecent = brage --newer 2w
	;; brc: List local branches and their first commit ordered by date of first commit (descending, starting with old branches), as based on the current branch (brbase: as tagged or referenced anywhere in the history (also by remotes)) or the best common ancestors of all branches or the branch passed with --base <branch>. The branches can be optionally filtered by <branch-glob>.
	;; createlocalbr: Create (and track) local branches for all remote branches (matching PATTERN).
	;; createbr: Create a new branch [from <start-point>] without switching to it. Enforces that such is passed.
	createbrselected = selectedpermanentcommit-command --single-only +1 COMMITS createbr	; Create a new branch from the commit interactively chosen from the commits in the passed <range>.
	createbr1 = createbrselected --max-count 1
	createbr2 = createbrselected --max-count 2
	createbr3 = createbrselected --max-count 3
	createbr4 = createbrselected --max-count 4
	createbr5 = createbrselected --max-count 5
	createbr6 = createbrselected --max-count 6
	createbr7 = createbrselected --max-count 7
	createbrx = createbrselected --max-count 12
	createbrq = createbrselected --max-count 25
	createbrz = createbrselected --max-count 100
	createbrg = selectedgcommit-command --single-only -2 createbr COMMITS	; Create a new branch from the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	createbrchanged = selectedchangedcommit-command --single-only -2 createbr COMMITS	; Create a new branch from the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	createbrtouched = selectedtouchedcommit-command --single-only -2 createbr COMMITS	; Create a new branch from the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	;; stackbr: Create a stacked follow-up branch of the current / passed branch by cloning and appending -1 (-2, etc.) at the end of the branch name and switch to it.
	stackbrfromselected = selectedpermanentcommit-command --single-only -3 stackbr --reset-to COMMITS	; Create a stacked follow-up branch of the current / passed branch by cloning and appending -1 (-2, etc.) at the end of the branch name, switch to it, and reset the current / passed branch to the commit interactively chosen from the commits in the passed <range>.
	stackbrfrom1 = stackbrfromselected --max-count 1
	stackbrfrom2 = stackbrfromselected --max-count 2
	stackbrfrom3 = stackbrfromselected --max-count 3
	stackbrfrom4 = stackbrfromselected --max-count 4
	stackbrfrom5 = stackbrfromselected --max-count 5
	stackbrfrom6 = stackbrfromselected --max-count 6
	stackbrfrom7 = stackbrfromselected --max-count 7
	stackbrfromx = stackbrfromselected --max-count 12
	stackbrfromq = stackbrfromselected --max-count 25
	stackbrfromz = stackbrfromselected --max-count 100
	stackbrfromg = selectedgcommit-command --single-only -3 stackbr --reset-to COMMITS	; Create a stacked follow-up branch of the current / passed branch by cloning and appending -1 (-2, etc.) at the end of the branch name, switch to it, and reset the current / passed branch to the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	stackbrfromchanged = selectedchangedcommit-command --single-only -3 stackbr --reset-to COMMITS	; Create a stacked follow-up branch of the current / passed branch by cloning and appending -1 (-2, etc.) at the end of the branch name, switch to it, and reset the current / passed branch to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	stackbrfromtouched = selectedtouchedcommit-command --single-only -3 stackbr --reset-to COMMITS	; Create a stacked follow-up branch of the current / passed branch by cloning and appending -1 (-2, etc.) at the end of the branch name, switch to it, and reset the current / passed branch to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	;; stackedbranches: List all stacked branches that can be obtained from the current / passed branch by appending -1 (-2, etc.) at the end of the branch name.
	;; stackedbrdo: Check out all stacked branches that can be obtained from the current / passed branch by appending -1 (-2, etc.) at the end of the branch name one by one and execute "git SIMPLECOMMAND" and/or COMMANDLINE on each branch.
	;; stackedbrrefdo: Iterate over all stacked branches that can be obtained from the current / passed branch by appending -1 (-2, etc.) at the end of the branch name one by one and execute "git SIMPLECOMMAND" and/or COMMANDLINE for each branch, replacing {} with its name.
	stackedbropublish = stackedbrrefdo opublish {}	; Initial publish of all stacked branches to my GitHub clone to get them pulled into upstream.
	stackedbropush = stackedbrrefdo opush {}	; Re-publish of all stacked branches to my GitHub clone to get them pulled into upstream.

	conextbr = stackedbranch-command --offset 1 -2 checkout BRANCH
	cosubnextbr = conextbr --submodules
	coprevbr = stackedbranch-command --offset -1 -2 checkout BRANCH
	cosubprevbr = coprevbr --submodules
	;; stackedbrpull-requesttops: Create a series of GitHub pull requests for all stacked branches that can be obtained from the current / passed branch by appending -1 (-2, etc.) at the end of the branch name.
	;; stackedbrps: List GitHub pull requests for all stacked branches that can be obtained from the current / passed branch by appending -1 (-2, etc.) at the end of the branch name.
	;; resetbr: Reset the passed BRANCH's HEAD to REVISION / the current revision without switching to it.
	backupbr = stackbr --no-checkout	; Clone the current / passed branch by appending -1 (-2, etc.) at the end of the branch name (but don't switch to it).
	;; localbr: List all local (ordered by last commit age (descending, starting with branches that haven't been updated recently)) (except for the current branch and master (and base branch if defined)).
	;; localbrc: List all local (ordered by date of first commit (age-descending, starting with old branches)) (except for the current branch and master (and base branch if defined)).
	localbrurl = brurl localbr	; List urls of all local / passed branches (except for the current branch and master (and base branch if defined)).
	;; localbrdo: Check out all / the last committed N local branches (except for the current branch and master (and base branch if defined)) one by one and execute COMMAND (or drop back to the shell) for each).
	;; localbrcdo: Check out all / the last N local branches (except for the current branch and master (and base branch if defined)) ordered by date of first commit and execute COMMAND (or drop back to the shell) for each).
	;; localbrrefdo: Iterate over all / the last committed N local branches (except for the current branch and master (and base branch if defined)) one by one and execute COMMAND for each branch, replacing {} with its name.
	;; localbrcrefdo: Iterate over all / the last committed N local branches (except for the current branch and master (and base branch if defined)) ordered by date of first commit one by one and execute COMMAND for each branch, replacing {} with its name.
	;; stalebr: List branches that have not been updated in a while.
	;; rprune: Remove old local branches that do not exist in <remote> any more.
	;; existsbr: Check whether [all of] the passed [<remote>/]<branch> exists.
	;; remotebr: Print corresponding remote/branch for the current / passed branch(es) (or return error).
	deletebr = branch -d	; Delete the current branch (and detach) / passed <branch>.
	deletebl = branch -d @{-1}	; Delete the last checked-out branch.
	;; deleteselectedbranch: Delete branches that are interactively selected from existing branches.
	;; deletemergedbranches: Delete branches that are interactively selected from branches that have already been merged into HEAD / the passed COMMIT(s).
	;; mergedbr: List branches that have already been merged into HEAD / the passed COMMIT(s).
	;; renamebr: Rename the current branch / <oldbranch> to <newbranch>.
	;; rename-master-to-main: Rename the master branch to main in the local repository and (if origin exists) also in my GitHub clone.

	;; isarchived: Test whether my GitHub clone has been archived (made read-only).
	;; archive: Archive my GitHub clone (i.e. make it read-only), and remove the origin remote.
	;; unarchive: Undo the archiving of my GitHub clone (i.e. make it writeable again). Re-adds the the origin remote if missing.
	;; archivebr: Tag <branch>(es), then delete it from the local repository (as well as origin if it exists). Use this to remove old branches that have been incorporated into master. If not incorporated (e.g. an abandoned experiment), pass -f to force archiving.
	;; archivelocalbr: Archive all / the first committed N local branches (except for the current branch and master (and base branch if defined)).
	;; archivelocalbrc: Archive all / the first committed N local branches (except for the current branch and master) ordered by date of first commit.
	;; archivestalebr: Archive branches that have not been updated in a while.
	;; archivecommit: Commit and immediately archive the committed changes by tagging it (also in origin if it exists).
	;; archivelast: Undo the last commit / N commits / commits up to <commit> of the current branch, and archive it by tagging it (also in origin if it exists).
	;; archivestash: Remove a single stash entry from the list of stash entries and archive it by tagging it (also in origin if it exists).
	;; archived: List all / <branch> archived branches.
	;; archivedurl: List URLs to passed <remote> of all / <branch> archived branches.
	archivedourl = archivedurl origin
	archiveduurl = archivedurl upstream

	; How to create an unrelated branch that doesn't hold the previous commit history (e.g. as for the gh-pages)
	; 1. git checkout --orphan gh-pages
	; 2. git rm -rf .
	;; detach: Detach HEAD at passed <commit> / Unassociate from the current branch without changing the current commit. Useful e.g. for separate worktrees, because they all must be on distinct branches.
	detachselected = selectedcommit-command --single-only -2 detach COMMITS	; Detach HEAD to the commit interactively chosen from the commits in the passed <range>.
	detach1 = detachselected --max-count 1
	detach2 = detachselected --max-count 2
	detach3 = detachselected --max-count 3
	detach4 = detachselected --max-count 4
	detach5 = detachselected --max-count 5
	detach6 = detachselected --max-count 6
	detach7 = detachselected --max-count 7
	detachx = detachselected --max-count 12
	detachq = detachselected --max-count 25
	detachz = detachselected --max-count 100
	detachg = selectedgcommit-command --single-only -2 detach COMMITS	; Detach HEAD to the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	detachchanged = selectedchangedcommit-command --single-only -2 detach COMMITS	; Detach HEAD to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	detachtouched = selectedtouchedcommit-command --single-only -2 detach COMMITS	; Detach HEAD to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.
	detachbl = detach @{-1}	; Detach HEAD to the last checked-out branch.
	;; reattach: Find a branch name that the detached commit is based on and check that out, looking first to the commit itself, then the first branch that comes after the detached commit, and thus contains it, then falling back to branch(es) that are reachable from the detached commit.

	co = wrapper-nocolor checkout
	;; checkoutbranch: Check out a (new or existing) branch. Enforces that such is passed.
	cobr = checkoutbranch
	;; cosuperbr: Check out a (new or existing) branch with the same (or modified) name as the superproject's current branch. Like supercobr from the other direction.
	;; supercobr: Check out a (new or existing) branch in the superproject with the same (or modified) name as this submodule's current branch. Like cosuperbr from the other direction.
	;; supersubcoremotebr: Check out a (new or existing remote) branch in the superproject with the same name as this submodule's current branch, and also check out corresponding remote branches in other submodules.
	;; checkoutselected: Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to checkout by number.
	checkoutg = selectedg-command --filter '' checkout
	cos = checkoutselected
	cos1 = cos 1
	cos2 = cos 2
	cos3 = cos 3
	cos4 = cos 4
	cos5 = cos 5
	cos6 = cos 6
	cos7 = cos 7
	cosx = cos 12
	cosq = cos 25
	cosz = cos 100
	cosub = co --submodules	; Switch branch, also eponymous local branches in submodules.
	;; checkoutselectedbranch: Switch to the branch that is interactively selected from existing branches.
	cosbr = checkoutselectedbranch
	cosubsbr = checkoutselectedbranch --submodules
	cossbr = cosubsbr
	corecentsbr = cosbr --newer 2w
	cosubrecentsbr = corecentsbr --submodules
	corecentsbrc = checkoutselectedbranchc origin --newer 2w
	cosubrecentsbrc = corecentsbrc --submodules
	;; colatest: Checkout the latest (by last commit age) local branch [matching pattern] (except the current branch and master (and base branch if defined)).
	;; colatestc: Checkout the local branch [matching pattern] that was created last (except the current branch and master (and base branch if defined)).

	;; checkout-remote-branch: Checkout passed <remote-branch>, resetting an existing local branch to the remote, tracking it if it doesn't yet exist locally, and ensuring that an existing tracked branch doesn't contradict the request.
	;; rco: Checkout passed <branch> in <remote>; fetching if needed and ensuring that an existing tracked branch doesn't contradict the request.
	;; rcolatest: Checkout the latest (by last commit age) local branch from the passed REMOTE [matching pattern].
	;; rcolatestc: Checkout local branch from the passed <remote> branch [matching pattern] that was created last (except the current branch and master (and base branch if defined)).
	;; rcheckoutselectedbranch: Switch to the branch [matching <glob>] that is interactively selected from existing branches in the passed REMOTE.
	;; rcheckoutselectedbranchc: Switch to the branch [matching <glob>] that is interactively selected from existing branches (ordered by date of first commit) in the passed REMOTE.
	cobl = wrapper-nocolor checkout @{-1}	; Checkout last checked-out branch.
	cosubbl = cosub @{-1}	; Checkout last checked-out branch, also eponymous local branches in submodules.

	coh = checkout --patch --	; Interactively select and check out individual hunks from the index or HEAD to the working copy.
	cosh = checkoutselected --patch	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to select and check out individual hunks from the index or HEAD by number.
	cohselected = selectedcommit-command --single-only --pass-file-args -3 checkout --patch COMMITS	; Interactively select and check out individual hunks from the commit interactively chosen from the commits in the passed <range>.
	coh1 = cohselected --max-count 1
	coh2 = cohselected --max-count 2
	coh3 = cohselected --max-count 3
	coh4 = cohselected --max-count 4
	coh5 = cohselected --max-count 5
	coh6 = cohselected --max-count 6
	coh7 = cohselected --max-count 7
	cohx = cohselected --max-count 12
	cohq = cohselected --max-count 25
	cohz = cohselected --max-count 100
	cohg = selectedgcommit-command --single-only --pass-file-args -3 checkout --patch COMMITS	; Interactively select and check out individual hunks from the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	cohchanged = selectedchangedcommit-command --single-only --pass-file-args -3 checkout --patch COMMITS	; Interactively select and check out individual hunks from the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	cohtouched = selectedtouchedcommit-command --single-only --pass-file-args -3 checkout --patch COMMITS	; Interactively select and check out individual hunks from the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	cobad = wrapper-nocolor checkout refs/bisect/bad	; Check out the first bad commit after a bisect run (not done automatically by "git bisect").
	;; bisect: Use binary search to find the commit that introduced a bug.
	;; bisectf: Use binary search to find the commit that introduced a bug on the the current branch, skipping commits that come from merged branches.

	bla = shortblame
	;; file-blame: Show author name and last date for each file.
	blast = stfiles-command bla
	blamest = stfiles-command blame
	blai = stifiles-command bla
	blamei = stifiles-command blame
	bla-i = stIfiles-command bla
	blame-i = stIfiles-command blame

	;; dirty: Test whether there are uncommitted changes, either in the working copy or the index.
	;; unstaged: Test whether there are / list uncommitted changes to committed files in the working copy (ignoring changes in the index and untracked files).
	;; untracked: Test whether there are new files not yet added to version control (and not covered by the ignore patterns).
	;; stageable: Test whether there are new files not yet added to version control (and not covered by the ignore patterns) or files with an unstaged modification. Changes in the index are ignored.
	st = wrapper-nocolor status -sb ; Concise status with branch and tracking info.
	;; str: Concise recursive status that includes one-line summaries of each modified submodule.
	;; stfiles: Just list any modified files (for renames both original and resulting file as separate lines).
	;; stifiles: Just list any staged files.
	;; st-ifiles: Just list any modified but not staged files.
	stuntracked = untracked --print
	;; stsubmodules: Show a list of submodules that are modified (not just submodule references, also uncommitted modifications in the submodule) but not committed in the superproject. Like stfiles but only submodules.
	;; stisubmodules is the same as subi.
	;; st-isubmodules: Show a list of submodules that are modified (not just submodule references, also uncommitted and unstaged modifications in the submodule) but not staged or committed in the superproject. Like stIfiles but only submodules, and also ignores submodules with only staged changes. In contrast, subI just checks the submodule's reference in the superproject.
	;; sti: Concise status only for staged files inside the index.
	;; rbrowse: Open origin / the passed pattern matching a remote in a browser. Like "hub browse", but can open different remotes.

	;; stash: Save a dirty working copy and index in a commit.
	;; stashi: Save only index in a commit; keep the dirty working copy.
	;; stashI: Save only the dirty working copy in a commit; keep the index untouched.
	;; stashst: Stash (index and unstaged) and keep changes in index staged.
	;; stashuu: Save both modified and new (untracked files).
	;; selectedstash: Interactively select from existing stashes (or directly pass N, M, ... selections) to manipulate by number.
	sstash = selectedstash
	sstash1 = sstash 1
	sstash2 = sstash 2
	sstash3 = sstash 3
	sstash4 = sstash 4
	sstash5 = sstash 5
	sstash6 = sstash 6
	sstash7 = sstash 7
	sstashx = sstash 12
	sstashq = sstash 25
	sstashz = sstash 100
	;; stashselected: Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to stash by number.
	stashfile = stashselected
	stashfile1 = stashfile 1
	stashfile2 = stashfile 2
	stashfile3 = stashfile 3
	stashfile4 = stashfile 4
	stashfile5 = stashfile 5
	stashfile6 = stashfile 6
	stashfile7 = stashfile 7
	stashfilex = stashfile 12
	stashfileq = stashfile 25
	stashfilez = stashfile 100
	;; stashhunk: Interactively select and stash away individual hunks changed in the working copy. Keeps changes in index unless --no-keep-index is given.
	;; stash list: Show all stashed commits.
	stashl = stash list --pretty=tformat:'%C(cyan)%gd%Creset %Cgreen(%cr)%Creset %s'
	;; stashlselected doesn't make sense as it just parrots the selection
	;; stashls = stashlselected
	stashl1 = log1 --pretty=tformat:'%C(cyan)stash@{0}%Creset %Cgreen(%cr)%Creset %s' stash@{0}
	stashl2 = log1 --pretty=tformat:'%C(cyan)stash@{1}%Creset %Cgreen(%cr)%Creset %s' stash@{1}
	stashl3 = log1 --pretty=tformat:'%C(cyan)stash@{2}%Creset %Cgreen(%cr)%Creset %s' stash@{2}
	stashl4 = log1 --pretty=tformat:'%C(cyan)stash@{3}%Creset %Cgreen(%cr)%Creset %s' stash@{3}
	stashl5 = log1 --pretty=tformat:'%C(cyan)stash@{4}%Creset %Cgreen(%cr)%Creset %s' stash@{4}
	stashl6 = log1 --pretty=tformat:'%C(cyan)stash@{5}%Creset %Cgreen(%cr)%Creset %s' stash@{5}
	stashl7 = log1 --pretty=tformat:'%C(cyan)stash@{6}%Creset %Cgreen(%cr)%Creset %s' stash@{6}
	stashllast = oldeststash-command --keep-position log1 --pretty=tformat:'%C(cyan)STASHREF%Creset %Cgreen(%cr)%Creset %s' STASHREF
	stashlog = stash list --pretty='format:%C(magenta ul)commit %H%Creset%Creset%nAuthor: %aN <%aE>%nDate:   %ad%n%n%w(0,4,4)%s%n%w(0,4,4)%+b%n'
	stashlogselected = selectedstash-command --single-only -2 log1 COMMITS
	stashlogs = stashlogselected
	stashlog1 = log1 stash@{0}
	stashlog2 = log1 stash@{1}
	stashlog3 = log1 stash@{2}
	stashlog4 = log1 stash@{3}
	stashlog5 = log1 stash@{4}
	stashlog6 = log1 stash@{5}
	stashlog7 = log1 stash@{6}
	stashloglast = oldeststash-command log1
	;; stash apply: Apply the topmost stashed commit onto the working copy.
	stashapplyselected = selectedstash-command --single-only -2 stash-apply COMMITS
	stashas = stashapplyselected
	stasha1 = stash-apply stash@{0}
	stasha2 = stash-apply stash@{1}
	stasha3 = stash-apply stash@{2}
	stasha4 = stash-apply stash@{3}
	stasha5 = stash-apply stash@{4}
	stasha6 = stash-apply stash@{5}
	stasha7 = stash-apply stash@{6}
	stashalast = oldeststash-command stash-apply
	;; stash pop: Apply the topmost stashed commit onto the working copy and remove it from the stash.
	stashp = stash-pop
	stashpopselected = selectedstash-command --single-only -2 stash-pop COMMITS
	stashps = stashpopselected
	stashp1 = stash-pop stash@{0}
	stashp2 = stash-pop stash@{1}
	stashp3 = stash-pop stash@{2}
	stashp4 = stash-pop stash@{3}
	stashp5 = stash-pop stash@{4}
	stashp6 = stash-pop stash@{5}
	stashp7 = stash-pop stash@{6}
	stashplast = oldeststash-command stash-pop
	;; diff with stash
	stashdiffselected = selectedstash-command --single-only -3 diff stash COMMITS
	stashds = stashdiffselected
	stashd1 = diff stash@{0}
	stashd2 = diff stash@{1}
	stashd3 = diff stash@{2}
	stashd4 = diff stash@{3}
	stashd5 = diff stash@{4}
	stashd6 = diff stash@{5}
	stashd7 = diff stash@{6}
	stashdlast = oldeststash-command diff
	stashdbselected = selectedstash-command --single-only -3 db stash COMMITS
	stashdbs = stashdbselected
	stashdb1 = db stash@{0}
	stashdb2 = db stash@{1}
	stashdb3 = db stash@{2}
	stashdb4 = db stash@{3}
	stashdb5 = db stash@{4}
	stashdb6 = db stash@{5}
	stashdb7 = db stash@{6}
	stashdblast = oldeststash-command db
	stashdwselected = selectedstash-command --single-only -3 dw stash COMMITS
	stashdws = stashdwselected
	stashdw1 = dw stash@{0}
	stashdw2 = dw stash@{1}
	stashdw3 = dw stash@{2}
	stashdw4 = dw stash@{3}
	stashdw5 = dw stash@{4}
	stashdw6 = dw stash@{5}
	stashdw7 = dw stash@{6}
	stashdwlast = oldeststash-command dw
	stashdcselected = selectedstash-command --single-only -3 dc stash COMMITS
	stashdcs = stashdcselected
	stashdc1 = dc stash@{0}
	stashdc2 = dc stash@{1}
	stashdc3 = dc stash@{2}
	stashdc4 = dc stash@{3}
	stashdc5 = dc stash@{4}
	stashdc6 = dc stash@{5}
	stashdc7 = dc stash@{6}
	stashdclast = oldeststash-command dc
	stashdaselected = selectedstash-command --single-only -3 da stash COMMITS
	stashdas = stashdaselected
	stashda1 = da stash@{0}
	stashda2 = da stash@{1}
	stashda3 = da stash@{2}
	stashda4 = da stash@{3}
	stashda5 = da stash@{4}
	stashda6 = da stash@{5}
	stashda7 = da stash@{6}
	stashdalast = oldeststash-command da
	stashdyselected = selectedstash-command --single-only -3 dy stash COMMITS
	stashdys = stashdyselected
	stashdy1 = dy stash@{0}
	stashdy2 = dy stash@{1}
	stashdy3 = dy stash@{2}
	stashdy4 = dy stash@{3}
	stashdy5 = dy stash@{4}
	stashdy6 = dy stash@{5}
	stashdy7 = dy stash@{6}
	stashdylast = oldeststash-command dy
	stashd-yselected = selectedstash-command --single-only -3 d-y stash COMMITS
	stashd-ys = stashd-yselected
	stashd-y1 = d-y stash@{0}
	stashd-y2 = d-y stash@{1}
	stashd-y3 = d-y stash@{2}
	stashd-y4 = d-y stash@{3}
	stashd-y5 = d-y stash@{4}
	stashd-y6 = d-y stash@{5}
	stashd-y7 = d-y stash@{6}
	stashd-ylast = oldeststash-command d-y
	;; stash drop: Remove a single stash.
	stashdropselected = selectedstash-command --single-only -3 stash drop COMMITS
	stashdrs = stashdropselected
	stashdr1 = stash drop stash@{0}
	stashdr2 = stash drop stash@{1}
	stashdr3 = stash drop stash@{2}
	stashdr4 = stash drop stash@{3}
	stashdr5 = stash drop stash@{4}
	stashdr6 = stash drop stash@{5}
	stashdr7 = stash drop stash@{6}
	stashdrlast = oldeststash-command stash drop
	;; stash clear: Throw away all stashes.
	;; stash dp: Show diff of stashed commit (stashed index and working copy changes combined).
	stashdpselected = selectedstash-command --single-only -5 exec git stash show COMMITS	; Note: Need to bypass git-wrapper here.
	stashdps = stashdpselected
	stashdp1 = stash show stash@{0}
	stashdp2 = stash show stash@{1}
	stashdp3 = stash show stash@{2}
	stashdp4 = stash show stash@{3}
	stashdp5 = stash show stash@{4}
	stashdp6 = stash show stash@{5}
	stashdp7 = stash show stash@{6}
	stashdplast = oldeststash-command stash show
	;; stash show: Show message and diff of stashed commit (separately for stashed index and working copy changes).
	stashshowselected = selectedstash-command --single-only -2 stash-show COMMITS
	stashss = stashshowselected
	stashs1 = stash-show stash@{0}
	stashs2 = stash-show stash@{1}
	stashs3 = stash-show stash@{2}
	stashs4 = stash-show stash@{3}
	stashs5 = stash-show stash@{4}
	stashs6 = stash-show stash@{5}
	stashs7 = stash-show stash@{6}
	stashslast = oldeststash-command stash-show
	;; stash files: Show the files modified in the stashed commit.
	stashfilesselected = selectedstash-command --single-only -2 showfiles COMMITS
	stashfiles1 = showfiles stash@{0}
	stashfiles2 = showfiles stash@{1}
	stashfiles3 = showfiles stash@{2}
	stashfiles4 = showfiles stash@{3}
	stashfiles5 = showfiles stash@{4}
	stashfiles6 = showfiles stash@{5}
	stashfiles7 = showfiles stash@{6}
	stashfileslast = oldeststash-command showfiles
	;; stash rename: Rename the message for the last / passed stash reference.
	stashrenameselected = selectedstash-command --single-only -2 stash-rename COMMITS
	stashr1 = stash-rename stash@{0}
	stashr2 = stash-rename stash@{1}
	stashr3 = stash-rename stash@{2}
	stashr4 = stash-rename stash@{3}
	stashr5 = stash-rename stash@{4}
	stashr6 = stash-rename stash@{5}
	stashr7 = stash-rename stash@{6}
	stashrlast = oldeststash-command stash-rename
	; Source: http://stackoverflow.com/questions/1360712/git-stash-cannot-apply-to-a-dirty-working-tree-please-stage-your-changes
	;; stash-pop-to-dirty: Force application of stash to dirty working copy when "stash pop" complains.
	stashpd = stash-pop-to-dirty
	stash-pop-to-dirty-selected = selectedstash-command --single-only -2 stash-pop-to-dirty COMMITS
	stashpds = stash-pop-to-dirty-selected
	stashpd1 = stash-pop-to-dirty stash@{0}
	stashpd2 = stash-pop-to-dirty stash@{1}
	stashpd3 = stash-pop-to-dirty stash@{2}
	stashpd4 = stash-pop-to-dirty stash@{3}
	stashpd5 = stash-pop-to-dirty stash@{4}
	stashpd6 = stash-pop-to-dirty stash@{5}
	stashpd7 = stash-pop-to-dirty stash@{6}
	stashpdlast = oldeststash-command stash-pop-to-dirty
	;; stash-apply-to-dirty: Force application of stash to dirty working copy when "stash apply" complains.
	stashad = stash-apply-to-dirty
	stash-apply-to-dirty-selected = selectedstash-command --single-only -2 stash-apply-to-dirty COMMITS
	stashads = stash-apply-to-dirty-selected
	stashad1 = stash-apply-to-dirty stash@{0}
	stashad2 = stash-apply-to-dirty stash@{1}
	stashad3 = stash-apply-to-dirty stash@{2}
	stashad4 = stash-apply-to-dirty stash@{3}
	stashad5 = stash-apply-to-dirty stash@{4}
	stashad6 = stash-apply-to-dirty stash@{5}
	stashad7 = stash-apply-to-dirty stash@{6}
	stashadlast = oldeststash-command stash-apply-to-dirty

	;; stash-snapshot: Stash the current changes as a backup and keep them in the working copy, too.
	stashs = stash-snapshot
	stashsi = stash-snapshot --staged	; Stash the current index as a backup and keep them in the index, too.
	stashsh = stash-snapshow --patch	; Interactively pick and stash individual hunks changed in the working copy as a backup and keep them in the working copy, too.

	;; stash-join: Join the last two / N stashes together into a single one.
	;; stash-to-branch: Stash the changes in a dirty working directory in a new branch.
	;; autostash: Automatically create a temporary stash before executing "git SIMPLECOMMAND" and/or COMMANDLINE (which probably contains Git command(s)), and apply and remove the stash after that operation ends. This means that you can run Git commands that otherwise would complain on a dirty worktree.
	;; swaplast: Swap the last and one-before-last commits.

	;; sync: Synchronize the local repository with the major remotes.

	n = notes show ; List annotations for HEAD / passed ref.
	ne = notes edit ; Edit / add annotations for existing commits. They don't change the history, and are local to a repo.
	; Source: http://git-scm.com/blog/2010/08/25/notes.html
	onotepush = remote-mutate origin --message 'Push notes' push origin refs/notes/* ; notes are implemented as references, and must be pushed to share them.
	unotepush = remote-mutate upstream --mesage 'Push notes' push upstream refs/notes/* ; notes are implemented as references, and must be pushed to share them.
	onotefetch = fetch origin refs/notes/*:refs/notes/* ; get notes from origin
	unotefetch = fetch upstream refs/notes/*:refs/notes/* ; get notes from upstream
	; To make the fetch automatic, add the following to .git/config:
	; [remote "origin"]
	; 	fetch = +refs/notes/*:refs/notes/*

	; tags how-to:
	;	1. Add a new tag for the newest stable release: git tag -a v0.5 -m "Version 0.5 Stable"
	;	2. Push the latest tag to GitHub: git push --tags
	; Optional:
	;	3. Delete the v0.4 tag locally: git tag -d v0.4
	;	4. Delete the v0.4 tag on GitHub (which removes its download link): git push origin :v0.4
	;; tag-version: Create an annotated tag, mostly used for official releases.

	;; cd: Change into the root directory of this Git working copy.
	;; root: Show root dir of this Git working copy. / Execute "git SIMPLECOMMAND" and/or COMMANDLINE (which probably contains Git command(s)) in the root directory of this Git working copy.
	;; relative: Show relative path of the CWD / passed DIR|FILE in relation to its Git working copy root.
	;; exec: Execute a shell command; useful for e.g. *do commands that take a git SIMPLECOMMAND.
	;; inside: Execute COMMAND (which probably contains Git command(s)) inside the working copy that FILE resides in. (Most Git commands only work from within the working copy.)
	;; wcname: Show the name of the working copy.
	;; wcdo-core: Execute "git SIMPLECOMMAND" and/or COMMANDLINE on each passed WORKING-COPY.
	;; wcdo: Execute "git SIMPLECOMMAND" and/or COMMANDLINE on each passed WORKING-COPY, with special synthesized commands.
	;; wc-with-suffix-do: Like wcdo, but also work on clones or worktrees that sit next to the working copy.
	;; wcs-in-dir-do: Execute "git SIMPLECOMMAND" and/or COMMANDLINE on all repositories found in passed DIRSPECs.
	;; sh:  Enter a bunch of git commands interactively.
	;; shell: Launch an interactive shell. That alone wouldn't be very interesting, but it's valuable in combination with git-wcdo and the selective invocation based on the provided options.
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git ; Fire up a git daemon for the repo you are currently in.
	;; worktree: Use parallel checkouts of <repository> in <path> (without having to push or pull!)
	; Source: /usr/share/doc/git-core/contrib/workdir/git-new-workdir
	export = archive
	;; export: git export -o latest.zip HEAD
	;; export: git export --format=tar --prefix=project-1.4.0/ v1.4.0 | gzip > project-1.4.0.tar.gz
	;; optimize: Reduce occupied disk space of the GIT_DIR by pruning and then garbage-collecting refs.

	;; whois: Look up person by name or email address.

	;; whocreated: Show who did the initial commit for FILE(s) (grouped by author, or with --summary a count and percentage distribution of who contributed how many FILEs)
	whocreatedst = stfiles-command whocreated
	whocreatedi = stifiles-command whocreated
	whocreated-i = stIfiles-command whocreated
	whocreatedlast = showfiles-command whocreated
	whocreatedovertime = pasttimes-command -2 whocreated PASTTIMES
	whocreatedovertimest = stfiles-command pasttimes-command -2 whocreated PASTTIMES
	whocreatedovertimei = stifiles-command pasttimes-command -2 whocreated PASTTIMES
	whocreatedovertime-i = stIfiles-command pasttimes-command -2 whocreated PASTTIMES
	whocreatedovertimelast = showfiles-command pasttimes-command -2 whocreated PASTTIMES
	whocreatedoverweeks = pasttimes-command --weekly -2 whocreated PASTTIMES
	whocreatedoverweeksst = stfiles-command pasttimes-command --weekly -2 whocreated PASTTIMES
	whocreatedoverweeksi = stifiles-command pasttimes-command --weekly -2 whocreated PASTTIMES
	whocreatedoverweeks-i = stIfiles-command pasttimes-command --weekly -2 whocreated PASTTIMES
	whocreatedoverweekslast = showfiles-command pasttimes-command --weekly -2 whocreated PASTTIMES
	whocreatedovermonths = pasttimes-command --monthly -2 whocreated PASTTIMES
	whocreatedovermonthsst = stfiles-command pasttimes-command --monthly -2 whocreated PASTTIMES
	whocreatedovermonthsi = stifiles-command pasttimes-command --monthly -2 whocreated PASTTIMES
	whocreatedovermonths-i = stIfiles-command pasttimes-command --monthly -2 whocreated PASTTIMES
	whocreatedovermonthslast = showfiles-command pasttimes-command --monthly -2 whocreated PASTTIMES
	whocreatedoveryears = pasttimes-command --yearly -2 whocreated PASTTIMES
	whocreatedoveryearsst = stfiles-command pasttimes-command --yearly -2 whocreated PASTTIMES
	whocreatedoveryearsi = stifiles-command pasttimes-command --yearly -2 whocreated PASTTIMES
	whocreatedoveryears-i = stIfiles-command pasttimes-command --yearly -2 whocreated PASTTIMES
	whocreatedoveryearslast = showfiles-command pasttimes-command --yearly -2 whocreated PASTTIMES

	;; wholasttouched: Show who last committed FILE(s) grouped by author.
	wholasttouchedst = stfiles-command wholasttouched
	wholasttouchedi = stifiles-command wholasttouched
	wholasttouched-i = stIfiles-command wholasttouched
	wholasttouchedlast = showfiles-command wholasttouched
	wholasttouchedovertime = pasttimes-command -2 wholasttouched PASTTIMES
	wholasttouchedovertimest = stfiles-command pasttimes-command -2 wholasttouched PASTTIMES
	wholasttouchedovertimei = stifiles-command pasttimes-command -2 wholasttouched PASTTIMES
	wholasttouchedovertime-i = stIfiles-command pasttimes-command -2 wholasttouched PASTTIMES
	wholasttouchedovertimelast = showfiles-command pasttimes-command -2 wholasttouched PASTTIMES
	wholasttouchedoverweeks = pasttimes-command --weekly -2 wholasttouched PASTTIMES
	wholasttouchedoverweeksst = stfiles-command pasttimes-command --weekly -2 wholasttouched PASTTIMES
	wholasttouchedoverweeksi = stifiles-command pasttimes-command --weekly -2 wholasttouched PASTTIMES
	wholasttouchedoverweeks-i = stIfiles-command pasttimes-command --weekly -2 wholasttouched PASTTIMES
	wholasttouchedoverweekslast = showfiles-command pasttimes-command --weekly -2 wholasttouched PASTTIMES
	wholasttouchedovermonths = pasttimes-command --monthly -2 wholasttouched PASTTIMES
	wholasttouchedovermonthsst = stfiles-command pasttimes-command --monthly -2 wholasttouched PASTTIMES
	wholasttouchedovermonthsi = stifiles-command pasttimes-command --monthly -2 wholasttouched PASTTIMES
	wholasttouchedovermonths-i = stIfiles-command pasttimes-command --monthly -2 wholasttouched PASTTIMES
	wholasttouchedovermonthslast = showfiles-command pasttimes-command --monthly -2 wholasttouched PASTTIMES
	wholasttouchedoveryears = pasttimes-command --yearly -2 wholasttouched PASTTIMES
	wholasttouchedoveryearsst = stfiles-command pasttimes-command --yearly -2 wholasttouched PASTTIMES
	wholasttouchedoveryearsi = stifiles-command pasttimes-command --yearly -2 wholasttouched PASTTIMES
	wholasttouchedoveryears-i = stIfiles-command pasttimes-command --yearly -2 wholasttouched PASTTIMES
	wholasttouchedoveryearslast = showfiles-command pasttimes-command --yearly -2 wholasttouched PASTTIMES

	;; whodid: Show log grouped by name and sorted by the number of their commits.
	whodidf = whodid --first-parent
	whodidst = stfiles-command whodid
	whodidi = stifiles-command whodid
	whodid-i = stIfiles-command whodid
	whodidlast = showfiles-command whodid
	whodidovertime = pasttimes-command -2 whodid PASTTIMES
	whodidovertimest = stfiles-command pasttimes-command -2 whodid PASTTIMES
	whodidovertimei = stifiles-command pasttimes-command -2 whodid PASTTIMES
	whodidovertime-i = stIfiles-command pasttimes-command -2 whodid PASTTIMES
	whodidovertimelast = showfiles-command pasttimes-command -2 whodid PASTTIMES
	whodidoverweeks = pasttimes-command --weekly -2 whodid PASTTIMES
	whodidoverweeksst = stfiles-command pasttimes-command --weekly -2 whodid PASTTIMES
	whodidoverweeksi = stifiles-command pasttimes-command --weekly -2 whodid PASTTIMES
	whodidoverweeks-i = stIfiles-command pasttimes-command --weekly -2 whodid PASTTIMES
	whodidoverweekslast = showfiles-command pasttimes-command --weekly -2 whodid PASTTIMES
	whodidovermonths = pasttimes-command --monthly -2 whodid PASTTIMES
	whodidovermonthsst = stfiles-command pasttimes-command --monthly -2 whodid PASTTIMES
	whodidovermonthsi = stifiles-command pasttimes-command --monthly -2 whodid PASTTIMES
	whodidovermonths-i = stIfiles-command pasttimes-command --monthly -2 whodid PASTTIMES
	whodidovermonthslast = showfiles-command pasttimes-command --monthly -2 whodid PASTTIMES
	whodidoveryears = pasttimes-command --yearly -2 whodid PASTTIMES
	whodidoveryearsst = stfiles-command pasttimes-command --yearly -2 whodid PASTTIMES
	whodidoveryearsi = stifiles-command pasttimes-command --yearly -2 whodid PASTTIMES
	whodidoveryears-i = stIfiles-command pasttimes-command --yearly -2 whodid PASTTIMES
	whodidoveryearslast = showfiles-command pasttimes-command --yearly -2 whodid PASTTIMES

	;; whog: Show log grouped by name and sorted by the number of their commits where log messages match the specified text or /regexp/.
	;; whochanged: Show log grouped by name and sorted by the number of their commits where there's an actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	;; whotouched: Show log grouped by name and sorted by the number of their commits where lines matching text or /regexp/ that just were somehow modified.

	;; whoowns: Show statistics on how many lines were last changed (based on a blame) by which author.
	whoownsst = stfiles-command whoowns
	whoownsi = stifiles-command whoowns
	whoowns-i = stIfiles-command whoowns
	whoownslast = showfiles-command whoowns

	;; whocontributed: Show author names sorted by the total size of the diffs (over the whole history / <revision range>) they're responsible for.
	whocontributedst = stfiles-command whocontributed
	whocontributedi = stifiles-command whocontributed
	whocontributed-i = stIfiles-command whocontributed
	whocontributedlast = showfiles-command whocontributed
	whocontributedovertime = pasttimes-command -2 whocontributed PASTTIMES
	whocontributedovertimest = stfiles-command pasttimes-command -2 whocontributed PASTTIMES
	whocontributedovertimei = stifiles-command pasttimes-command -2 whocontributed PASTTIMES
	whocontributedovertime-i = stIfiles-command pasttimes-command -2 whocontributed PASTTIMES
	whocontributedovertimelast = showfiles-command pasttimes-command -2 whocontributed PASTTIMES
	whocontributedoverweeks = pasttimes-command --weekly -2 whocontributed PASTTIMES
	whocontributedoverweeksst = stfiles-command pasttimes-command --weekly -2 whocontributed PASTTIMES
	whocontributedoverweeksi = stifiles-command pasttimes-command --weekly -2 whocontributed PASTTIMES
	whocontributedoverweeks-i = stIfiles-command pasttimes-command --weekly -2 whocontributed PASTTIMES
	whocontributedoverweekslast = showfiles-command pasttimes-command --weekly -2 whocontributed PASTTIMES
	whocontributedovermonths = pasttimes-command --monthly -2 whocontributed PASTTIMES
	whocontributedovermonthsst = stfiles-command pasttimes-command --monthly -2 whocontributed PASTTIMES
	whocontributedovermonthsi = stifiles-command pasttimes-command --monthly -2 whocontributed PASTTIMES
	whocontributedovermonths-i = stIfiles-command pasttimes-command --monthly -2 whocontributed PASTTIMES
	whocontributedovermonthslast = showfiles-command pasttimes-command --monthly -2 whocontributed PASTTIMES
	whocontributedoveryears = pasttimes-command --yearly -2 whocontributed PASTTIMES
	whocontributedoveryearsst = stfiles-command pasttimes-command --yearly -2 whocontributed PASTTIMES
	whocontributedoveryearsi = stifiles-command pasttimes-command --yearly -2 whocontributed PASTTIMES
	whocontributedoveryears-i = stIfiles-command pasttimes-command --yearly -2 whocontributed PASTTIMES
	whocontributedoveryearslast = showfiles-command pasttimes-command --yearly -2 whocontributed PASTTIMES

	;; whowhat: Show who created and last committed the FILE(s), did the most commits to them, currently have last changed how many lines, and did how many total changes over their history.
	whowhatst = stfiles-command whowhat
	whowhati = stifiles-command whowhat
	whowhat-i = stIfiles-command whowhat
	whowhatlast = showfiles-command whowhat
	whowhatovertime = pasttimes-command -2 whowhat PASTTIMES
	whowhatovertimest = stfiles-command pasttimes-command -2 whowhat PASTTIMES
	whowhatovertimei = stifiles-command pasttimes-command -2 whowhat PASTTIMES
	whowhatovertime-i = stIfiles-command pasttimes-command -2 whowhat PASTTIMES
	whowhatovertimelast = showfiles-command pasttimes-command -2 whowhat PASTTIMES
	whowhatoverweeks = pasttimes-command --weekly -2 whowhat PASTTIMES
	whowhatoverweeksst = stfiles-command pasttimes-command --weekly -2 whowhat PASTTIMES
	whowhatoverweeksi = stifiles-command pasttimes-command --weekly -2 whowhat PASTTIMES
	whowhatoverweeks-i = stIfiles-command pasttimes-command --weekly -2 whowhat PASTTIMES
	whowhatoverweekslast = showfiles-command pasttimes-command --weekly -2 whowhat PASTTIMES
	whowhatovermonths = pasttimes-command --monthly -2 whowhat PASTTIMES
	whowhatovermonthsst = stfiles-command pasttimes-command --monthly -2 whowhat PASTTIMES
	whowhatovermonthsi = stifiles-command pasttimes-command --monthly -2 whowhat PASTTIMES
	whowhatovermonths-i = stIfiles-command pasttimes-command --monthly -2 whowhat PASTTIMES
	whowhatovermonthslast = showfiles-command pasttimes-command --monthly -2 whowhat PASTTIMES
	whowhatoveryears = pasttimes-command --yearly -2 whowhat PASTTIMES
	whowhatoveryearsst = stfiles-command pasttimes-command --yearly -2 whowhat PASTTIMES
	whowhatoveryearsi = stifiles-command pasttimes-command --yearly -2 whowhat PASTTIMES
	whowhatoveryears-i = stIfiles-command pasttimes-command --yearly -2 whowhat PASTTIMES
	whowhatoveryearslast = showfiles-command pasttimes-command --yearly -2 whowhat PASTTIMES

	;; whowhen: Show the earliest and latest commit dates (descending, starting with longest commit timespans) by name.
	whowhenst = stfiles-command whowhen
	whowheni = stifiles-command whowhen
	whowhen-i = stIfiles-command whowhen
	whowhenlast = showfiles-command whowhen
	minewhen = mine-command -2 whowhen ME	; Strictly: whowhenmine
	minewhenst = stfiles-command minewhen
	minewheni = stifiles-command minewhen
	minewhen-i = stIfiles-command minewhen
	minewhenlast = showfiles-command minewhen
	otherswhen = others-command -2 whowhen OTHERS	; Strictly: whowhenothers
	otherswhenst = stfiles-command otherswhen
	otherswheni = stifiles-command otherswhen
	otherswhen-i = stIfiles-command otherswhen
	otherswhenlast = showfiles-command otherswhen
	teamwhen = team-command -2 whowhen TEAM	; Strictly: whowhenteam
	teamwhenst = stfiles-command teamwhen
	teamwheni = stifiles-command teamwhen
	teamwhen-i = stIfiles-command teamwhen
	teamwhenlast = showfiles-command teamwhen
	whowhenby = dashdash-default-command --with-files : authors-command -2 whowhen AUTHORS :
	whowhenbyst = stfiles-command whowhenby
	whowhenbyi = stifiles-command whowhenby
	whowhenby-i = stIfiles-command whowhenby
	whowhenbylast = showfiles-command whowhenby

	whofirst = whowhen --first	;; Show the earliest commit dates (descending, starting with oldest commits) by name.
	whofirstst = stfiles-command whowhen --first
	whofirsti = stifiles-command whowhen --first
	whofirst-i = stIfiles-command whowhen --first
	whofirstlast = showfiles-command whowhen --first
	minefirst = mine-command -3 whowhen --first ME	; Strictly: whofirstmine
	minefirstst = stfiles-command minefirst
	minefirsti = stifiles-command minefirst
	minefirst-i = stIfiles-command minefirst
	minefirstlast = showfiles-command minefirst
	othersfirst = others-command -3 whowhen --first OTHERS	; Strictly: whofirstothers
	othersfirstst = stfiles-command othersfirst
	othersfirsti = stifiles-command othersfirst
	othersfirst-i = stIfiles-command othersfirst
	othersfirstlast = showfiles-command othersfirst
	teamfirst = team-command -3 whowhen --first TEAM	; Strictly: whofirstteam
	teamfirstst = stfiles-command teamfirst
	teamfirsti = stifiles-command teamfirst
	teamfirst-i = stIfiles-command teamfirst
	teamfirstlast = showfiles-command teamfirst
	whofirstby = dashdash-default-command --with-files : authors-command -3 whowhen --first AUTHORS :
	whofirstbyst = stfiles-command whofirstby
	whofirstbyi = stifiles-command whofirstby
	whofirstby-i = stIfiles-command whofirstby
	whofirstbylast = showfiles-command whofirstby

	wholast = whowhen --last	;; Show the latest commit dates (descending, starting with oldest commits) by name.
	wholastst = stfiles-command whowhen --last
	wholasti = stifiles-command whowhen --last
	wholast-i = stIfiles-command whowhen --last
	wholastlast = showfiles-command whowhen --last
	minelast = mine-command -3 whowhen --last ME	; Strictly: wholastmine
	minelastst = stfiles-command minelast
	minelasti = stifiles-command minelast
	minelast-i = stIfiles-command minelast
	minelastlast = showfiles-command minelast
	otherslast = others-command -3 whowhen --last OTHERS	; Strictly: wholastothers
	otherslastst = stfiles-command otherslast
	otherslasti = stifiles-command otherslast
	otherslast-i = stIfiles-command otherslast
	otherslastlast = showfiles-command otherslast
	teamlast = team-command -3 whowhen --last TEAM	; Strictly: wholastteam
	teamlastst = stfiles-command teamlast
	teamlasti = stifiles-command teamlast
	teamlast-i = stIfiles-command teamlast
	teamlastlast = showfiles-command teamlast
	wholastby = dashdash-default-command --with-files : authors-command -3 whowhen --last AUTHORS :
	wholastbyst = stfiles-command wholastby
	wholastbyi = stifiles-command wholastby
	wholastby-i = stIfiles-command wholastby
	wholastbylast = showfiles-command wholastby

	;; whoworkedonthebranch: Print the creator, other authors, and the last author for the current / passed BRANCH while dropping duplicates.

	;; relatedfiles: Show files that often get changed in commits that modify files in <path> / the files affected by <commit>, and the correlation between the commits; 100% means an affected file is included in every commit that touches a passed file; 0% means it's included in less than one commit out of hundred.
	relatedfilesst = stfiles-command relatedfiles
	relatedfilesi = stifiles-command relatedfiles
	relatedfiles-i = stIfiles-command relatedfiles
	relatedfileslast = showfiles-command relatedfiles
	relatedfilesmine = mine-command -2 relatedfiles ME
	relatedfilesminest = stfiles-command relatedfilesmine
	relatedfilesminei = stifiles-command relatedfilesmine
	relatedfilesmine-i = stIfiles-command relatedfilesmine
	relatedfilesminelast = showfiles-command relatedfilesmine
	relatedfilesothers = others-command -2 relatedfiles OTHERS
	relatedfilesothersst = stfiles-command relatedfilesothers
	relatedfilesothersi = stifiles-command relatedfilesothers
	relatedfilesothers-i = stIfiles-command relatedfilesothers
	relatedfilesotherslast = showfiles-command relatedfilesothers
	relatedfilesteam = team-command -2 relatedfiles TEAM
	relatedfilesteamst = stfiles-command relatedfilesteam
	relatedfilesteami = stifiles-command relatedfilesteam
	relatedfilesteam-i = stIfiles-command relatedfilesteam
	relatedfilesteamlast = showfiles-command relatedfilesteam
	relatedfilesby = dashdash-default-command --with-files : authors-command -2 relatedfiles AUTHORS :
	relatedfilesbyst = stfiles-command relatedfilesby
	relatedfilesbyi = stifiles-command relatedfilesby
	relatedfilesby-i = stIfiles-command relatedfilesby
	relatedfilesbylast = showfiles-command relatedfilesby
	relatedfilesexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 relatedfiles AUTHORS :
	relatedfilesexceptbyst = stfiles-command relatedfilesexceptby
	relatedfilesexceptbyi = stifiles-command relatedfilesexceptby
	relatedfilesexceptby-i = stIfiles-command relatedfilesexceptby
	relatedfilesexceptbylast = showfiles-command relatedfilesexceptby

	;; logoffiles: Show a log of commits that cover (at least partially) the files in <path> / the files affected by <commit>.
	;; logofrelatedfiles: Show log of commits that modify files that often get changed in commits that modify files in <path> / the files affected by <commit>.

	;; churn: Show sorted number of changes per file; arguments as to git log, e.g. --since="1 month ago" subdir
	churnst = stfiles-command churn
	churni = stifiles-command churn
	churn-i = stIfiles-command churn
	churnlast = showfiles-command churn

	;; activity: Prints a summary of contributions in the repository.
	activityst = stfiles-command activity
	activityi = stifiles-command activity
	activity-i = stIfiles-command activity
	activitylast = showfiles-command activity
	activitymine = mine-command -2 activity ME
	activityminest = stfiles-command activitymine
	activityminei = stifiles-command activitymine
	activitymine-i = stIfiles-command activitymine
	activityminelast = showfiles-command activitymine
	activityothers = others-command -2 activity OTHERS
	activityothersst = stfiles-command activityothers
	activityothersi = stifiles-command activityothers
	activityothers-i = stIfiles-command activityothers
	activityotherslast = showfiles-command activityothers
	activityteam = team-command -2 activity TEAM
	activityteamst = stfiles-command activityteam
	activityteami = stifiles-command activityteam
	activityteam-i = stIfiles-command activityteam
	activityteamlast = showfiles-command activityteam
	activityby = dashdash-default-command --with-files : authors-command -2 activity AUTHORS :
	activitybyst = stfiles-command activityby
	activitybyi = stifiles-command activityby
	activityby-i = stIfiles-command activityby
	activitybylast = showfiles-command activityby
	activityexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 activity AUTHORS :
	activityexceptbyst = stfiles-command activityexceptby
	activityexceptbyi = stifiles-command activityexceptby
	activityexceptby-i = stIfiles-command activityexceptby
	activityexceptbylast = showfiles-command activityexceptby

	;; logdistribution: Print the distribution of the number of commits that fall into the logged range.
	logdistributionst = stfiles-command logdistribution
	logdistributioni = stifiles-command logdistribution
	logdistribution-i = stIfiles-command logdistribution
	logdistributionlast = showfiles-command logdistribution
	logdistributionmine = mine-command -2 logdistribution ME
	logdistributionminest = stfiles-command logdistributionmine
	logdistributionminei = stifiles-command logdistributionmine
	logdistributionmine-i = stIfiles-command logdistributionmine
	logdistributionminelast = showfiles-command logdistributionmine
	logdistributionothers = others-command -2 logdistribution OTHERS
	logdistributionothersst = stfiles-command logdistributionothers
	logdistributionothersi = stifiles-command logdistributionothers
	logdistributionothers-i = stIfiles-command logdistributionothers
	logdistributionotherslast = showfiles-command logdistributionothers
	logdistributionteam = team-command -2 logdistribution TEAM
	logdistributionteamst = stfiles-command logdistributionteam
	logdistributionteami = stifiles-command logdistributionteam
	logdistributionteam-i = stIfiles-command logdistributionteam
	logdistributionteamlast = showfiles-command logdistributionteam
	logdistributionby = dashdash-default-command --with-files : authors-command -2 logdistribution AUTHORS :
	logdistributionbyst = stfiles-command logdistributionby
	logdistributionbyi = stifiles-command logdistributionby
	logdistributionby-i = stIfiles-command logdistributionby
	logdistributionbylast = showfiles-command logdistributionby
	logdistributionexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 logdistribution AUTHORS :
	logdistributionexceptbyst = stfiles-command logdistributionexceptby
	logdistributionexceptbyi = stifiles-command logdistributionexceptby
	logdistributionexceptby-i = stIfiles-command logdistributionexceptby
	logdistributionexceptbylast = showfiles-command logdistributionexceptby

	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short	; Print info about hash or commit name.

	;; logstat: Generate a combined diffstat for all logged commits; "git log --stat" will produce a separate diffstat for each commit; "git diff --stat" can only cover successive commits.
	logsta = logstat --shortstat
	logstatbyeach = segregated-user-command --with-header --log-args-for-range -2 logstat USERFILTER	; Show a combined diffstat for each user that authored commits separately.
	;; logstabyeach: Show a combined short one-line diffstat for each user that authored commits separately (descending by impact, starting with the most changes).
	;; turmoil: Sort a Git log that includes a --shortstat containing line(s) with the total number of modified files, as well as number of added and deleted lines descending by impact, starting with the entries having the most changes.

	;; whatdid: Summarizes commit title prefixes (like "Refactoring:") that appear at the beginning, according to frequency in the passed commit range.
	;; commitkeywordtally: Report counts and percentages of commit message keywords or scopes from the log input.
	;; comittaskidtally: Report counts and percentages of external task IDs at the beginning of the commit summary from the log input.
	;; devstat: Collect statistics about contributions to the current / iterated by GIT-ITERATOR-COMMAND Git repositories.
	devstatmine = mine-command -3 devstat --resolved-authors ME
	devstatothers = others-command -3 devstat --resolved-authors OTHERS
	devstatteam = team-command -3 devstat --resolved-authors TEAM
	devstatby = dashdash-default-command --with-files : authors-command -3 devstat --resolved-authors AUTHORS :


	;; customtool: Permanently set / execute remaining arguments with temporary diff.tool / merge.tool set to <toolname>.
	d = diff    ; ... unstaged changes in working copy.
	dfiles = diff --name-only
	dsta = diff --shortstat
	dstas = diffselected --shortstat
	dstat = diff --stat --compact-summary
	dstats = diffselected --stat --compact-summary
	dstatmine = mine-command -2 logstatbyeach ME
	dstatothers = others-command -2 logstatbyeach OTHERS
	dstatteam = team-command -2 logstatbyeach TEAM
	dstatby = dashdash-default-command --with-files : authors-command -2 logstatbyeach AUTHORS :	; Show a diffstat of the combined commits for each passed or queried user(s).
	dstaby = dashdash-default-command --with-files : authors-command -2 logstabyeach AUTHORS :	; Show a short one-line diffstat of the combined commits for each passed or queried user(s).

	;; dl: Show separate diff of each file (instead of concatenating all changes), paged through with less.
	dt = difftool
	dts = difftoolselected
	dts1 = dts 1
	dts2 = dts 2
	dts3 = dts 3
	dts4 = dts 4
	dts5 = dts 5
	dts6 = dts 6
	dts7 = dts 7
	dtsx = dts 12
	dtsq = dts 25
	dtsz = dts 100

	; Note: Also add git-dp* and git-diffuntil* wrapper scripts, diffwith* and a [difftool "diff*"] section.
	;; db: bare / basic diff without diff beautification (through delta)
	;; diffbin: diff of hexdump (for binary files, without having to use gitattributes to set a diff driver); can also be used as a difftool
	;; diffc: context diff; can also be used as a difftool
	;; diffe: effective diff that just shows net lines added / removed; can also be used as a difftool
	diffea = diffe --added	; effective diff that just shows net lines added; can also be used as a difftool
	diffed = diffe --deleted	; effective diff that just shows net lines removed; can also be used as a difftool
	;; diffws: unified diff with translated whitespace characters; can also be used as a difftool
	diffy = diffY --suppress-common-lines	; side-by-side diff; can also be used as a difftool
	;; diffY: side-by-side diff of the complete files; can also be used as a difftool
	diffwithdiffc = customtool diff.tool diffc
	diffwithdiffe = customtool diff.tool diffe
	diffwithdiffea = customtool diff.tool diffea
	diffwithdiffed = customtool diff.tool diffead
	diffwithdiffws = customtool diff.tool diffws
	diffwithdiffy = customtool diff.tool diffy
	diffwithdiff-y = customtool diff.tool diffY
	dw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words	; use word-based (not line-based) diff granularity
	dc = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=.	; use character-based diff granularity
	da = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]]	; use alnum-based diff granularity
	dy = diffy
	d-y = diffY
	;; annotatediff: Annotate changed lines between commits, commit and working tree, etc. Combination of diff with blame of the resulting lines.
	ad = annotatediff
	;; overwritten: Show aggregate blame information of lines that have been changed between commits, commit and working tree, etc. [in FILE ...]
	ov = overwritten
	dr = diff --submodule=diff	; Recursive diff also showing all changes in submodules.
	drl = dl --submodule=diff	; Show recursive diff including submodules, each file separately, paged through with less.
	; dst is the same as d
	; di already exists, but we can use dii (which would be the same as di, anyway) instead.
	dii = stifiles-command d	; diff of currently staged files.
	; d-i would be the same as d, so tweak its meaning:
	d-i = stIwithoutifiles-command d	; diff of currently modified but not staged files that are not also staged.

	;; diffselected: Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to diff by number.
	ds = diffselected
	ds1 = ds 1
	ds2 = ds 2
	ds3 = ds 3
	ds4 = ds 4
	ds5 = ds 5
	ds6 = ds 6
	ds7 = ds 7
	dsx = ds 12
	dsq = ds 25
	dsz = ds 100
	;; dsw: diffselected with word-based (not line-based) diff granularity
	dsw1 = dsw 1
	dsw2 = dsw 2
	dsw3 = dsw 3
	dsw4 = dsw 4
	dsw5 = dsw 5
	dsw6 = dsw 6
	dsw7 = dsw 7
	dswx = dsw 12
	dswq = dsw 25
	dswz = dsw 100
	;; dsc: diffselected with character-based (not line-based) diff granularity
	dsc1 = dsc 1
	dsc2 = dsc 2
	dsc3 = dsc 3
	dsc4 = dsc 4
	dsc5 = dsc 5
	dsc6 = dsc 6
	dsc7 = dsc 7
	dscx = dsc 12
	dscq = dsc 25
	dscz = dsc 100
	;; dsa: diffselected with alnum-based diff granularity
	dsa1 = dsa 1
	dsa2 = dsa 2
	dsa3 = dsa 3
	dsa4 = dsa 4
	dsa5 = dsa 5
	dsa6 = dsa 6
	dsa7 = dsa 7
	dsax = dsa 12
	dsaq = dsa 25
	dsaz = dsa 100
	;; dsy: diffselected side-by-side
	dsy1 = dsy 1
	dsy2 = dsy 2
	dsy3 = dsy 3
	dsy4 = dsy 4
	dsy5 = dsy 5
	dsy6 = dsy 6
	dsy7 = dsy 7
	dsyx = dsy 12
	dsyq = dsy 25
	dsyz = dsy 100
	;; dsY: diffselected side-by-side
	ds-y1 = dsY 1
	ds-y2 = dsY 2
	ds-y3 = dsY 3
	ds-y4 = dsY 4
	ds-y5 = dsY 5
	ds-y6 = dsY 6
	ds-y7 = dsY 7
	ds-yx = dsY 12
	ds-yq = dsY 25
	ds-yz = dsY 100
	;; ads: diffselected with annotation
	;; dun: Show diff of untracked files (i.e. what may be added).
	;; dunl: Show separate diff of each untracked file (instead of concatenating all changes), paged through with less.

	dh = diff HEAD ; ... both staged or unstaged changes since last commit.
	dhsta = dsta HEAD
	dhstas = dstas --revision HEAD
	dhstat = dstat HEAD
	dhstats = dstats --revision HEAD
	dhl = dl HEAD
	dth = difftool HEAD
	dbh = db HEAD
	dhw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words HEAD	; use word-based (not line-based) diff granularity
	dhc = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=. HEAD	; use character-based diff granularity
	dha = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]] HEAD	; use alnum-based diff granularity
	dhy = diffy HEAD
	dh-y = diffY HEAD
	adh = annotatediff HEAD
	ovh = overwritten HEAD
	dhr = diff --submodule=diff HEAD
	dhrl = dl --submodule=diff HEAD
	dhst = stfiles-command dh
	dhi = stifiles-command dh
	dh-i = stIfiles-command dh
	dhlast = showfiles-command dh
	showfilesh = showfiles --to HEAD
	showsubmodulesh = showsubmodules --to HEAD

	dhh = diff HEAD^ ; ... both staged or unstaged changes since second-to-last commit (to check how the commit looks like after adding and amending).
	dhhsta = dsta HEAD^
	dhhstas = dstas --revision HEAD^
	dhhstat = dstat HEAD^
	dhhstats = dstats --revision HEAD^
	dhhl = dl HEAD^
	dthh = difftool HEAD^
	dbhh = db HEAD^
	dhhw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words HEAD^	; use word-based (not line-based) diff granularity
	dhhc = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=. HEAD^	; use character-based diff granularity
	dhha = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]] HEAD^	; use alnum-based diff granularity
	dhhy = diffy HEAD^
	dhh-y = diffY HEAD^
	adhh = annotatediff HEAD^
	ovhh = overwritten HEAD^
	dhhr = diff --submodule=diff HEAD^
	dhhrl = dl --submodule=diff HEAD^
	dhhst = stfiles-command dhh
	dhhi = stifiles-command dhh
	dhh-i = stIfiles-command dhh
	dhhlast = showfiles-command dhh
	showfileshh = showfiles --to HEAD^
	showsubmoduleshh = showsubmodules --to HEAD^

	dih = diff --cached HEAD^ ; ... only staged changes since second-to-last commit (to check how the commit looks like after amending).
	dihsta = dista HEAD^
	dihstas = distas --revision HEAD^
	dihstat = distat HEAD^
	dihstats = distat --revision HEAD^
	dihl = dl --cached HEAD^
	dtih = difftool --cached HEAD^
	dbih = db --cached HEAD^
	dihw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --cached HEAD^	; use word-based (not line-based) diff granularity
	dihc = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=. --cached HEAD^	; use character-based diff granularity
	diha = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]] --cached HEAD^	; use alnum-based diff granularity
	dihy = diffy --cached HEAD^
	dih-y = diffY --cached HEAD^
	adih = annotatediff --cached HEAD^
	ovih = overwritten --cached HEAD^
	dihr = diff --cached --submodule=diff HEAD^
	dihrl = dl --cached --submodule=diff HEAD^
	dihst = stfiles-command dih
	dihi = stifiles-command dih
	dih-i = stIfiles-command dih
	dihlast = showfiles-command dih
	showfilesih = showfiles --cached --to HEAD^
	showsubmodulesih = showsubmodules --cached --to HEAD^

	di = diff --cached ; ... staged changes in the index about to be committed.
	dista = dsta --cached
	distas = dstas --cached
	distat = dstat --cached
	distats = dstats --cached
	dil = dl --cached
	dti = difftool --cached
	dbi = db --cached
	diw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --cached --color-words	; staged changes, use word-based (not line-based) diff granularity
	dic = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --cached --color-words	--word-diff-regex=.	; staged changes, use character-based diff granularity
	dia = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse diff --cached --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]]	; use alnum-based diff granularity
	diy = diffy --cached
	di-y = diffY --cached
	adi = annotatediff --cached
	ovi = overwritten --cached
	dir = diff --cached --submodule=diff	; Recursive diff of staged changes also showing all changes in submodules.
	dirl = dl --cached --submodule=diff
	; dist is the same as di
	; dii is the same as di
	; di-i would never show anything
	dilast = showfiles-command di
	showfilesi = showfiles --cached	; Show the files in the index about to be committed.
	showsubmodulesi = showsubmodules --cached	; Show the submodules in the index about to be committed.

	dis = diffselected --cached
	dis1 = dis 1
	dis2 = dis 2
	dis3 = dis 3
	dis4 = dis 4
	dis5 = dis 5
	dis6 = dis 6
	dis7 = dis 7
	disx = dis 12
	disq = dis 25
	disz = dis 100
	disw = dsw --cached
	disw1 = disw 1
	disw2 = disw 2
	disw3 = disw 3
	disw4 = disw 4
	disw5 = disw 5
	disw6 = disw 6
	disw7 = disw 7
	diswx = disw 12
	diswq = disw 25
	diswz = disw 100
	disc = dsc --cached
	disc1 = disc 1
	disc2 = disc 2
	disc3 = disc 3
	disc4 = disc 4
	disc5 = disc 5
	disc6 = disc 6
	disc7 = disc 7
	discx = disc 12
	discq = disc 25
	discz = disc 100
	disa = dsa --cached
	disa1 = disa 1
	disa2 = disa 2
	disa3 = disa 3
	disa4 = disa 4
	disa5 = disa 5
	disa6 = disa 6
	disa7 = disa 7
	disax = disa 12
	disaq = disa 25
	disaz = disa 100
	disy = dsy --cached
	disy1 = disy 1
	disy2 = disy 2
	disy3 = disy 3
	disy4 = disy 4
	disy5 = disy 5
	disy6 = disy 6
	disyx = disy 12
	disyq = disy 25
	disz = disy 90
	dis-y = dsY --cached
	dis-y1 = disY 1
	dis-y2 = disY 2
	dis-y3 = disY 3
	dis-y4 = disY 4
	dis-y5 = disY 5
	dis-y6 = disY 6
	dis-y7 = disY 7
	dis-yx = disY 12
	dis-yq = disY 25
	dis-yz = disY 100

	;; dp:  ... with predecessor, either current HEAD or passed revision.
	;; dps: Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) by number to diff with predecessor, either current HEAD or passed revision.
	dpsta = dp --shortstat
	dpstas = dps --shortstat
	dpstat = dp --stat --compact-summary
	dpstats = dps --stat --compact-summary
	dpw = dp -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse --color-words	; use word-based (not line-based) diff granularity
	dpc = dp -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse --color-words --word-diff-regex=.	; use character-based diff granularity
	dpa = dp -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]]	; use alnum-based diff granularity
	;; dpl:  ... with predecessor, either current HEAD or passed revision.
	;; dpls: Show separate diff of each file (instead of concatenating all changes) with predecessor [for FILE(s)] for the commit(s) interactively chosen / last commit from the commits [that cover FILE ...] in the passed <range>, paged through with less.
	dpl1 = dpls HEAD~1..
	dpl2 = dpls HEAD~2..
	dpl3 = dpls HEAD~3..
	dpl4 = dpls HEAD~4..
	dpl5 = dpls HEAD~5..
	dpl6 = dpls HEAD~6..
	dpl7 = dpls HEAD~7..
	dplx = dpls HEAD~12..
	dplq = dpls HEAD~25..
	dplz = dpls HEAD~100..
	dplg = selectedgcommit-command --single-only -2 dpl COMMITS
	dplchanged = selectedchangedcommit-command --single-only -2 dpl COMMITS
	dpltouched = selectedtouchedcommit-command --single-only -2 dpl COMMITS
	;; dplss: Show separate diff of each interactively chosen file (instead of concatenating all changes) with predecessor [for FILE(s)] for the commit(s) interactively chosen / last commit from the commits [that cover FILE ...] in the passed <range>, paged through with less.
	dpls1 = dplss HEAD~1..
	dpls2 = dplss HEAD~2..
	dpls3 = dplss HEAD~3..
	dpls4 = dplss HEAD~4..
	dpls5 = dplss HEAD~5..
	dpls6 = dplss HEAD~6..
	dpls7 = dplss HEAD~7..
	dplsx = dplss HEAD~12..
	dplsq = dplss HEAD~25..
	dplsz = dplss HEAD~100..
	dplsg = selectedgcommit-command --pass-file-args -3 dplss --on-revision-selection COMMITS
	dplschanged = selectedchangedcommit-command --pass-file-args -3 dplss --on-revision-selection COMMITS
	dplstouched = selectedtouchedcommit-command --pass-file-args -3 dplss --on-revision-selection COMMITS
	;; dpe:  ... with predecessor, either current HEAD or passed revision.
	;; dpea: ... with predecessor, either current HEAD or passed revision.
	;; dped: ... with predecessor, either current HEAD or passed revision.
	;; dpy:  ... with predecessor, either current HEAD or passed revision.
	;; dpY:  ... with predecessor, either current HEAD or passed revision.
	adp = annotatediff --count=1
	ovp = overwritten --count=1
	dpr = dp --submodule=diff ; Recursive diff with predecessor, also showing all changes in submodules.
	dprl = dpl --submodule=diff
	dpst = stfiles-command dp
	dpi = stifiles-command dp
	dp-i = stIfiles-command dp
	dplast = showfiles-command dp
	dpmergeitself = showmergeitself --pretty=''
	;; dpfiles:  Show the files modified in passed commit (it's then identical to showfiles) or commit range.

	;; diffcomparep: Compare the diff of unstaged changes in working copy side-by-side with the diff with the predecessor, either current HEAD or passed revision.
	dyp = diffcomparep
	diffcomparepi = diffcomparep --cached ; Compare the diff of unstaged changes in working copy side-by-side with the diff with the predecessor, either current HEAD or passed revision.
	dypi = diffcomparepi
	;
	;; diffuntil: ... over all commits until passed revision.

	dtosbr = difftoselectedbranch
	dtosobr = difftoselectedrbranch origin
	dtosubr = difftoselectedrbranch upstream

	dtoselected = selectedcommit-command --pass-file-args --single-only -2 diff COMMITS	; Diff to the commit interactively chosen from the commits in the passed <range>.
	dto1 = dtoselected --max-count 1
	dto2 = dtoselected --max-count 2
	dto3 = dtoselected --max-count 3
	dto4 = dtoselected --max-count 4
	dto5 = dtoselected --max-count 5
	dto6 = dtoselected --max-count 6
	dto7 = dtoselected --max-count 7
	dtox = dtoselected --max-count 12
	dtoq = dtoselected --max-count 25
	dtoz = dtoselected --max-count 100

	dtoselectedcommitref = selectedref-command --commits-only --single-only -2 diff COMMITS	; Diff to the commit interactively chosen from the (recent | N) commits [that cover FILE ...] from the reflog.
	dtocommitref1 = dtoselectedcommitref --max-count 1
	dtocommitref2 = dtoselectedcommitref --max-count 2
	dtocommitref3 = dtoselectedcommitref --max-count 3
	dtocommitref4 = dtoselectedcommitref --max-count 4
	dtocommitref5 = dtoselectedcommitref --max-count 5
	dtocommitref6 = dtoselectedcommitref --max-count 6
	dtocommitref7 = dtoselectedcommitref --max-count 7
	dtocommitrefx = dtoselectedcommitref --max-count 12
	dtocommitrefq = dtoselectedcommitref --max-count 25
	dtocommitrefz = dtoselectedcommitref --max-count 100
	dtolastcommitref = lastcommitref-command -2 diff COMMITS
	dtopreviouscommitref = previouscommitref-command -2 diff COMMITS

	dstatoselected = selectedcommit-command --pass-file-args --single-only -2 dsta COMMITS
	dstato1 = dstatoselected --max-count 1
	dstato2 = dstatoselected --max-count 2
	dstato3 = dstatoselected --max-count 3
	dstato4 = dstatoselected --max-count 4
	dstato5 = dstatoselected --max-count 5
	dstato6 = dstatoselected --max-count 6
	dstato7 = dstatoselected --max-count 7
	dstatox = dstatoselected --max-count 12
	dstatoq = dstatoselected --max-count 25
	dstatoz = dstatoselected --max-count 100

	dstatoselectedcommitref = selectedref-command --commits-only --single-only -2 dsta COMMITS
	dstatocommitref1 = dstatoselectedcommitref --max-count 1
	dstatocommitref2 = dstatoselectedcommitref --max-count 2
	dstatocommitref3 = dstatoselectedcommitref --max-count 3
	dstatocommitref4 = dstatoselectedcommitref --max-count 4
	dstatocommitref5 = dstatoselectedcommitref --max-count 5
	dstatocommitref6 = dstatoselectedcommitref --max-count 6
	dstatocommitref7 = dstatoselectedcommitref --max-count 7
	dstatocommitrefx = dstatoselectedcommitref --max-count 12
	dstatocommitrefq = dstatoselectedcommitref --max-count 25
	dstatocommitrefz = dstatoselectedcommitref --max-count 100
	dstatolastcommitref = lastcommitref-command -2 dsta COMMITS
	dstatopreviouscommitref = previouscommitref-command -2 dsta COMMITS

	dstattoselected = selectedcommit-command --pass-file-args --single-only -2 dstat COMMITS
	dstatto1 = dstattoselected --max-count 1
	dstatto2 = dstattoselected --max-count 2
	dstatto3 = dstattoselected --max-count 3
	dstatto4 = dstattoselected --max-count 4
	dstatto5 = dstattoselected --max-count 5
	dstatto6 = dstattoselected --max-count 6
	dstatto7 = dstattoselected --max-count 7
	dstattox = dstattoselected --max-count 12
	dstattoq = dstattoselected --max-count 25
	dstattoz = dstattoselected --max-count 100

	dstattoselectedcommitref = selectedref-command --commits-only --single-only -2 dstat COMMITS
	dstattocommitref1 = dstattoselectedcommitref --max-count 1
	dstattocommitref2 = dstattoselectedcommitref --max-count 2
	dstattocommitref3 = dstattoselectedcommitref --max-count 3
	dstattocommitref4 = dstattoselectedcommitref --max-count 4
	dstattocommitref5 = dstattoselectedcommitref --max-count 5
	dstattocommitref6 = dstattoselectedcommitref --max-count 6
	dstattocommitref7 = dstattoselectedcommitref --max-count 7
	dstattocommitrefx = dstattoselectedcommitref --max-count 12
	dstattocommitrefq = dstattoselectedcommitref --max-count 25
	dstattocommitrefz = dstattoselectedcommitref --max-count 100
	dstattolastcommitref = lastcommitref-command -2 dstat COMMITS
	dstattopreviouscommitref = previouscommitref-command -2 dstat COMMITS

	dstatbyeachtoselected = selectedcommit-command --pass-file-args --single-only -2 logstatbyeach COMMITS
	dstatbyeachto1 = dstatbyeachtoselected --max-count 1
	dstatbyeachto2 = dstatbyeachtoselected --max-count 2
	dstatbyeachto3 = dstatbyeachtoselected --max-count 3
	dstatbyeachto4 = dstatbyeachtoselected --max-count 4
	dstatbyeachto5 = dstatbyeachtoselected --max-count 5
	dstatbyeachto6 = dstatbyeachtoselected --max-count 6
	dstatbyeachto7 = dstatbyeachtoselected --max-count 7
	dstatbyeachtox = dstatbyeachtoselected --max-count 12
	dstatbyeachtoq = dstatbyeachtoselected --max-count 25
	dstatbyeachtoz = dstatbyeachtoselected --max-count 100

	dstatbyeachtoselectedcommitref = selectedref-command --commits-only --single-only -2 logstatbyeach COMMITS
	dstatbyeachtocommitref1 = dstatbyeachtoselectedcommitref --max-count 1
	dstatbyeachtocommitref2 = dstatbyeachtoselectedcommitref --max-count 2
	dstatbyeachtocommitref3 = dstatbyeachtoselectedcommitref --max-count 3
	dstatbyeachtocommitref4 = dstatbyeachtoselectedcommitref --max-count 4
	dstatbyeachtocommitref5 = dstatbyeachtoselectedcommitref --max-count 5
	dstatbyeachtocommitref6 = dstatbyeachtoselectedcommitref --max-count 6
	dstatbyeachtocommitref7 = dstatbyeachtoselectedcommitref --max-count 7
	dstatbyeachtocommitrefx = dstatbyeachtoselectedcommitref --max-count 12
	dstatbyeachtocommitrefq = dstatbyeachtoselectedcommitref --max-count 25
	dstatbyeachtocommitrefz = dstatbyeachtoselectedcommitref --max-count 100
	dstatbyeachtolastcommitref = lastcommitref-command -2 logstatbyeach COMMITS
	dstatbyeachtopreviouscommitref = previouscommitref-command -2 logstatbyeach COMMITS

	dstabyeachtoselected = selectedcommit-command --single-only -2 logstabyeach COMMITS
	dstabyeachto1 = dstabyeachtoselected --max-count 1
	dstabyeachto2 = dstabyeachtoselected --max-count 2
	dstabyeachto3 = dstabyeachtoselected --max-count 3
	dstabyeachto4 = dstabyeachtoselected --max-count 4
	dstabyeachto5 = dstabyeachtoselected --max-count 5
	dstabyeachto6 = dstabyeachtoselected --max-count 6
	dstabyeachto7 = dstabyeachtoselected --max-count 7
	dstabyeachtox = dstabyeachtoselected --max-count 12
	dstabyeachtoq = dstabyeachtoselected --max-count 25
	dstabyeachtoz = dstabyeachtoselected --max-count 100

	dstabyeachtoselectedcommitref = selectedref-command --commits-only --single-only -2 logstabyeach COMMITS
	dstabyeachtocommitref1 = dstabyeachtoselectedcommitref --max-count 1
	dstabyeachtocommitref2 = dstabyeachtoselectedcommitref --max-count 2
	dstabyeachtocommitref3 = dstabyeachtoselectedcommitref --max-count 3
	dstabyeachtocommitref4 = dstabyeachtoselectedcommitref --max-count 4
	dstabyeachtocommitref5 = dstabyeachtoselectedcommitref --max-count 5
	dstabyeachtocommitref6 = dstabyeachtoselectedcommitref --max-count 6
	dstabyeachtocommitref7 = dstabyeachtoselectedcommitref --max-count 7
	dstabyeachtocommitrefx = dstabyeachtoselectedcommitref --max-count 12
	dstabyeachtocommitrefq = dstabyeachtoselectedcommitref --max-count 25
	dstabyeachtocommitrefz = dstabyeachtoselectedcommitref --max-count 100
	dstabyeachtolastcommitref = lastcommitref-command -2 logstabyeach COMMITS
	dstabyeachtopreviouscommitref = previouscommitref-command -2 logstabyeach COMMITS

	dltoselected = selectedcommit-command --pass-file-args --single-only -2 dl COMMITS
	dlto1 = dltoselected --max-count 1
	dlto2 = dltoselected --max-count 2
	dlto3 = dltoselected --max-count 3
	dlto4 = dltoselected --max-count 4
	dlto5 = dltoselected --max-count 5
	dlto6 = dltoselected --max-count 6
	dlto7 = dltoselected --max-count 7
	dltox = dltoselected --max-count 12
	dltoq = dltoselected --max-count 25
	dltoz = dltoselected --max-count 100

	dltoselectedcommitref = selectedref-command --commits-only --single-only -2 dl COMMITS
	dltocommitref1 = dltoselectedcommitref --max-count 1
	dltocommitref2 = dltoselectedcommitref --max-count 2
	dltocommitref3 = dltoselectedcommitref --max-count 3
	dltocommitref4 = dltoselectedcommitref --max-count 4
	dltocommitref5 = dltoselectedcommitref --max-count 5
	dltocommitref6 = dltoselectedcommitref --max-count 6
	dltocommitref7 = dltoselectedcommitref --max-count 7
	dltocommitrefx = dltoselectedcommitref --max-count 12
	dltocommitrefq = dltoselectedcommitref --max-count 25
	dltocommitrefz = dltoselectedcommitref --max-count 100
	dltolastcommitref = lastcommitref-command -2 dl COMMITS
	dltopreviouscommitref = previouscommitref-command -2 dl COMMITS

	dttoselected = selectedcommit-command --pass-file-args --single-only -2 difftool COMMITS
	dtto1 = dttoselected --max-count 1
	dtto2 = dttoselected --max-count 2
	dtto3 = dttoselected --max-count 3
	dtto4 = dttoselected --max-count 4
	dtto5 = dttoselected --max-count 5
	dtto6 = dttoselected --max-count 6
	dtto7 = dttoselected --max-count 7
	dttox = dttoselected --max-count 12
	dttoq = dttoselected --max-count 25
	dttoz = dttoselected --max-count 100

	dttoselectedcommitref = selectedref-command --commits-only --single-only -2 difftool COMMITS
	dttocommitref1 = dttoselectedcommitref --max-count 1
	dttocommitref2 = dttoselectedcommitref --max-count 2
	dttocommitref3 = dttoselectedcommitref --max-count 3
	dttocommitref4 = dttoselectedcommitref --max-count 4
	dttocommitref5 = dttoselectedcommitref --max-count 5
	dttocommitref6 = dttoselectedcommitref --max-count 6
	dttocommitref7 = dttoselectedcommitref --max-count 7
	dttocommitrefx = dttoselectedcommitref --max-count 12
	dttocommitrefq = dttoselectedcommitref --max-count 25
	dttocommitrefz = dttoselectedcommitref --max-count 100
	dttolastcommitref = lastcommitref-command -2 difftool COMMITS
	dttopreviouscommitref = previouscommitref-command -2 difftool COMMITS

	dbtoselected = selectedcommit-command --pass-file-args --single-only -2 db COMMITS
	dbto1 = dbtoselected --max-count 1
	dbto2 = dbtoselected --max-count 2
	dbto3 = dbtoselected --max-count 3
	dbto4 = dbtoselected --max-count 4
	dbto5 = dbtoselected --max-count 5
	dbto6 = dbtoselected --max-count 6
	dbto7 = dbtoselected --max-count 7
	dbtox = dbtoselected --max-count 12
	dbtoq = dbtoselected --max-count 25
	dbtoz = dbtoselected --max-count 100

	dbtoselectedcommitref = selectedref-command --commits-only --single-only -2 db COMMITS
	dbtocommitref1 = dbtoselectedcommitref --max-count 1
	dbtocommitref2 = dbtoselectedcommitref --max-count 2
	dbtocommitref3 = dbtoselectedcommitref --max-count 3
	dbtocommitref4 = dbtoselectedcommitref --max-count 4
	dbtocommitref5 = dbtoselectedcommitref --max-count 5
	dbtocommitref6 = dbtoselectedcommitref --max-count 6
	dbtocommitref7 = dbtoselectedcommitref --max-count 7
	dbtocommitrefx = dbtoselectedcommitref --max-count 12
	dbtocommitrefq = dbtoselectedcommitref --max-count 25
	dbtocommitrefz = dbtoselectedcommitref --max-count 100
	dbtolastcommitref = lastcommitref-command -2 db COMMITS
	dbtopreviouscommitref = previouscommitref-command -2 db COMMITS

	dwtoselected = selectedcommit-command --pass-file-args --single-only -2 dw COMMITS
	dwto1 = dwtoselected --max-count 1
	dwto2 = dwtoselected --max-count 2
	dwto3 = dwtoselected --max-count 3
	dwto4 = dwtoselected --max-count 4
	dwto5 = dwtoselected --max-count 5
	dwto6 = dwtoselected --max-count 6
	dwto7 = dwtoselected --max-count 7
	dwtox = dwtoselected --max-count 12
	dwtoq = dwtoselected --max-count 25
	dwtoz = dwtoselected --max-count 100

	dwtoselectedcommitref = selectedref-command --commits-only --single-only -2 dw COMMITS
	dwtocommitref1 = dwtoselectedcommitref --max-count 1
	dwtocommitref2 = dwtoselectedcommitref --max-count 2
	dwtocommitref3 = dwtoselectedcommitref --max-count 3
	dwtocommitref4 = dwtoselectedcommitref --max-count 4
	dwtocommitref5 = dwtoselectedcommitref --max-count 5
	dwtocommitref6 = dwtoselectedcommitref --max-count 6
	dwtocommitref7 = dwtoselectedcommitref --max-count 7
	dwtocommitrefx = dwtoselectedcommitref --max-count 12
	dwtocommitrefq = dwtoselectedcommitref --max-count 25
	dwtocommitrefz = dwtoselectedcommitref --max-count 100
	dwtolastcommitref = lastcommitref-command -2 dw COMMITS
	dwtopreviouscommitref = previouscommitref-command -2 dw COMMITS

	dctoselected = selectedcommit-command --pass-file-args --single-only -2 dc COMMITS
	dcto1 = dctoselected --max-count 1
	dcto2 = dctoselected --max-count 2
	dcto3 = dctoselected --max-count 3
	dcto4 = dctoselected --max-count 4
	dcto5 = dctoselected --max-count 5
	dcto6 = dctoselected --max-count 6
	dcto7 = dctoselected --max-count 7
	dctox = dctoselected --max-count 12
	dctoq = dctoselected --max-count 25
	dctoz = dctoselected --max-count 100

	dctoselectedcommitref = selectedref-command --commits-only --single-only -2 dc COMMITS
	dctocommitref1 = dctoselectedcommitref --max-count 1
	dctocommitref2 = dctoselectedcommitref --max-count 2
	dctocommitref3 = dctoselectedcommitref --max-count 3
	dctocommitref4 = dctoselectedcommitref --max-count 4
	dctocommitref5 = dctoselectedcommitref --max-count 5
	dctocommitref6 = dctoselectedcommitref --max-count 6
	dctocommitref7 = dctoselectedcommitref --max-count 7
	dctocommitrefx = dctoselectedcommitref --max-count 12
	dctocommitrefq = dctoselectedcommitref --max-count 25
	dctocommitrefz = dctoselectedcommitref --max-count 100
	dctolastcommitref = lastcommitref-command -2 dc COMMITS
	dctopreviouscommitref = previouscommitref-command -2 dc COMMITS

	datoselected = selectedcommit-command --pass-file-args --single-only -2 da COMMITS
	dato1 = datoselected --max-count 1
	dato2 = datoselected --max-count 2
	dato3 = datoselected --max-count 3
	dato4 = datoselected --max-count 4
	dato5 = datoselected --max-count 5
	dato6 = datoselected --max-count 6
	dato7 = datoselected --max-count 7
	datox = datoselected --max-count 12
	datoq = datoselected --max-count 25
	datoz = datoselected --max-count 100

	datoselectedcommitref = selectedref-command --commits-only --single-only -2 da COMMITS
	datocommitref1 = datoselectedcommitref --max-count 1
	datocommitref2 = datoselectedcommitref --max-count 2
	datocommitref3 = datoselectedcommitref --max-count 3
	datocommitref4 = datoselectedcommitref --max-count 4
	datocommitref5 = datoselectedcommitref --max-count 5
	datocommitref6 = datoselectedcommitref --max-count 6
	datocommitref7 = datoselectedcommitref --max-count 7
	datocommitrefx = datoselectedcommitref --max-count 12
	datocommitrefq = datoselectedcommitref --max-count 25
	datocommitrefz = datoselectedcommitref --max-count 100
	datolastcommitref = lastcommitref-command -2 da COMMITS
	datopreviouscommitref = previouscommitref-command -2 da COMMITS

	dytoselected = selectedcommit-command --pass-file-args --single-only -2 diffy COMMITS
	dyto1 = dytoselected --max-count 1
	dyto2 = dytoselected --max-count 2
	dyto3 = dytoselected --max-count 3
	dyto4 = dytoselected --max-count 4
	dyto5 = dytoselected --max-count 5
	dyto6 = dytoselected --max-count 6
	dyto7 = dytoselected --max-count 7
	dytox = dytoselected --max-count 12
	dytoq = dytoselected --max-count 25
	dytoz = dytoselected --max-count 100

	dytoselectedcommitref = selectedref-command --commits-only --single-only -2 diffy COMMITS
	dytocommitref1 = dytoselectedcommitref --max-count 1
	dytocommitref2 = dytoselectedcommitref --max-count 2
	dytocommitref3 = dytoselectedcommitref --max-count 3
	dytocommitref4 = dytoselectedcommitref --max-count 4
	dytocommitref5 = dytoselectedcommitref --max-count 5
	dytocommitref6 = dytoselectedcommitref --max-count 6
	dytocommitref7 = dytoselectedcommitref --max-count 7
	dytocommitrefx = dytoselectedcommitref --max-count 12
	dytocommitrefq = dytoselectedcommitref --max-count 25
	dytocommitrefz = dytoselectedcommitref --max-count 100
	dytolastcommitref = lastcommitref-command -2 diffy COMMITS
	dytopreviouscommitref = previouscommitref-command -2 diffy COMMITS

	d-ytoselected = selectedcommit-command --pass-file-args --single-only -2 diffY COMMITS
	d-yto1 = d-ytoselected --max-count 1
	d-yto2 = d-ytoselected --max-count 2
	d-yto3 = d-ytoselected --max-count 3
	d-yto4 = d-ytoselected --max-count 4
	d-yto5 = d-ytoselected --max-count 5
	d-yto6 = d-ytoselected --max-count 6
	d-yto7 = d-ytoselected --max-count 7
	d-ytox = d-ytoselected --max-count 12
	d-ytoq = d-ytoselected --max-count 25
	d-ytoz = d-ytoselected --max-count 100

	d-ytoselectedcommitref = selectedref-command --commits-only --single-only -2 diffY COMMITS
	d-ytocommitref1 = d-ytoselectedcommitref --max-count 1
	d-ytocommitref2 = d-ytoselectedcommitref --max-count 2
	d-ytocommitref3 = d-ytoselectedcommitref --max-count 3
	d-ytocommitref4 = d-ytoselectedcommitref --max-count 4
	d-ytocommitref5 = d-ytoselectedcommitref --max-count 5
	d-ytocommitref6 = d-ytoselectedcommitref --max-count 6
	d-ytocommitref7 = d-ytoselectedcommitref --max-count 7
	d-ytocommitrefx = d-ytoselectedcommitref --max-count 12
	d-ytocommitrefq = d-ytoselectedcommitref --max-count 25
	d-ytocommitrefz = d-ytoselectedcommitref --max-count 100
	d-ytolastcommitref = lastcommitref-command -2 diffY COMMITS
	d-ytopreviouscommitref = previouscommitref-command -2 diffY COMMITS

	adps = selectedcommit-command --pass-file-args --single-only -2 adp COMMITS
	adps1 = adps --max-count 1
	adps2 = adps --max-count 2
	adps3 = adps --max-count 3
	adps4 = adps --max-count 4
	adps5 = adps --max-count 5
	adps6 = adps --max-count 6
	adps7 = adps --max-count 7
	adpsx = adps --max-count 12
	adpsq = adps --max-count 25
	adpsz = adps --max-count 100

	adtoselected = selectedcommit-command --pass-file-args --single-only -2 annotatediff COMMITS
	adto1 = adtoselected --max-count 1
	adto2 = adtoselected --max-count 2
	adto3 = adtoselected --max-count 3
	adto4 = adtoselected --max-count 4
	adto5 = adtoselected --max-count 5
	adto6 = adtoselected --max-count 6
	adto7 = adtoselected --max-count 7
	adtox = adtoselected --max-count 12
	adtoq = adtoselected --max-count 25
	adtoz = adtoselected --max-count 100

	adtoselectedcommitref = selectedref-command --commits-only --single-only -2 annotatediff COMMITS
	adtocommitref1 = adtoselectedcommitref --max-count 1
	adtocommitref2 = adtoselectedcommitref --max-count 2
	adtocommitref3 = adtoselectedcommitref --max-count 3
	adtocommitref4 = adtoselectedcommitref --max-count 4
	adtocommitref5 = adtoselectedcommitref --max-count 5
	adtocommitref6 = adtoselectedcommitref --max-count 6
	adtocommitref7 = adtoselectedcommitref --max-count 7
	adtocommitrefx = adtoselectedcommitref --max-count 12
	adtocommitrefq = adtoselectedcommitref --max-count 25
	adtocommitrefz = adtoselectedcommitref --max-count 100
	adtolastcommitref = lastcommitref-command -2 annotatediff COMMITS
	adtopreviouscommitref = previouscommitref-command -2 annotatediff COMMITS

	ovps = selectedcommit-command --pass-file-args --single-only -2 ovp COMMITS
	ovps1 = ovps --max-count 1
	ovps2 = ovps --max-count 2
	ovps3 = ovps --max-count 3
	ovps4 = ovps --max-count 4
	ovps5 = ovps --max-count 5
	ovps6 = ovps --max-count 6
	ovps7 = ovps --max-count 7
	ovpsx = ovps --max-count 12
	ovpsq = ovps --max-count 25
	ovpsz = ovps --max-count 100

	ovtoselected = selectedcommit-command --pass-file-args --single-only -2 overwritten COMMITS
	ovto1 = ovtoselected --max-count 1
	ovto2 = ovtoselected --max-count 2
	ovto3 = ovtoselected --max-count 3
	ovto4 = ovtoselected --max-count 4
	ovto5 = ovtoselected --max-count 5
	ovto6 = ovtoselected --max-count 6
	ovto7 = ovtoselected --max-count 7
	ovtox = ovtoselected --max-count 12
	ovtoq = ovtoselected --max-count 25
	ovtoz = ovtoselected --max-count 100

	ovtoselectedcommitref = selectedref-command --commits-only --single-only -2 overwritten COMMITS
	ovtocommitref1 = ovtoselectedcommitref --max-count 1
	ovtocommitref2 = ovtoselectedcommitref --max-count 2
	ovtocommitref3 = ovtoselectedcommitref --max-count 3
	ovtocommitref4 = ovtoselectedcommitref --max-count 4
	ovtocommitref5 = ovtoselectedcommitref --max-count 5
	ovtocommitref6 = ovtoselectedcommitref --max-count 6
	ovtocommitref7 = ovtoselectedcommitref --max-count 7
	ovtocommitrefx = ovtoselectedcommitref --max-count 12
	ovtocommitrefq = ovtoselectedcommitref --max-count 25
	ovtocommitrefz = ovtoselectedcommitref --max-count 100
	ovtolastcommitref = lastcommitref-command -2 overwritten COMMITS
	ovtopreviouscommitref = previouscommitref-command -2 overwritten COMMITS

	drtoselected = selectedcommit-command --pass-file-args --single-only -2 dr COMMITS
	drto1 = drtoselected --max-count 1
	drto2 = drtoselected --max-count 2
	drto3 = drtoselected --max-count 3
	drto4 = drtoselected --max-count 4
	drto5 = drtoselected --max-count 5
	drto6 = drtoselected --max-count 6
	drto7 = drtoselected --max-count 7
	drtox = drtoselected --max-count 12
	drtoq = drtoselected --max-count 25
	drtoz = drtoselected --max-count 100

	drtoselectedcommitref = selectedref-command --commits-only --single-only -2 dr COMMITS
	drtocommitref1 = drtoselectedcommitref --max-count 1
	drtocommitref2 = drtoselectedcommitref --max-count 2
	drtocommitref3 = drtoselectedcommitref --max-count 3
	drtocommitref4 = drtoselectedcommitref --max-count 4
	drtocommitref5 = drtoselectedcommitref --max-count 5
	drtocommitref6 = drtoselectedcommitref --max-count 6
	drtocommitref7 = drtoselectedcommitref --max-count 7
	drtocommitrefx = drtoselectedcommitref --max-count 12
	drtocommitrefq = drtoselectedcommitref --max-count 25
	drtocommitrefz = drtoselectedcommitref --max-count 100
	drtolastcommitref = lastcommitref-command -2 dr COMMITS
	drtopreviouscommitref = previouscommitref-command -2 dr COMMITS

	drltoselected = selectedcommit-command --pass-file-args --single-only -2 drl COMMITS
	drlto1 = drltoselected --max-count 1
	drlto2 = drltoselected --max-count 2
	drlto3 = drltoselected --max-count 3
	drlto4 = drltoselected --max-count 4
	drlto5 = drltoselected --max-count 5
	drlto6 = drltoselected --max-count 6
	drlto7 = drltoselected --max-count 7
	drltox = drltoselected --max-count 12
	drltoq = drltoselected --max-count 25
	drltoz = drltoselected --max-count 100

	drltoselectedcommitref = selectedref-command --commits-only --single-only -2 drl COMMITS
	drltocommitref1 = drltoselectedcommitref --max-count 1
	drltocommitref2 = drltoselectedcommitref --max-count 2
	drltocommitref3 = drltoselectedcommitref --max-count 3
	drltocommitref4 = drltoselectedcommitref --max-count 4
	drltocommitref5 = drltoselectedcommitref --max-count 5
	drltocommitref6 = drltoselectedcommitref --max-count 6
	drltocommitref7 = drltoselectedcommitref --max-count 7
	drltocommitrefx = drltoselectedcommitref --max-count 12
	drltocommitrefq = drltoselectedcommitref --max-count 25
	drltocommitrefz = drltoselectedcommitref --max-count 100
	drltolastcommitref = lastcommitref-command -2 drl COMMITS
	drltopreviouscommitref = previouscommitref-command -2 drl COMMITS

	; Simple patch creation:
	;	$ git diff 1b6d > my.patch
	; On the receiving end, apply via:
	; 	$ git apply my.patch
	;; applycheck: Try to apply the passed patch and print statistics and result.
	;; applyrcheck: Try to apply the passed patch to the root and print statistics and result.
	;; applyr: Apply the patch from the root (as most patches should be based on the toplevel repository directory).
	;
	; Convert commit(s) to a (set of) patches [ <since> | <revision range> ],
	; ready to send by email, by default saved to CWD / -o outdir in mbox
	; format:
	; 	$ git format-patch --stdout 1b6d..HEAD^^
	; which can be passed to git send-email.
	ma = format-patch
	;; mamergeitself: Prepare patch of the merge itself (i.e. only shows changes directly amended to the merge commit).
	; On the receiving end, save an email to a file, then type:
	; 	$ git am < email.txt
	; Extract commits between revisions R1 and R2, and apply them on top of the current branch using git am to cherry-pick them:
	;   $ git ma -k --stdout R1..R2 | git am -3 -k
	; This applies the incoming patch and also creates a commit, including information such as the author.
	applymbox = am
	amc = am --continue
	ams = am --skip
	amq = am --abort
	aml = am --show-current-patch

	g = grep --color -n
	gf = grep --files-with-matches
	g-f = grep --files-without-match

	;; ls: List files under version control; skip unversioned files.
	lsr = ls --recursive	; List the whole hierarchy of files under version control.
	lsrr = ls --recursive --submodule recurse	; List the whole hierarchy of files under version control, including submodules.
	ll = ls --long --relative-date	; List hash, author, and date of the last commit for each file under source control.
	llr = ls --long --relative-date --recursive	; List hash, author, and date of the last commit for the whole hierarchy under source control.
	llrr = ls --long --relative-date --recursive --submodule recurse	; List hash, author, and date of the last commit for the whole hierarchy including submodules.
	;; lll: List all files under source control with relative paths from the working copy's root.
	;; lllbrurl: List URLs to passed <remote> of all files under source control in the current branch. In contrast to lllhurl, this link will always point to the latest version on that branch.
	lllbrourl = lllbrurl origin
	lllbruurl = lllbrurl upstream
	lllmourl = master-command --keep-position lllbrurl origin --branch MASTER	; List URLs to my GitHub clone of all files under source control in the master branch. In contrast to lllhourl, this link will always point to the latest version on that branch.
	lllmuurl = master-command --keep-position lllbrurl upstream --branch MASTER	; List URLs to upstream of all files under source control in the master branch. In contrast to lllhuurl, this link will always point to the latest version on that branch.
	lllnourl = base-command --keep-position lllbrurl origin --branch BASE	; List URLs to my GitHub clone of all files under source control in the base branch. In contrast to lllhourl, this link will always point to the latest version on that branch.
	lllnuurl = base-command --keep-position lllbrurl upstream --branch BASE	; List URLs to upstream of all files under source control in the base branch. In contrast to lllhuurl, this link will always point to the latest version on that branch.
	;; lllhurl: List URLs to passed <remote> of all files under source control with the current / passed revision. In contrast to lllbrurl (which incorporates future changes done in the branch), this creates a permalink to the current file's contents.
	lllhourl = lllhurl origin
	lllhuurl = lllhurl upstream

	;; eachFile: Execute COMMAND on each FILE under version control (which either is appended or replaces any {} marker inside COMMANDLINE) individually; unversioned files are skipped.
	;; eachDir: Execute COMMAND on each DIR under version control (which either is appended or replaces any {} marker inside COMMANDLINE) individually; unversioned directories are skipped.

	;; datediff: Show the time range of the commits done in the passed <revision-range>, or --since=<date>.

	;; ident-update: Update the expansion of $Id:$ via ident in the .gitattributes after a commit. Can --install a hook to do this automatically on each commit.
	; How to enable what strings:
	; 	1. echo '@(#) file $Id$ project' >> file
	; 	2. echo '* ident' >> .gitattributes
	;   3. git commit file .gitattributes
	;; find-blob: Find commit(s) (the last one is the earliest) which have the passed hash of a blob in their tree. Use to resolve the $Id$ put into a file via the "ident" gitattribute, e.g. in a what string.
	;; hash-object: Print the hash of the passed file (which must not have the $Id$ expanded!)
	; This is the same as
	;   (echo -e -n "blob $(stat -c %s "$file")\0"; cat "$file") | sha1sum

	;; log: Show commit logs, decorate with ref names, show in topological (instead of chronological) order, keeping merged branches together.
	log1 = wrapper log --max-count 1
	log2 = wrapper log --max-count 2
	log3 = wrapper log --max-count 3
	log4 = wrapper log --max-count 4
	log5 = wrapper log --max-count 5
	log6 = wrapper log --max-count 6
	log7 = wrapper log --max-count 7
	logx = wrapper log --max-count 12
	logq = wrapper log --max-count 25
	logz = wrapper log --max-count 100

	;; rnlog: Show commit logs, limiting the number counting from the beginning instead of from the end. (You cannot do this via git log --reverse --max-count, because commit limiting is done before commit ordering.)
	;; rnlg: One-line topology, author, date, tags and commit summary, limiting the number counting from the beginning instead of from the end.

	;; invlog: Show commit logs with inverted commit-limiting arguments (but the actual <revision-range> and <path>), applying skips and number counting after filtering or reversing (like git rnlog).
	;; invlg: One-line topology, author, date, tags and commit summary with inverted commit-limiting arguments (but the actual <revision-range> and <path>), applying skips and number counting after filtering or reversing (like git rnlg).

	logtimeshifted = discrepancylog --field1 AuthorDate: --field2 CommitDate: --pretty=fuller ; Show logs of amended or rebased commits only.
	logonbehalf = discrepancylog --field1 Author: --field2 Commit: --pretty=fuller	; Show logs where author and committer are not the same person.
	logmailmapped = discrepancylog --field1 'Author:' --field2 'OriginalAuthor:' --pretty='format:%C(magenta)commit %H%Creset%nAuthor:            %aN <%aE>%nOriginalAuthor:    %an <%ae>%nCommitter:         %cN <%cE>%nOriginalCommitter: %cn <%ce>%n%n    %s%n%n    %b'	; Show logs where either author or committer are mailmapped (i.e. translated to a different value).

	;; logaround: Show log of NUM commits around DATE|TIME|REVISION / commits that fall into a timespan of the passed duration(s) (by default +/- 12h).
	;; lgaround: One-line topology, author, date, tags and commit summary of of NUM commits around DATE|TIME|REVISION / commits that fall into a timespan of the passed duration(s) (by default +/- 12h).
	;; lcaround: Logs together with diff between commits of commits around DATE|TIME|REVISION that fall into a timespan of the passed duration(s).
	;; lclaround: Show separate log and diff of each commit (instead of concatenating all commits), paged through with less of NUM commits around DATE|TIME|REVISION / commits that fall into a timespan of the passed duration(s) (by default +/- 12h).

	;; logg: Log only those commits where log messages match the specified text or /regexp/.
	logfg = logg --first-parent
	loggmine = mine-command -2 logg ME
	loggothers = others-command -2 logg OTHERS
	loggteam = team-command -2 logg TEAM
	loggby = authors-command -2 logg AUTHORS	; Note: No dashdash-command here because it couldn't handle the "text|/regexp/ AUTHOR-PATTERN" combination, anyway. Users need to pass "text|/regexp/ --" to get the user query.
	loggexceptby = authors-command --invert-authors -2 logg AUTHORS	; Note: No dashdash-command here because it couldn't handle the "text|/regexp/ AUTHOR-PATTERN" combination, anyway. Users need to pass "text|/regexp/ --" to get the user query.
	;; logvg
	logvgmine = mine-command -2 logvg ME
	logvgothers = others-command -2 logvg OTHERS
	logvgteam = team-command -2 logvg TEAM
	logvgby = authors-command -2 logvg AUTHORS
	logvgexceptby = authors-command --invert-authors -2 logvg AUTHORS
	;; lgg
	lgfg = lgg --first-parent
	lggmine = mine-command -2 lgg ME
	lggothers = others-command -2 lgg OTHERS
	lggteam = team-command -2 lgg TEAM
	lggby = authors-command -2 lgg AUTHORS
	lggexceptby = authors-command --invert-authors -2 lgg AUTHORS
	lgghi = lghighlightedcommits --except-last logg
	;; lcg
	lcfg = lcg --first-parent
	lcgmine = mine-command -2 lcg ME
	lcgothers = others-command -2 lcg OTHERS
	lcgteam = team-command -2 lcg TEAM
	lcgby = authors-command -2 lcg AUTHORS
	lcgexceptby = authors-command --invert-authors -2 lcg AUTHORS
	;; lclg
	lcflg = lclg --first-parent
	lclgmine = mine-command -2 lclg ME
	lclgothers = others-command -2 lclg OTHERS
	lclgteam = team-command -2 lclg TEAM
	lclgby = authors-command -2 lclg AUTHORS
	lclgexceptby = authors-command --invert-authors -2 lclg AUTHORS
	;; filesg
	versionsg = findcontained logg annotated
	tagsg = findcontained logg describe

	;; logtitleg: Log only those commits where log subject (i.e. ignoring the message body) match the specified text or /regexp/.
	logtitlefg = logtitleg --first-parent
	logtitlegmine = mine-command -2 logtitleg ME
	logtitlegothers = others-command -2 logtitleg OTHERS
	logtitlegteam = team-command -2 logtitleg TEAM
	logtitlegby = authors-command -2 logtitleg AUTHORS
	logtitlegexceptby = authors-command --invert-authors -2 logtitleg AUTHORS
	;; lgtitleg
	lgtitlefg = lgtitleg --first-parent
	lgtitlegmine = mine-command -2 lgtitleg ME
	lgtitlegothers = others-command -2 lgtitleg OTHERS
	lgtitlegteam = team-command -2 lgtitleg TEAM
	lgtitlegby = authors-command -2 lgtitleg AUTHORS
	lgtitlegexceptby = authors-command --invert-authors -2 lgtitleg AUTHORS
	lgtitleghi = lghighlightedcommits --except-last logtitleg

	logchanged = changed-command log	; logchanged does not look at the log message at all, but the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	logchangedf = logchanged --first-parent
	logchangedmine = mine-command -2 logchanged ME
	logchangedothers = others-command -2 logchanged OTHERS
	logchangedteam = team-command -2 logchanged TEAM
	logchangedby = authors-command -2 logchanged AUTHORS
	logchangedexceptby = authors-command --invert-authors -2 logchanged AUTHORS
	logvchanged = changed-command logv
	logvchangedmine = mine-command -2 logvchanged ME
	logvchangedothers = others-command -2 logvchanged OTHERS
	logvchangedteam = team-command -2 logvchanged TEAM
	logvchangedby = authors-command -2 logvchanged AUTHORS
	logvchangedexceptby = authors-command --invert-authors -2 logvchanged AUTHORS
	lgchanged = changed-command onelinelog
	lgchangedf = lgchanged --first-parent
	lgchangedmine = mine-command -2 lgchanged ME
	lgchangedothers = others-command -2 lgchanged OTHERS
	lgchangedteam = team-command -2 lgchanged TEAM
	lgchangedby = authors-command -2 lgchanged AUTHORS
	lgchangedexceptby = authors-command --invert-authors -2 lgchanged AUTHORS
	lgchangedhi = lghighlightedcommits --except-last logchanged
	lcchanged = changed-command lc
	lcchangedf = lcchanged --first-parent
	lcchangedmine = mine-command -2 lcchanged ME
	lcchangedothers = others-command -2 lcchanged OTHERS
	lcchangedteam = team-command -2 lcchanged TEAM
	lcchangedby = authors-command -2 lcchanged AUTHORS
	lcchangedexceptby = authors-command --invert-authors -2 lcchanged AUTHORS
	lclchanged = changed-command lcl
	lclchangedf = lclchanged --first-parent
	lclchangedmine = mine-command -2 lclchanged ME
	lclchangedothers = others-command -2 lclchanged OTHERS
	lclchangedteam = team-command -2 lclchanged TEAM
	lclchangedby = authors-command -2 lclchanged AUTHORS
	lclchangedexceptby = authors-command --invert-authors -2 lclchanged AUTHORS
	;; showchanged would be the same as showlastchanged
	fileschanged = changed-command logfilenames --unique
	versionschanged = findcontained logchanged annotated
	tagschanged = findcontained logchanged describe

	logtouched = logchanged --more	; logtouched is a more encompassing variant of logchanged that not just shows those commits where the number of occurrences of text or /regexp/ changes, but also lines matching text or /regexp/ that just were somehow modified, without changing the number of occurrences themselves.
	logtouchedf = logtouched --first-parent
	logtouchedmine = logchangedmine --more
	logtouchedteam = logchangedteam --more
	logtouchedby = logchangedby --more
	logtouchedexceptby = logchangedexceptby --more
	logvtouched = logvchanged --more
	logvtouchedmine = logvchangedmine --more
	logvtouchedteam = logvchangedteam --more
	logvtouchedby = logvchangedby --more
	logvtouchedexceptby = logvchangedexceptby --more
	lgtouched = lgchanged --more
	lgtouchedf = lgtouched --first-parent
	lgtouchedmine = lgchangedmine --more
	lgtouchedteam = lgchangedteam --more
	lgtouchedby = lgchangedby --more
	lgtouchedexceptby = lgchangedexceptby --more
	lgtouchedhi = lghighlightedcommits --except-last 'logchanged --more'
	lctouched = lcchanged --more
	lctouchedf = lctouched --first-parent
	lctouchedmine = lcchangedmine --more
	lctouchedteam = lcchangedteam --more
	lctouchedby = lcchangedby --more
	lctouchedexceptby = lcchangedexceptby --more
	lcltouched = lclchanged --more
	lcltouchedf = lcltouched --first-parent
	lcltouchedmine = lclchangedmine --more
	lcltouchedteam = lclchangedteam --more
	lcltouchedby = lclchangedby --more
	lcltouchedexceptby = lclchangedexceptby --more
	;; showtouched would be the same as showlasttouched
	filestouched = fileschanged --more
	versionstouched = versionschanged --more
	tagstouched = tagschanged --more

	;; loglast would be the same as log1
	;; loglastf doesn't make sense as the first parent (merge) always comes after commits that introduced a file.
	loglastg = logg --max-count 1	; Log only the last commit where the log message matches the specified text or /regexp/.
	loglastfg = loglastg --first-parent
	loglastgmine = mine-command -2 loglastg ME
	loglastgothers = others-command -2 loglastg OTHERS
	loglastgteam = team-command -2 loglastg TEAM
	loglastgby = authors-command -2 loglastg AUTHORS
	loglastgexceptby = authors-command --invert-authors -2 loglastg AUTHORS
	logvlastg = logvg --max-count 1
	logvlastgmine = mine-command -2 logvlastg ME
	logvlastgothers = others-command -2 logvlastg OTHERS
	logvlastgteam = team-command -2 logvlastg TEAM
	logvlastgby = authors-command -2 logvlastg AUTHORS
	logvlastgexceptby = authors-command --invert-authors -2 logvlastg AUTHORS
	;; lclast would be the same as show
	;; showlast would be the same as show
	;; showlastf doesn't make sense as the first parent (merge) always comes after commits that introduced a file.
	showlastg = logg --max-count 1 --patch
	showlastfg = showlastg --first-parent
	showlastgmine = mine-command -2 showlastg ME
	showlastgothers = others-command -2 showlastg OTHERS
	showlastgteam = team-command -2 showlastg TEAM
	showlastgby = authors-command -2 showlastg AUTHORS
	showlastgexceptby = authors-command --invert-authors -2 showlastg AUTHORS
	fileslastg = filesg --max-count 1
	versionlastg = findcontained loglastg annotated
	taglastg = findcontained loglastg describe

	loglastchanged = changed-command 'log --max-count 1'	; loglastchanged is like logchanged but only shows a single log (i.e. the last such commit).
	loglastchangedf = loglastchanged --first-parent
	loglastchangedmine = mine-command -2 loglastchanged ME
	loglastchangedothers = others-command -2 loglastchanged OTHERS
	loglastchangedteam = team-command -2 loglastchanged TEAM
	loglastchangedby = authors-command -2 loglastchanged AUTHORS
	loglastchangedexceptby = authors-command --invert-authors -2 loglastchanged AUTHORS
	logvlastchanged = changed-command 'logv --max-count 1'
	logvlastchangedmine = mine-command -2 logvlastchanged ME
	logvlastchangedothers = others-command -2 logvlastchanged OTHERS
	logvlastchangedteam = team-command -2 logvlastchanged TEAM
	logvlastchangedby = authors-command -2 logvlastchanged AUTHORS
	logvlastchangedexceptby = authors-command --invert-authors -2 logvlastchanged AUTHORS
	;; lclastchanged would be the same as showlastchanged
	showlastchanged = changed-command 'log --max-count 1 --patch'
	showlastchangedf = showlastchanged --first-parent
	showlastchangedmine = mine-command -2 showlastchanged ME
	showlastchangedothers = others-command -2 showlastchanged OTHERS
	showlastchangedteam = team-command -2 showlastchanged TEAM
	showlastchangedby = authors-command -2 showlastchanged AUTHORS
	showlastchangedexceptby = authors-command --invert-authors -2 showlastchanged AUTHORS
	fileslastchanged = changed-command 'logfilenames --max-count 1'
	versionlastchanged = findcontained loglastchanged annotated
	taglastchanged = findcontained loglastchanged describe

	loglasttouched = changed-command 'log --max-count 1' --more	; loglasttouched is like logtouched but only shows a single log (i.e. the last such commit).
	loglasttouchedf = loglasttouched --first-parent
	loglasttouchedmine = mine-command -3 loglasttouched --more ME
	loglasttouchedothers = others-command -3 loglasttouched --more OTHERS
	loglasttouchedteam = team-command -3 loglasttouched --more TEAM
	loglasttouchedby = authors-command -3 loglasttouched --more AUTHORS
	loglasttouchedexceptby = authors-command --invert-authors -3 loglasttouched --more AUTHORS
	logvlasttouched = changed-command 'logv --max-count 1' --more
	logvlasttouchedmine = mine-command -3 logvlasttouched --more ME
	logvlasttouchedothers = others-command -3 logvlasttouched --more OTHERS
	logvlasttouchedteam = team-command -3 logvlasttouched --more TEAM
	logvlasttouchedby = authors-command -3 logvlasttouched --more AUTHORS
	logvlasttouchedexceptby = authors-command --invert-authors -3 logvlasttouched --more AUTHORS
	;; lclasttouched would be the same as showlasttouched
	showlasttouched = changed-command 'log --max-count 1 --patch' --more
	showlasttouchedf = showlasttouched --first-parent
	showlasttouchedmine = mine-command -3 showlasttouched --more ME
	showlasttouchedothers = others-command -3 showlasttouched --more OTHERS
	showlasttouchedteam = team-command -3 showlasttouched --more TEAM
	showlasttouchedby = authors-command -3 showlasttouched --more AUTHORS
	showlasttouchedexceptby = authors-command --invert-authors -3 showlasttouched --more AUTHORS
	fileslasttouched = changed-command 'logfilenames --max-count 1' --more
	versionlasttouched = findcontained loglasttouched annotated --more
	taglasttouched = findcontained loglasttouched describe --more

	logfirst = rnlog --reverse --max-count 1	; Log only the first ever commit.
	logfirstf = logfirst --first-parent
	logfirstmine = mine-command -2 logfirst ME
	logfirstothers = others-command -2 logfirst OTHERS
	logfirstteam = team-command -2 logfirst TEAM
	logfirstby = dashdash-default-command --with-files : authors-command -2 logfirst AUTHORS :
	logfirstexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 logfirst AUTHORS :
	logfirstg = rnlogg --reverse --max-count 1	; Log only the first ever commit where the log message matches the specified text or /regexp/.
	logfirstfg = logfirstg --first-parent
	logfirstgmine = mine-command -2 logfirstg ME
	logfirstgothers = others-command -2 logfirstg OTHERS
	logfirstgteam = team-command -2 logfirstg TEAM
	logfirstgby = authors-command -2 logfirstg AUTHORS
	logfirstgexceptby = authors-command --invert-authors -2 logfirstg AUTHORS
	logvfirstg = rnlogvg --reverse --max-count 1
	logvfirstgmine = mine-command -2 logvfirstg ME
	logvfirstgothers = others-command -2 logvfirstg OTHERS
	logvfirstgteam = team-command -2 logvfirstg TEAM
	logvfirstgby = authors-command -2 logvfirstg AUTHORS
	logvfirstgexceptby = authors-command --invert-authors -2 logvfirstg AUTHORS
	;; lcfirst would be the same as showfirst
	showfirst = rnlog --reverse --max-count 1 --patch
	showfirstf = showfirst --first-parent
	showfirstg = rnlogg --max-count 1 --patch
	showfirstfg = showfirstg --first-parent
	showfirstgmine = mine-command -2 showfirstg ME
	showfirstgothers = others-command -2 showfirstg OTHERS
	showfirstgteam = team-command -2 showfirstg TEAM
	showfirstgby = authors-command -2 showfirstg AUTHORS
	showfirstgexceptby = authors-command --invert-authors -2 showfirstg AUTHORS
	filesfirstg = rnloggfilenames --reverse --max-count 1
	versionfirstg = findcontained logfirstg annotated
	tagfirstg = findcontained logfirstg describe

	logfirstchanged = changed-command 'rnlog --reverse --max-count 1'	; logfirstchanged is like logchanged but only shows a single log (i.e. the first commit that introduced the change).
	logfirstchangedf = logfirstchanged --first-parent
	logfirstchangedmine = mine-command -2 logfirstchanged ME
	logfirstchangedothers = others-command -2 logfirstchanged OTHERS
	logfirstchangedteam = team-command -2 logfirstchanged TEAM
	logfirstchangedby = authors-command -2 logfirstchanged AUTHORS
	logfirstchangedexceptby = authors-command --invert-authors -2 logfirstchanged AUTHORS
	logvfirstchanged = changed-command 'rnlogv --reverse --max-count 1'
	logvfirstchangedmine = mine-command -2 logvfirst ME
	logvfirstchangedothers = others-command -2 logvfirst OTHERS
	logvfirstchangedteam = team-command -2 logvfirst TEAM
	logvfirstchangedby = authors-command -2 logvfirst AUTHORS
	logvfirstchangedexceptby = authors-command --invert-authors -2 logvfirst AUTHORS
	;; lcfirstchanged would be the same as showfirstchanged
	showfirstchanged = changed-command 'rnshow --reverse --max-count 1'
	showfirstchangedf = showfirstchanged --first-parent
	showfirstchangedmine = mine-command -2 showfirst ME
	showfirstchangedothers = others-command -2 showfirst OTHERS
	showfirstchangedteam = team-command -2 showfirst TEAM
	showfirstchangedby = authors-command -2 showfirst AUTHORS
	showfirstchangedexceptby = authors-command --invert-authors -2 showfirst AUTHORS
	filesfirstchanged = changed-command 'rnlogfilenames --reverse --max-count 1'
	versionfirstchanged = findcontained logfirstchanged annotated
	tagfirstchanged = findcontained logfirstchanged describe

	logfirsttouched = logfirstchanged --more	; logfirsttouched is like logtouched but only shows a single log (i.e. the first commit that introduced the change).
	logfirsttouchedf = logfirsttouched --first-parent
	logfirsttouchedmine = logfirstchangedmine --more
	logfirsttouchedteam = logfirstchangedteam --more
	logfirsttouchedby = logfirstchangedby --more
	logfirsttouchedexceptby = logfirstchangedexceptby --more
	logvfirsttouched = logvfirstchanged --more
	logvfirsttouchedmine = logvfirstchangedmine --more
	logvfirsttouchedteam = logvfirstchangedteam --more
	logvfirsttouchedby = logvfirstchangedby --more
	logvfirsttouchedexceptby = logvfirstchangedexceptby --more
	;; lcfirsttouched would be the same as showfirsttouched
	showfirsttouched = showfirstchanged --more
	showfirsttouchedf = showfirsttouched --first-parent
	showfirsttouchedmine = showfirstchangedmine --more
	showfirsttouchedteam = showfirstchangedteam --more
	showfirsttouchedby = showfirstchangedby --more
	showfirsttouchedexceptby = showfirstchangedexceptby --more
	filesfirsttouched = filesfirstchanged --more
	versionfirsttouched = versionfirstchanged --more
	tagfirsttouched = tagfirstchanged --more


	lc = -c delta.commit-decoration-style=ol whatchanged --patch ; Logs together with diff between commits.
	lc1 = lc --max-count 1
	lc2 = lc --max-count 2
	lc3 = lc --max-count 3
	lc4 = lc --max-count 4
	lc5 = lc --max-count 5
	lc6 = lc --max-count 6
	lc7 = lc --max-count 7
	lcx = lc --max-count 12
	lcq = lc --max-count 25
	lcz = lc --max-count 100
	lcf = -c delta.commit-decoration-style=ol whatchanged -m --first-parent -p ; Logs together with diff between commits, but only from the current branch's perspective, skipping commits that come from merged branches. This makes sense only when following a strict policy of merging all topic branches when staying on a single integration branch.
	;; lcl: Show separate log and diff of each commit (instead of concatenating all commits), paged through with less. Limit the number of commits via -<number> / -n <number> / --max-count <number> if the default of 20 isn't right.
	lcl1 = lcl --max-count 1
	lcl2 = lcl --max-count 2
	lcl3 = lcl --max-count 3
	lcl4 = lcl --max-count 4
	lcl5 = lcl --max-count 5
	lcl6 = lcl --max-count 6
	lcl7 = lcl --max-count 7
	lclx = lcl --max-count 12
	lclq = lcl --max-count 25
	lclz = lcl --max-count 100
	;; lclg: Show separate log and diff of commits where log messages match the specified text or /regexp/ (instead of concatenating all commits), paged through with less. Limit the number of commits via -<number> / -n <number> / --max-count <number> if the default of 20 isn't right.
	lclf = lcl --first-parent
	lcmine = mine-command -2 lc ME ; Logs together with diff between commits, filtered for my personal commits.
	lclastmine = mine-command -3 byuserrange-command lc ME	; Logs together with diff between commits of the last consecutive commit(s) done by me.
	lcothers = others-command -2 lc OTHERS ; Logs together with diff between commits, filtered for others' commits.
	lclastothers = others-command -3 byuserrange-command lc OTHERS	; Logs together with diff between commits of the last consecutive commit(s) done by others.
	lcteam = team-command -2 lc TEAM ; Logs together with diff between commits, filtered for my team's commits.
	lclastteam = team-command -3 byuserrange-command lc TEAM	; Logs together with diff between commits of the last consecutive commit(s) done by my team.
	lclastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command lc AUTHORS : ; Logs together with diff between commits of the last consecutive commit(s) done by the passed or queried user(s)
	lcby = dashdash-default-command --with-files : authors-command -2 lc AUTHORS : ; Logs together with diff between commits, filtered for that user(s)' commits.
	lclastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command lc AUTHORS : ; Logs together with diff between commits of the last consecutive commit(s) done exceptby the passed or queried user(s)
	lcexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lc AUTHORS : ; Logs together with diff between commits, filtered for that user(s)' commits.
	lcfmine = lcmine --first-parent
	lcfteam = lcteam --first-parent
	lcfby = dashdash-default-command --with-files : authors-command -3 lc --first-parent AUTHORS :
	lcfexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 lc --first-parent AUTHORS :
	lcr = lc --submodule=diff	; Recursive diff also showing all changes in submodules.
	lcr1 = lcr --max-count 1
	lcr2 = lcr --max-count 2
	lcr3 = lcr --max-count 3
	lcr4 = lcr --max-count 4
	lcr5 = lcr --max-count 5
	lcr6 = lcr --max-count 6
	lcr7 = lcr --max-count 7
	lcrx = lcr --max-count 12
	lcrq = lcr --max-count 25
	lcrz = lcr --max-count 100
	lcrl = lcl --submodule=diff ; Logs together with diff between commits including submodules, each commit (as a set of superproject and submodules; use lcl + sublcl for finer granularity) separately, paged through with less.
	;; lcb: bare / basic logs together with diff between commits without diff beautification (through delta)
	; No lcbl; lcl does not use delta, anyway.
	lcbf = lcb --first-parent
	; No lcmine, lcteam, lclastby (so far) - too much duplication.
	lcbr = lcb --submodule=diff
	;; lch: Log together with just the modified file followed by the "TEXT" portion(s) of patch hunk headers of the diff. Condenses identical "TEXT" portions of hunks and completely omits logs that have no "TEXT" portion.

	;; show: Log together with diff for passed / the last commit(s); like lc but will not log further commits.
	showv = wrapper show --decorate --pretty=fuller
	;; showl: Show separate log together with diff of each passed revision (instead of concatenating all commits), paged through with less.
	;; showb: Show separate log together with bare / basic diff without diff beautification (through delta).
	showw = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse wrapper show --color-words	; use word-based (not line-based) diff granularity
	showc = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse wrapper show --color-words --word-diff-regex=.	; use character-based diff granularity
	showa = -c color.diff.old=red\\ reverse -c color.diff.new=green\\ reverse wrapper show --color-words --word-diff-regex=(^|[^[:alnum:]_])[[:alnum:]_]+([^[:alnum:]_]|$)|[^[:space:]]	; use alnum-based diff granularity
	;; showe: Log together with just net lines added / removed for passed / the last commit(s).
	;; showea: Log together with just net lines added for passed / the last commit(s).
	;; showed: Log together with just net lines removed for passed / the last commit(s).
	;; showy: Log together with side-by-side diff for passed / the last commit(s).
	;; showY: Log together with side-by-side diff of the complete files for passed / the last commit(s).
	;; showh: Log together with just the modified file followed by the "TEXT" portion(s) of patch hunk headers of the diff for passed / the last commit(s). Condenses identical "TEXT" portions of hunks and completely omits logs that have no "TEXT" portion.
	showst = stfiles-command show	; Log together with diff for passed / the last commit(s) of currently modified files.
	showi = stifiles-command show	; Log together with diff for passed / the last commit(s) of currently staged files.
	show-i = stIfiles-command show	; Log together with diff for passed / the last commit(s) of currently modified but not staged files.
	showadst = selectedannotatediffcommit-command HEAD --all -2 show COMMITS	; Log together with diff for commits affected by lines that have been changed in currently modified files.
	showadi = selectedannotatediffcommit-command --cached --all -2 show COMMITS	; Log together with diff for commits affected by lines that have been changed in currently staged files.
	showad-i = selectedannotatediffcommit-command --all -2 show COMMITS	; Log together with diff for commits affected by lines that have been changed in currently modified but not staged files.
	showmergeitself = show --diff-merges=remerge	; Log together with diff of the merge itself (i.e. only shows changes directly amended to the merge commit).
	;; showfirst: Log together with diff of the first commit [in the passed range].

	s = showselected --last-only --pass-file-args	; Log together with diff [for FILE(s)] for the last commit [that cover FILE ...] in the passed <range>.
	s1 = s --max-count 1
	s2 = s --max-count 2
	s3 = s --max-count 3
	s4 = s --max-count 4
	s5 = s --max-count 5
	s6 = s --max-count 6
	s7 = s --max-count 7
	sx = s --max-count 12
	sq = s --max-count 25
	sz = s --max-count 100
	sg = selectedgcommit-command --last-only -2 show COMMITS	; Same as showlastg (but different implementation).
	schanged = selectedchangedcommit-command --last-only -2 show COMMITS	; Same as showlastchanged (but different implementation).
	stouched = selectedtouchedcommit-command --last-only -2 show COMMITS	; Same as showlasttouched (but different implementation).

	;; showselected: Log together with diff [for FILE(s)] for the commit(s) interactively chosen from the commits [that cover FILE ...] in the passed <range>.
	ss = showselected --pass-file-args
	ss1 = ss --max-count 1
	ss2 = ss --max-count 2
	ss3 = ss --max-count 3
	ss4 = ss --max-count 4
	ss5 = ss --max-count 5
	ss6 = ss --max-count 6
	ss7 = ss --max-count 7
	ssx = ss --max-count 12
	ssq = ss --max-count 25
	ssz = ss --max-count 100
	ssg = selectedgcommit-command --single-only -2 show COMMITS	; Log together with diff for the commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/.
	sschanged = selectedchangedcommit-command --single-only -2 show COMMITS	; Log together with diff for the commit(s) interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	sstouched = selectedtouchedcommit-command --single-only -2 show COMMITS	; Log together with diff for the commit(s) interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	sselectedcommitref = selectedref-command --commits-only --single-only -2 show COMMITS	; Log together with diff for the commit interactively chosen from the (recent | N) commits [that cover FILE ...] from the reflog.
	scommitref1 = sselectedcommitref --max-count 1
	scommitref2 = sselectedcommitref --max-count 2
	scommitref3 = sselectedcommitref --max-count 3
	scommitref4 = sselectedcommitref --max-count 4
	scommitref5 = sselectedcommitref --max-count 5
	scommitref6 = sselectedcommitref --max-count 6
	scommitref7 = sselectedcommitref --max-count 7
	scommitrefx = sselectedcommitref --max-count 12
	scommitrefq = sselectedcommitref --max-count 25
	scommitrefz = sselectedcommitref --max-count 100
	slastcommitref = lastcommitref-command -2 show COMMITS
	spreviouscommitref = previouscommitref-command -2 show COMMITS

	sst = stfiles-command s
	sst1 = sst --max-count 1
	sst2 = sst --max-count 2
	sst3 = sst --max-count 3
	sst4 = sst --max-count 4
	sst5 = sst --max-count 5
	sst6 = sst --max-count 6
	sst7 = sst --max-count 7
	sstx = sst --max-count 12
	sstq = sst --max-count 25
	sstz = sst --max-count 100
	si = stifiles-command s
	si1 = si --max-count 1
	si2 = si --max-count 2
	si3 = si --max-count 3
	si4 = si --max-count 4
	si5 = si --max-count 5
	si6 = si --max-count 6
	si7 = si --max-count 7
	six = si --max-count 12
	siq = si --max-count 25
	siz = si --max-count 100
	s-i = stIfiles-command s
	s-i1 = s-i --max-count 1
	s-i2 = s-i --max-count 2
	s-i3 = s-i --max-count 3
	s-i4 = s-i --max-count 4
	s-i5 = s-i --max-count 5
	s-i6 = s-i --max-count 6
	s-i7 = s-i --max-count 7
	s-ix = s-i --max-count 12
	s-iq = s-i --max-count 25
	s-iz = s-i --max-count 100
	slast = showfiles-command s
	slast1 = slast --max-count 1
	slast2 = slast --max-count 2
	slast3 = slast --max-count 3
	slast4 = slast --max-count 4
	slast5 = slast --max-count 5
	slast6 = slast --max-count 6
	slast7 = slast --max-count 7
	slastx = slast --max-count 12
	slastq = slast --max-count 25
	slastz = slast --max-count 100

	ssst = stfiles-command ss
	ssst1 = ssst --max-count 1
	ssst2 = ssst --max-count 2
	ssst3 = ssst --max-count 3
	ssst4 = ssst --max-count 4
	ssst5 = ssst --max-count 5
	ssst6 = ssst --max-count 6
	ssst7 = ssst --max-count 7
	ssstx = ssst --max-count 12
	ssstq = ssst --max-count 25
	ssstz = ssst --max-count 100
	ssi = stifiles-command ss
	ssi1 = ssi --max-count 1
	ssi2 = ssi --max-count 2
	ssi3 = ssi --max-count 3
	ssi4 = ssi --max-count 4
	ssi5 = ssi --max-count 5
	ssi6 = ssi --max-count 6
	ssi7 = ssi --max-count 7
	ssix = ssi --max-count 12
	ssiq = ssi --max-count 25
	ssiz = ssi --max-count 100
	ss-i = stIfiles-command ss
	ss-i1 = ss-i --max-count 1
	ss-i2 = ss-i --max-count 2
	ss-i3 = ss-i --max-count 3
	ss-i4 = ss-i --max-count 4
	ss-i5 = ss-i --max-count 5
	ss-i6 = ss-i --max-count 6
	ss-i7 = ss-i --max-count 7
	ss-ix = ss-i --max-count 12
	ss-iq = ss-i --max-count 25
	ss-iz = ss-i --max-count 100
	sslast = showfiles-command ss
	sslast1 = sslast --max-count 1
	sslast2 = sslast --max-count 2
	sslast3 = sslast --max-count 3
	sslast4 = sslast --max-count 4
	sslast5 = sslast --max-count 5
	sslast6 = sslast --max-count 6
	sslast7 = sslast --max-count 7
	sslastx = sslast --max-count 12
	sslastq = sslast --max-count 25
	sslastz = sslast --max-count 100

	sw = showwselected --last-only --pass-file-args
	sw1 = sw --max-count 1
	sw2 = sw --max-count 2
	sw3 = sw --max-count 3
	sw4 = sw --max-count 4
	sw5 = sw --max-count 5
	sw6 = sw --max-count 6
	sw7 = sw --max-count 7
	swx = sw --max-count 12
	swq = sw --max-count 25
	swz = sw --max-count 100
	swg = selectedgcommit-command --last-only -2 showw COMMITS
	swchanged = selectedchangedcommit-command --last-only -2 showw COMMITS
	swtouched = selectedtouchedcommit-command --last-only -2 showw COMMITS
	swst = stfiles-command sw
	swst1 = sswst --max-count 1
	swst2 = sswst --max-count 2
	swst3 = sswst --max-count 3
	swst4 = sswst --max-count 4
	swst5 = sswst --max-count 5
	swst6 = sswst --max-count 6
	swst7 = sswst --max-count 7
	swstx = sswst --max-count 12
	swstq = sswst --max-count 25
	swstz = sswst --max-count 100
	swi = stifiles-command sw
	swi1 = swi --max-count 1
	swi2 = swi --max-count 2
	swi3 = swi --max-count 3
	swi4 = swi --max-count 4
	swi5 = swi --max-count 5
	swi6 = swi --max-count 6
	swi7 = swi --max-count 7
	swix = swi --max-count 12
	swiq = swi --max-count 25
	swiz = swi --max-count 100
	sw-i = stIfiles-command sw
	sw-i1 = sw-i --max-count 1
	sw-i2 = sw-i --max-count 2
	sw-i3 = sw-i --max-count 3
	sw-i4 = sw-i --max-count 4
	sw-i5 = sw-i --max-count 5
	sw-i6 = sw-i --max-count 6
	sw-i7 = sw-i --max-count 7
	sw-ix = sw-i --max-count 12
	sw-iq = sw-i --max-count 25
	sw-iz = sw-i --max-count 100
	swlast = showfiles-command sw
	swlast1 = swlast --max-count 1
	swlast2 = swlast --max-count 2
	swlast3 = swlast --max-count 3
	swlast4 = swlast --max-count 4
	swlast5 = swlast --max-count 5
	swlast6 = swlast --max-count 6
	swlast7 = swlast --max-count 7
	swlastx = swlast --max-count 12
	swlastq = swlast --max-count 25
	swlastz = swlast --max-count 100

	ssw = showwselected --pass-file-args
	ssw1 = ssw --max-count 1
	ssw2 = ssw --max-count 2
	ssw3 = ssw --max-count 3
	ssw4 = ssw --max-count 4
	ssw5 = ssw --max-count 5
	ssw6 = ssw --max-count 6
	ssw7 = ssw --max-count 7
	sswx = ssw --max-count 12
	sswq = ssw --max-count 25
	sswz = ssw --max-count 100
	sswg = selectedgcommit-command --single-only -2 showw COMMITS
	sswchanged = selectedchangedcommit-command --single-only -2 showw COMMITS
	sswtouched = selectedtouchedcommit-command --single-only -2 showw COMMITS
	sswst = stfiles-command ssw
	sswst1 = sswst --max-count 1
	sswst2 = sswst --max-count 2
	sswst3 = sswst --max-count 3
	sswst4 = sswst --max-count 4
	sswst5 = sswst --max-count 5
	sswst6 = sswst --max-count 6
	sswst7 = sswst --max-count 7
	sswstx = sswst --max-count 12
	sswstq = sswst --max-count 25
	sswstz = sswst --max-count 100
	sswi = stifiles-command ssw
	sswi1 = sswi --max-count 1
	sswi2 = sswi --max-count 2
	sswi3 = sswi --max-count 3
	sswi4 = sswi --max-count 4
	sswi5 = sswi --max-count 5
	sswi6 = sswi --max-count 6
	sswi7 = sswi --max-count 7
	sswix = sswi --max-count 12
	sswiq = sswi --max-count 25
	sswiz = sswi --max-count 100
	ssw-i = stIfiles-command ssw
	ssw-i1 = ssw-i --max-count 1
	ssw-i2 = ssw-i --max-count 2
	ssw-i3 = ssw-i --max-count 3
	ssw-i4 = ssw-i --max-count 4
	ssw-i5 = ssw-i --max-count 5
	ssw-i6 = ssw-i --max-count 6
	ssw-i7 = ssw-i --max-count 7
	ssw-ix = ssw-i --max-count 12
	ssw-iq = ssw-i --max-count 25
	ssw-iz = ssw-i --max-count 100
	sswlast = showfiles-command ssw
	sswlast1 = sswlast --max-count 1
	sswlast2 = sswlast --max-count 2
	sswlast3 = sswlast --max-count 3
	sswlast4 = sswlast --max-count 4
	sswlast5 = sswlast --max-count 5
	sswlast6 = sswlast --max-count 6
	sswlast7 = sswlast --max-count 7
	sswlastx = sswlast --max-count 12
	sswlastq = sswlast --max-count 25
	sswlastz = sswlast --max-count 100

	sc = showcselected --last-only --pass-file-args
	sc1 = sc --max-count 1
	sc2 = sc --max-count 2
	sc3 = sc --max-count 3
	sc4 = sc --max-count 4
	sc5 = sc --max-count 5
	sc6 = sc --max-count 6
	sc7 = sc --max-count 7
	scx = sc --max-count 12
	scq = sc --max-count 25
	scz = sc --max-count 100
	scg = selectedgcommit-command --last-only -2 showc COMMITS
	scchanged = selectedchangedcommit-command --last-only -2 showc COMMITS
	sctouched = selectedtouchedcommit-command --last-only -2 showc COMMITS
	scst = stfiles-command sc
	scst1 = scst --max-count 1
	scst2 = scst --max-count 2
	scst3 = scst --max-count 3
	scst4 = scst --max-count 4
	scst5 = scst --max-count 5
	scst6 = scst --max-count 6
	scst7 = scst --max-count 7
	scstx = scst --max-count 12
	scstq = scst --max-count 25
	scstz = scst --max-count 100
	sci = stifiles-command sc
	sci1 = sci --max-count 1
	sci2 = sci --max-count 2
	sci3 = sci --max-count 3
	sci4 = sci --max-count 4
	sci5 = sci --max-count 5
	sci6 = sci --max-count 6
	sci7 = sci --max-count 7
	scix = sci --max-count 12
	sciq = sci --max-count 25
	sciz = sci --max-count 100
	sc-i = stIfiles-command sc
	sc-i1 = sc-i --max-count 1
	sc-i2 = sc-i --max-count 2
	sc-i3 = sc-i --max-count 3
	sc-i4 = sc-i --max-count 4
	sc-i5 = sc-i --max-count 5
	sc-i6 = sc-i --max-count 6
	sc-i7 = sc-i --max-count 7
	sc-ix = sc-i --max-count 12
	sc-iq = sc-i --max-count 25
	sc-iz = sc-i --max-count 100
	sclast = showfiles-command sc
	sclast1 = sclast --max-count 1
	sclast2 = sclast --max-count 2
	sclast3 = sclast --max-count 3
	sclast4 = sclast --max-count 4
	sclast5 = sclast --max-count 5
	sclast6 = sclast --max-count 6
	sclast7 = sclast --max-count 7
	sclastx = sclast --max-count 12
	sclastq = sclast --max-count 25
	sclastz = sclast --max-count 100

	ssc = showcselected --pass-file-args
	ssc1 = ssc --max-count 1
	ssc2 = ssc --max-count 2
	ssc3 = ssc --max-count 3
	ssc4 = ssc --max-count 4
	ssc5 = ssc --max-count 5
	ssc6 = ssc --max-count 6
	ssc7 = ssc --max-count 7
	sscx = ssc --max-count 12
	sscq = ssc --max-count 25
	sscz = ssc --max-count 100
	sscg = selectedgcommit-command --single-only -2 showc COMMITS
	sscchanged = selectedchangedcommit-command --single-only -2 showc COMMITS
	ssctouched = selectedtouchedcommit-command --single-only -2 showc COMMITS
	sscst = stfiles-command ssc
	sscst1 = sscst --max-count 1
	sscst2 = sscst --max-count 2
	sscst3 = sscst --max-count 3
	sscst4 = sscst --max-count 4
	sscst5 = sscst --max-count 5
	sscst6 = sscst --max-count 6
	sscst7 = sscst --max-count 7
	sscstx = sscst --max-count 12
	sscstq = sscst --max-count 25
	sscstz = sscst --max-count 100
	ssci = stifiles-command ssc
	ssci1 = ssci --max-count 1
	ssci2 = ssci --max-count 2
	ssci3 = ssci --max-count 3
	ssci4 = ssci --max-count 4
	ssci5 = ssci --max-count 5
	ssci6 = ssci --max-count 6
	ssci7 = ssci --max-count 7
	sscix = ssci --max-count 12
	ssciq = ssci --max-count 25
	ssciz = ssci --max-count 100
	ssc-i = stIfiles-command ssc
	ssc-i1 = ssc-i --max-count 1
	ssc-i2 = ssc-i --max-count 2
	ssc-i3 = ssc-i --max-count 3
	ssc-i4 = ssc-i --max-count 4
	ssc-i5 = ssc-i --max-count 5
	ssc-i6 = ssc-i --max-count 6
	ssc-i7 = ssc-i --max-count 7
	ssc-ix = ssc-i --max-count 12
	ssc-iq = ssc-i --max-count 25
	ssc-iz = ssc-i --max-count 100
	ssclast = showfiles-command ssc
	ssclast1 = ssclast --max-count 1
	ssclast2 = ssclast --max-count 2
	ssclast3 = ssclast --max-count 3
	ssclast4 = ssclast --max-count 4
	ssclast5 = ssclast --max-count 5
	ssclast6 = ssclast --max-count 6
	ssclast7 = ssclast --max-count 7
	ssclastx = ssclast --max-count 12
	ssclastq = ssclast --max-count 25
	ssclastz = ssclast --max-count 100

	sa = showaselected --last-only --pass-file-args
	sa1 = sa --max-count 1
	sa2 = sa --max-count 2
	sa3 = sa --max-count 3
	sa4 = sa --max-count 4
	sa5 = sa --max-count 5
	sa6 = sa --max-count 6
	sa7 = sa --max-count 7
	sax = sa --max-count 12
	saq = sa --max-count 25
	saz = sa --max-count 100
	sag = selectedgcommit-command --last-only -2 showa COMMITS
	sachanged = selectedchangedcommit-command --last-only -2 showa COMMITS
	satouched = selectedtouchedcommit-command --last-only -2 showa COMMITS
	sast = stfiles-command sa
	sast1 = sast --max-count 1
	sast2 = sast --max-count 2
	sast3 = sast --max-count 3
	sast4 = sast --max-count 4
	sast5 = sast --max-count 5
	sast6 = sast --max-count 6
	sast7 = sast --max-count 7
	sastx = sast --max-count 12
	sastq = sast --max-count 25
	sastz = sast --max-count 100
	sai = stifiles-command sa
	sai1 = sai --max-count 1
	sai2 = sai --max-count 2
	sai3 = sai --max-count 3
	sai4 = sai --max-count 4
	sai5 = sai --max-count 5
	sai6 = sai --max-count 6
	sai7 = sai --max-count 7
	saix = sai --max-count 12
	saiq = sai --max-count 25
	saiz = sai --max-count 100
	sa-i = stIfiles-command sa
	sa-i1 = sa-i --max-count 1
	sa-i2 = sa-i --max-count 2
	sa-i3 = sa-i --max-count 3
	sa-i4 = sa-i --max-count 4
	sa-i5 = sa-i --max-count 5
	sa-i6 = sa-i --max-count 6
	sa-i7 = sa-i --max-count 7
	sa-ix = sa-i --max-count 12
	sa-iq = sa-i --max-count 25
	sa-iz = sa-i --max-count 100
	salast = showfiles-command sa
	salast1 = salast --max-count 1
	salast2 = salast --max-count 2
	salast3 = salast --max-count 3
	salast4 = salast --max-count 4
	salast5 = salast --max-count 5
	salast6 = salast --max-count 6
	salast7 = salast --max-count 7
	salastx = salast --max-count 12
	salastq = salast --max-count 25
	salastz = salast --max-count 100

	ssa = showaselected --pass-file-args
	ssa1 = ssa --max-count 1
	ssa2 = ssa --max-count 2
	ssa3 = ssa --max-count 3
	ssa4 = ssa --max-count 4
	ssa5 = ssa --max-count 5
	ssa6 = ssa --max-count 6
	ssa7 = ssa --max-count 7
	ssax = ssa --max-count 12
	ssaq = ssa --max-count 25
	ssaz = ssa --max-count 100
	ssag = selectedgcommit-command --single-only -2 showa COMMITS
	ssachanged = selectedchangedcommit-command --single-only -2 showa COMMITS
	ssatouched = selectedtouchedcommit-command --single-only -2 showa COMMITS
	ssast = stfiles-command ssa
	ssast1 = ssast --max-count 1
	ssast2 = ssast --max-count 2
	ssast3 = ssast --max-count 3
	ssast4 = ssast --max-count 4
	ssast5 = ssast --max-count 5
	ssast6 = ssast --max-count 6
	ssast7 = ssast --max-count 7
	ssastx = ssast --max-count 12
	ssastq = ssast --max-count 25
	ssastz = ssast --max-count 100
	ssai = stifiles-command ssa
	ssai1 = ssai --max-count 1
	ssai2 = ssai --max-count 2
	ssai3 = ssai --max-count 3
	ssai4 = ssai --max-count 4
	ssai5 = ssai --max-count 5
	ssai6 = ssai --max-count 6
	ssai7 = ssai --max-count 7
	ssaix = ssai --max-count 12
	ssaiq = ssai --max-count 25
	ssaiz = ssai --max-count 100
	ssa-i = stIfiles-command ssa
	ssa-i1 = ssa-i --max-count 1
	ssa-i2 = ssa-i --max-count 2
	ssa-i3 = ssa-i --max-count 3
	ssa-i4 = ssa-i --max-count 4
	ssa-i5 = ssa-i --max-count 5
	ssa-i6 = ssa-i --max-count 6
	ssa-i7 = ssa-i --max-count 7
	ssa-ix = ssa-i --max-count 12
	ssa-iq = ssa-i --max-count 25
	ssa-iz = ssa-i --max-count 100
	ssalast = showfiles-command ssa
	ssalast1 = ssalast --max-count 1
	ssalast2 = ssalast --max-count 2
	ssalast3 = ssalast --max-count 3
	ssalast4 = ssalast --max-count 4
	ssalast5 = ssalast --max-count 5
	ssalast6 = ssalast --max-count 6
	ssalast7 = ssalast --max-count 7
	ssalastx = ssalast --max-count 12
	ssalastq = ssalast --max-count 25
	ssalastz = ssalast --max-count 100

	;; showlselected: Show separate log together with diff for the commit(s) interactively chosen from the commits in the passed <range>.
	sls = showlselected --pass-file-args
	sls1 = sls HEAD~1..
	sls2 = sls HEAD~2..
	sls3 = sls HEAD~3..
	sls4 = sls HEAD~4..
	sls5 = sls HEAD~5..
	sls6 = sls HEAD~6..
	sls7 = sls HEAD~7..
	slsx = sls HEAD~12..
	slsq = sls HEAD~25..
	slsz = sls HEAD~100..
	slsg = selectedgcommit-command -2 showl COMMITS
	slschanged = selectedchangedcommit-command -2 showl COMMITS
	slstouched = selectedtouchedcommit-command -2 showl COMMITS

	showmine = mine-command -4 byuserrange-command --last-only show ME
	showothers = others-command -4 byuserrange-command --last-only show OTHERS
	showteam = team-command -4 byuserrange-command show --last-only TEAM
	showby = dashdash-default-command --with-files : authors-command -4 byuserrange-command --last-only show AUTHORS :
	showexceptby = dashdash-default-command --with-files : authors-command --invert-authors -4 byuserrange-command --last-only show AUTHORS :

	showwmine = mine-command -4 byuserrange-command showw --last-only ME
	showwothers = others-command -4 byuserrange-command showw --last-only OTHERS
	showwteam = team-command -4 byuserrange-command showw --last-only TEAM
	showwby = dashdash-default-command --with-files : authors-command -4 byuserrange-command --last-only showw AUTHORS :
	showwexceptby = dashdash-default-command --with-files : authors-command --invert-authors -4 byuserrange-command --last-only showw AUTHORS :

	showcmine = mine-command -4 byuserrange-command showc --last-only ME
	showcothers = others-command -4 byuserrange-command showc --last-only OTHERS
	showcteam = team-command -4 byuserrange-command showc --last-only TEAM
	showcby = dashdash-default-command --with-files : authors-command -4 byuserrange-command --last-only showc AUTHORS :
	showcexceptby = dashdash-default-command --with-files : authors-command --invert-authors -4 byuserrange-command --last-only showc AUTHORS :

	showamine = mine-command -4 byuserrange-command showa --last-only ME
	showaothers = others-command -4 byuserrange-command showa --last-only OTHERS
	showateam = team-command -4 byuserrange-command showa --last-only TEAM
	showaby = dashdash-default-command --with-files : authors-command -4 byuserrange-command --last-only showa AUTHORS :
	showaexceptby = dashdash-default-command --with-files : authors-command --invert-authors -4 byuserrange-command --last-only showa AUTHORS :

	showminefiles = mine-command -4 byuserrange-command --last-only showfiles ME	; Show the files modified by me in my last commit.
	showothersfiles = others-command -4 byuserrange-command --last-only showfiles OTHERS	; Show the files modified by others in my last commit.
	showteamfiles = team-command -4 byuserrange-command --last-only showfiles TEAM	; Show the files modified by my team in our last commit.
	showbyfiles = dashdash-default-command --with-files : authors-command -4 byuserrange-command --last-only showfiles AUTHORS : ; Show the files modified by the passed or queried user(s) in their last commit.

	;; showfiles: Show the files modified in passed commit or commit range.
	showfilesmine = mine-command -2 showfiles ME	; Show the files modified by me in passed commit or commit range.
	showfilesothers = others-command -2 showfiles OTHERS	; Show the files modified by others in passed commit or commit range.
	showfilesteam = team-command -2 showfiles TEAM	; Show the files modified by my team in passed commit or commit range.
	showfilesby = dashdash-default-command --with-files : authors-command -2 showfiles AUTHORS : ; Show the files modified by the passed or queried user(s) in passed commit or commit range.
	showfilesexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 showfiles AUTHORS : ; Show the files modified exceptby the passed or queried user(s) in passed commit or commit range.

	fileslastmine = mine-command -3 byuserrange-command showfiles ME	; Show all files modified by me in the last / passed -r <commit> and directly preceding, as long as they also were by me.
	submoduleslastmine = mine-command -3 byuserrange-command showsubmodules ME	; Show all submodules modified by me in the last / passed -r <commit> and directly preceding, as long as they also were by me.
	subdolastmine = "files-command --source-command submoduleslastmine --keep-position subdo --for FILES ;"
	fileslastothers = others-command -3 byuserrange-command showfiles OTHERS	; Show all files modified by others in the last / passed -r <commit> and directly preceding, as long as they also were by others.
	submoduleslastothers = others-command -3 byuserrange-command showsubmodules OTHERS	; Show all submodules modified by others in the last / passed -r <commit> and directly preceding, as long as they also were by others.
	subdolastothers = "files-command --source-command submoduleslastothers --keep-position subdo --for FILES ;"
	fileslastteam = team-command -3 byuserrange-command showfiles TEAM	; Show all files modified by my team in the last / passed -r <commit> and directly preceding, as long as they also were by them.
	submoduleslastteam = team-command -3 byuserrange-command showsubmodules TEAM	; Show all submodules modified by my team in the last / passed -r <commit> and directly preceding, as long as they also were by them.
	subdolastteam = "files-command --source-command submoduleslastteam --keep-position subdo --for FILES ;"
	fileslastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command showfiles AUTHORS :	; Show all files modified by the passed or queried user(s) in the last / passed -r <commit> and directly preceding, as long as they also were by them.
	submoduleslastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command showsubmodules AUTHORS :	; Show all submodules modified by the passed or queried user(s) in the last / passed -r <commit> and directly preceding, as long as they also were by them.
	;; Cannot implement subdolastby via files-command.
	fileslastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command showfiles AUTHORS :	; Show all files modified exceptby the passed or queried user(s) in the last / passed -r <commit> and directly preceding, as long as they also were exceptby them.
	submoduleslastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command showsubmodules AUTHORS :	; Show all submodules modified exceptby the passed or queried user(s) in the last / passed -r <commit> and directly preceding, as long as they also were exceptby them.
	;; Cannot implement subdolastexceptby via files-command.

	;; showselectedfiles: Show the files for the commit(s) interactively chosen from the commits [that cover FILE ...] in the passed <range>.
	showfiles1 = showselectedfiles --max-count 1
	showfiles2 = showselectedfiles --max-count 2
	showfiles3 = showselectedfiles --max-count 3
	showfiles4 = showselectedfiles --max-count 4
	showfiles5 = showselectedfiles --max-count 5
	showfiles6 = showselectedfiles --max-count 6
	showfiles7 = showselectedfiles --max-count 7
	showfilesx = showselectedfiles --max-count 12
	showfilesq = showselectedfiles --max-count 25
	showfilesz = showselectedfiles --max-count 100
	showfilesg = selectedgcommit-command --single-only -2 show COMMITS	; Log together with diff for the commit(s) interactively chosen from the commits where log messages match the specified text or /regexp/.
	showfileschanged = selectedchangedcommit-command --single-only -2 show COMMITS	; Log together with diff for the commit(s) interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	showfilestouched = selectedtouchedcommit-command --single-only -2 show COMMITS	; Log together with diff for the commit(s) interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.
	showst = showfiles --status	; Show the files and their modification status in passed commit or commit range.

	; Commit logs Note: Git 1.6.0 only supports %Cred, %Cgreen, %Cblue for highlighting; only newer Git versions also support %C(more-colors).
	logf = wrapper log --first-parent	; Logs from the current branch's perspective, skipping commits that come from merged branches.
	;; logv: Verbose log that includes filenames (like "svn log -v"), and additional committer vs. author information. Still shows all files of the commit even when filtering commits for certain paths (whereas "git log --name-status" also filters the file list itself).
	logv1 = logv --max-count 1
	logv2 = logv --max-count 2
	logv3 = logv --max-count 3
	logv4 = logv --max-count 4
	logv5 = logv --max-count 5
	logv6 = logv --max-count 6
	logv7 = logv --max-count 7
	logvx = logv --max-count 12
	logvq = logv --max-count 25
	logvz = logv --max-count 100
	logvf = logv --first-parent
	logfiles = onelinelog --name-status	; One-line author, date, tags and commit summary, plus the list of changed files (unlike logv, here filtered by a passed <path>).
	logfiles1 = logfiles --max-count 1
	logfiles2 = logfiles --max-count 2
	logfiles3 = logfiles --max-count 3
	logfiles4 = logfiles --max-count 4
	logfiles5 = logfiles --max-count 5
	logfiles6 = logfiles --max-count 6
	logfiles7 = logfiles --max-count 7
	logfilesx = logfiles --max-count 12
	logfilesq = logfiles --max-count 25
	logfilesz = logfiles --max-count 100
	logfilenames = onelinelog --pretty=tformat: --name-only

	;; logsize: One-line author, date, tags and commit summary, plus the list and before / after sizes of changed files.
	logsize1 = logsize --max-count 1
	logsize2 = logsize --max-count 2
	logsize3 = logsize --max-count 3
	logsize4 = logsize --max-count 4
	logsize5 = logsize --max-count 5
	logsize6 = logsize --max-count 6
	logsize7 = logsize --max-count 7
	logsizex = logsize --max-count 12
	logsizeq = logsize --max-count 25
	logsizez = logsize --max-count 100

	;; logmodifications: Show a log of commits that modify files in the specified way.
	logmod = logmodifications -v
	logadded = logmod --added
	logdeleted = logmod --deleted
	logrenamed = logmod --renamed
	logmodfiles = logmodifications --pretty=tformat: --name-only
	logaddedfiles = logmodifications --pretty=tformat: --name-only --added
	logdeletedfiles = logmodifications --pretty=tformat: --name-only --deleted
	logrenamedfiles = logmodifications --pretty=tformat: --name-only --renamed
	;; logdeletions: Show deleted and renamed files (with -M: just deletions), the last revision, and ;deletion date. / Show the last contents of deleted / renamed files.
	;; revive: Obtain the last checked-in revision of FILE(s) (just before it got deleted or renamed) from the log and restore it as an untracked file.

	;; count: Count the amount of commits. / Test whether the number of commits is greater / smaller than N.
	;; countg: Count the amount of commits where log messages match the specified text or /regexp/. / Test whether the number of commits where log messages that match the specified text or /regexp/ is greater / smaller than N.
	;; countchanged: Count the amount of commits where there's an actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/. / Test whether the number of commits where there's an actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/ is greater / smaller than N.
	;; counttouched: Count the amount of commits where lines matching text or /regexp/ that just were somehow modified. / Test whether the number of commits where lines matching text or /regexp/ that just were somehow modified is greater / smaller than N.
	countmine = mine-command -2 count ME ; Count the amount of my commits. / Test whether the number of my commits is greater / smaller than N.
	countgmine = mine-command -2 countg ME
	countchangedmine = mine-command -2 countchanged ME
	counttouchedmine = mine-command -2 counttouched ME
	countothers = others-command -2 count OTHERS ; Count the amount of others' commits. / Test whether the number of others' commits is greater / smaller than N.
	countgothers = others-command -2 countg OTHERS
	countchangedothers = others-command -2 countchanged OTHERS
	counttouchedothers = others-command -2 counttouched OTHERS
	countteam = team-command -2 count TEAM ; Count the amount of my team's commits. / Test whether the number of my team's commits is greater / smaller than N.
	countgteam = team-command -2 countg TEAM
	countchangedteam = team-command -2 countchanged TEAM
	counttouchedteam = team-command -2 counttouched TEAM
	countby = dashdash-default-command --with-files : authors-command -2 count AUTHORS : ; Count the amount of the user(s)' commits. / Test whether the number of the user(s)' commits is greater / smaller than N.
	countgby = authors-command -2 countg AUTHORS
	countchangedby = authors-command -2 countchanged AUTHORS
	counttouchedby = authors-command -2 counttouched AUTHORS
	countexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 count AUTHORS : ; Count the amount of the user(s)' commits. / Test whether the number of the user(s)' commits is greater / smaller than N.
	countgexceptby = authors-command --invert-authors -2 countg AUTHORS
	countchangedexceptby = authors-command --invert-authors -2 countchanged AUTHORS
	counttouchedexceptby = authors-command --invert-authors -2 counttouched AUTHORS

	;; countmaxdaycommits: Determine the maximum number of commits in a day in the given revision range. / Test whether the maximum number of commits in a day is greater / smaller than N.
	countmaxdaycommitsmine = mine-command -2 countmaxdaycommits ME ; Determine the maximum number of my commits in a day in the given revision range. / Test whether the maximum number of my commits in a day is greater / smaller than N.
	countmaxdaycommitsothers = others-command -2 countmaxdaycommits OTHERS ; Determine the maximum number of others' commits in a day in the given revision range. / Test whether the maximum number of others' commits in a day is greater / smaller than N.
	countmaxdaycommitsteam = team-command -2 countmaxdaycommits TEAM ; Determine the maximum number of my team's commits in a day in the given revision range. / Test whether the maximum number of my team's commits in a day is greater / smaller than N.
	countmaxdaycommitsby = dashdash-default-command --with-files : authors-command -2 countmaxdaycommits AUTHORS : ; Determine the maximum number of the user(s)' commits in a day in the given revision range. / Test whether the maximum number of the user(s)' commits in a day is greater / smaller than N.
	countmaxdaycommitsexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 countmaxdaycommits AUTHORS : ; Determine the maximum number of the user(s)' commits in a day in the given revision range. / Test whether the maximum number of the user(s)' commits in a day is greater / smaller than N.

	;; commitsperday: Calculate the average number of commits per day [in <path>].
	commitsperdaymine = mine-command -2 commitsperday ME
	commitsperdayothers = others-command -2 commitsperday OTHERS
	commitsperdayteam = team-command -2 commitsperday TEAM
	commitsperdayby = dashdash-default-command --with-files : authors-command -2 commitsperday AUTHORS :
	commitsperdayexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 commitsperday AUTHORS :

	;; logbrowse: Extract URLs from log messages and open (print with -p|--print) them in the browser.
	logbrowse1 = logbrowse --max-count 1
	logbrowse2 = logbrowse --max-count 2
	logbrowse3 = logbrowse --max-count 3
	logbrowse4 = logbrowse --max-count 4
	logbrowse5 = logbrowse --max-count 5
	logbrowse6 = logbrowse --max-count 6
	logbrowse7 = logbrowse --max-count 7
	logbrowsex = logbrowse --max-count 12
	logbrowseq = logbrowse --max-count 25
	logbrowsez = logbrowse --max-count 100

	l = log --pretty=tformat:%s	; One-line list of commit summaries.
	l1 = l --max-count 1
	l2 = l --max-count 2
	l3 = l --max-count 3
	l4 = l --max-count 4
	l5 = l --max-count 5
	l6 = l --max-count 6
	l7 = l --max-count 7
	lx = l --max-count 12
	lq = l --max-count 25
	lz = l --max-count 100
	lf = l --first-parent
	lf1 = lf --max-count 1
	lf2 = lf --max-count 2
	lf3 = lf --max-count 3
	lf4 = lf --max-count 4
	lf5 = lf --max-count 5
	lf6 = lf --max-count 6
	lf7 = lf --max-count 7
	lfx = lf --max-count 12
	lfq = lf --max-count 25
	lfz = lf --max-count 100

	lo = log --pretty=format:%B	; Raw, unwrapped subject and body.
	lo1 = lo --max-count 1	; Raw, unwrapped subject and body, only for the passed commits. Good for reusing for a new commit message.
	lo2 = lo --max-count 2
	lo3 = lo --max-count 3
	lo4 = lo --max-count 4
	lo5 = lo --max-count 5
	lo6 = lo --max-count 6
	lo7 = lo --max-count 7
	lox = lo --max-count 12
	loq = lo --max-count 25
	loz = lo --max-count 100
	lof = lo --first-parent
	lof1 = lof --max-count 1
	lof2 = lof --max-count 2
	lof3 = lof --max-count 3
	lof4 = lof --max-count 4
	lof5 = lof --max-count 5
	lof6 = lof --max-count 6
	lof7 = lof --max-count 7
	lofx = lof --max-count 12
	lofq = lof --max-count 25
	lofz = lof --max-count 100

	lomine = mine-command -2 lo ME ; git lo, filtered for my personal commits.
	lomine1 = lomine --max-count 1
	lomine2 = lomine --max-count 2
	lomine3 = lomine --max-count 3
	lomine4 = lomine --max-count 4
	lomine5 = lomine --max-count 5
	lomine6 = lomine --max-count 6
	lomine7 = lomine --max-count 7
	lominex = lomine --max-count 12
	lomineq = lomine --max-count 25
	lominez = lomine --max-count 100
	lolastmine = mine-command -3 byuserrange-command lo ME	; git lo of the last consecutive commit(s) done by me.
	loothers = others-command -2 lo OTHERS ; git lo, filtered for others' commits.
	loothers1 = loothers --max-count 1
	loothers2 = loothers --max-count 2
	loothers3 = loothers --max-count 3
	loothers4 = loothers --max-count 4
	loothers5 = loothers --max-count 5
	loothers6 = loothers --max-count 6
	loothers7 = loothers --max-count 7
	loothersx = loothers --max-count 12
	loothersq = loothers --max-count 25
	loothersz = loothers --max-count 100
	lolastothers = others-command -3 byuserrange-command lo OTHERS	; git lo of the last consecutive commit(s) done by others.
	loteam = team-command -2 lo TEAM ; git lo, filtered for my team's commits.
	loteam1 = loteam --max-count 1
	loteam2 = loteam --max-count 2
	loteam3 = loteam --max-count 3
	loteam4 = loteam --max-count 4
	loteam5 = loteam --max-count 5
	loteam6 = loteam --max-count 6
	loteam7 = loteam --max-count 7
	loteamx = loteam --max-count 12
	loteamq = loteam --max-count 25
	loteamz = loteam --max-count 100
	lolastteam = team-command -3 byuserrange-command lo TEAM	; git lo of the last consecutive commit(s) done by my team.
	loby = dashdash-default-command --with-files : authors-command -2 lo AUTHORS : ; git lo, filtered for that user(s)' commits.
	loby1 = dashdash-default-command --with-files : authors-command -4 lo --max-count 1 AUTHORS :
	loby2 = dashdash-default-command --with-files : authors-command -4 lo --max-count 2 AUTHORS :
	loby3 = dashdash-default-command --with-files : authors-command -4 lo --max-count 3 AUTHORS :
	loby4 = dashdash-default-command --with-files : authors-command -4 lo --max-count 4 AUTHORS :
	loby5 = dashdash-default-command --with-files : authors-command -4 lo --max-count 5 AUTHORS :
	loby6 = dashdash-default-command --with-files : authors-command -4 lo --max-count 6 AUTHORS :
	loby7 = dashdash-default-command --with-files : authors-command -4 lo --max-count 7 AUTHORS :
	lobyx = dashdash-default-command --with-files : authors-command -4 lo --max-count 12 AUTHORS :
	lobyq = dashdash-default-command --with-files : authors-command -4 lo --max-count 25 AUTHORS :
	lobyz = dashdash-default-command --with-files : authors-command -4 lo --max-count 100 AUTHORS :
	lolastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command lo AUTHORS :	; git lo of the last consecutive commit(s) done by the passed or queried user(s)
	loexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lo AUTHORS :
	loexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 1 AUTHORS :
	loexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 2 AUTHORS :
	loexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 3 AUTHORS :
	loexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 4 AUTHORS :
	loexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 5 AUTHORS :
	loexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 6 AUTHORS :
	loexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 7 AUTHORS :
	loexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 12 AUTHORS :
	loexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 25 AUTHORS :
	loexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 lo --max-count 100 AUTHORS :
	lolastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command lo AUTHORS :

	;; linside: One-line Git command(s) that print the corresponding commit message from anywhere else (via git inside). Can be used to reuse a commit message in another repository (by replacing "inside log1" with commitlike or commitidentical).
	linside1 = linside --max-count 1
	linside2 = linside --max-count 2
	linside3 = linside --max-count 3
	linside4 = linside --max-count 4
	linside5 = linside --max-count 5
	linside6 = linside --max-count 6
	linside7 = linside --max-count 7
	linsidex = linside --max-count 12
	linsideq = linside --max-count 25
	linsidez = linside --max-count 100
	linsidef = linside --first-parent
	linsidef1 = linsidef --max-count 1
	linsidef2 = linsidef --max-count 2
	linsidef3 = linsidef --max-count 3
	linsidef4 = linsidef --max-count 4
	linsidef5 = linsidef --max-count 5
	linsidef6 = linsidef --max-count 6
	linsidef7 = linsidef --max-count 7
	linsidefx = linsidef --max-count 12
	linsidefq = linsidef --max-count 25
	linsidefz = linsidef --max-count 100

	lmine = mine-command -2 l ME ; git l, filtered for my personal commits.
	lmine1 = lmine --max-count 1
	lmine2 = lmine --max-count 2
	lmine3 = lmine --max-count 3
	lmine4 = lmine --max-count 4
	lmine5 = lmine --max-count 5
	lmine6 = lmine --max-count 6
	lmine7 = lmine --max-count 7
	lminex = lmine --max-count 12
	lmineq = lmine --max-count 25
	lminez = lmine --max-count 100
	llastmine = mine-command -3 byuserrange-command l ME	; git l of the last consecutive commit(s) done by me.
	lothers = others-command -2 l OTHERS ; git l, filtered for others' commits.
	lothers1 = lothers --max-count 1
	lothers2 = lothers --max-count 2
	lothers3 = lothers --max-count 3
	lothers4 = lothers --max-count 4
	lothers5 = lothers --max-count 5
	lothers6 = lothers --max-count 6
	lothers7 = lothers --max-count 7
	lothersx = lothers --max-count 12
	lothersq = lothers --max-count 25
	lothersz = lothers --max-count 100
	llastothers = others-command -3 byuserrange-command l OTHERS	; git l of the last consecutive commit(s) done by others.
	lteam = team-command -2 l TEAM ; git l, filtered for my team's commits.
	lteam1 = lteam --max-count 1
	lteam2 = lteam --max-count 2
	lteam3 = lteam --max-count 3
	lteam4 = lteam --max-count 4
	lteam5 = lteam --max-count 5
	lteam6 = lteam --max-count 6
	lteam7 = lteam --max-count 7
	lteamx = lteam --max-count 12
	lteamq = lteam --max-count 25
	lteamz = lteam --max-count 100
	llastteam = team-command -3 byuserrange-command l TEAM	; git l of the last consecutive commit(s) done by my team.
	lby = dashdash-default-command --with-files : authors-command -2 l AUTHORS : ; git l, filtered for that user(s)' commits.
	lby1 = dashdash-default-command --with-files : authors-command -4 l --max-count 1 AUTHORS :
	lby2 = dashdash-default-command --with-files : authors-command -4 l --max-count 2 AUTHORS :
	lby3 = dashdash-default-command --with-files : authors-command -4 l --max-count 3 AUTHORS :
	lby4 = dashdash-default-command --with-files : authors-command -4 l --max-count 4 AUTHORS :
	lby5 = dashdash-default-command --with-files : authors-command -4 l --max-count 5 AUTHORS :
	lby6 = dashdash-default-command --with-files : authors-command -4 l --max-count 6 AUTHORS :
	lby7 = dashdash-default-command --with-files : authors-command -4 l --max-count 7 AUTHORS :
	lbyx = dashdash-default-command --with-files : authors-command -4 l --max-count 12 AUTHORS :
	lbyq = dashdash-default-command --with-files : authors-command -4 l --max-count 25 AUTHORS :
	lbyz = dashdash-default-command --with-files : authors-command -4 l --max-count 100 AUTHORS :
	llastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command l AUTHORS :	; git l of the last consecutive commit(s) done by the passed or queried user(s)
	lexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 l AUTHORS :
	lexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 1 AUTHORS :
	lexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 2 AUTHORS :
	lexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 3 AUTHORS :
	lexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 4 AUTHORS :
	lexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 5 AUTHORS :
	lexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 6 AUTHORS :
	lexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 7 AUTHORS :
	lexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 12 AUTHORS :
	lexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 25 AUTHORS :
	lexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 l --max-count 100 AUTHORS :
	llastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command l AUTHORS :

	lg = onelinelog --graph	; One-line topology, author, date, tags and commit summary.
	lg1 = onelinelog --max-count 1
	lg2 = lg --max-count 2
	lg3 = lg --max-count 3
	lg4 = lg --max-count 4
	lg5 = lg --max-count 5
	lg6 = lg --max-count 6
	lg7 = lg --max-count 7
	lgx = lg --max-count 12
	lgq = lg --max-count 25
	lgz = lg --max-count 100
	lgf = lg --first-parent	; One-line author, date, tags and commit summary from the current branch's perspective.
	lgf1 = onelinelog --first-parent --max-count 1
	lgf2 = lgf --max-count 2
	lgf3 = lgf --max-count 3
	lgf4 = lgf --max-count 4
	lgf5 = lgf --max-count 5
	lgf6 = lgf --max-count 6
	lgf7 = lgf --max-count 7
	lgfx = lgf --max-count 12
	lgfq = lgf --max-count 25
	lgfz = lgf --max-count 100
	;; lgv: One-line author, date, tags and commit summary, followed by modified filenames like "svn log -v".
	lgv1 = lgv --max-count 1
	lgv2 = lgv --max-count 2
	lgv3 = lgv --max-count 3
	lgv4 = lgv --max-count 4
	lgv5 = lgv --max-count 5
	lgv6 = lgv --max-count 6
	lgv7 = lgv --max-count 7
	lgv8 = lgv --max-count 8
	lgv9 = lgv --max-count 9
	lgvx = lgv --max-count 12
	lgvq = lgv --max-count 25
	lgvz = lgv --max-count 100
	lgrel = relativeonelinelog --graph	; One-line topology, author, dates relative to the previous commit, tags and commit summary.
	lgrel1 = relativeonelinelog --max-count 1
	lgrel2 = lgrel --max-count 2
	lgrel3 = lgrel --max-count 3
	lgrel4 = lgrel --max-count 4
	lgrel5 = lgrel --max-count 5
	lgrel6 = lgrel --max-count 6
	lgrel7 = lgrel --max-count 7
	lgrelx = lgrel --max-count 12
	lgrelq = lgrel --max-count 25
	lgrelz = lgrel --max-count 100
	;;lgrelmine: One-line topology, dates relative to the previous commit, tags and commit summary of my commits.
	lgrelmine1 = lgrelmine --max-count 1
	lgrelmine2 = lgrelmine --max-count 2
	lgrelmine3 = lgrelmine --max-count 3
	lgrelmine4 = lgrelmine --max-count 4
	lgrelmine5 = lgrelmine --max-count 5
	lgrelmine6 = lgrelmine --max-count 6
	lgrelmine7 = lgrelmine --max-count 7
	lgrelmine8 = lgrelmine --max-count 8
	lgrelmine9 = lgrelmine --max-count 9
	lgrelminex = lgrelmine --max-count 12
	lgrelmineq = lgrelmine --max-count 25
	lgrelminez = lgrelmine --max-count 100
	lgrellastmine = mine-command -3 byuserrange-command relativeonelinelog ME	; One-line topology, dates relative to the previous commit, tags and commit summary of the last consecutive commit(s) done by me.
	lgrelothers = others-command -2 relativeonelinelog OTHERS	; One-line topology, dates relative to the previous commit, tags and commit summary of commit(s) done by others.
	lgrelothers1 = lgrelothers --max-count 1
	lgrelothers2 = lgrelothers --max-count 2
	lgrelothers3 = lgrelothers --max-count 3
	lgrelothers4 = lgrelothers --max-count 4
	lgrelothers5 = lgrelothers --max-count 5
	lgrelothers6 = lgrelothers --max-count 6
	lgrelothers7 = lgrelothers --max-count 7
	lgrelothers8 = lgrelothers --max-count 8
	lgrelothers9 = lgrelothers --max-count 9
	lgrelothersx = lgrelothers --max-count 12
	lgrelothersq = lgrelothers --max-count 25
	lgrelothersz = lgrelothers --max-count 100
	lgrellastothers = others-command -3 byuserrange-command relativeonelinelog OTHERS	; git relativeonelinelog of the last consecutive commit(s) done by others.
	lgrelteam = team-command -2 relativeonelinelog TEAM	; One-line topology, dates relative to the previous commit, tags and commit summary of commit(s) done by my team.
	lgrelteam1 = lgrelteam --max-count 1
	lgrelteam2 = lgrelteam --max-count 2
	lgrelteam3 = lgrelteam --max-count 3
	lgrelteam4 = lgrelteam --max-count 4
	lgrelteam5 = lgrelteam --max-count 5
	lgrelteam6 = lgrelteam --max-count 6
	lgrelteam7 = lgrelteam --max-count 7
	lgrelteam8 = lgrelteam --max-count 8
	lgrelteam9 = lgrelteam --max-count 9
	lgrelteamx = lgrelteam --max-count 12
	lgrelteamq = lgrelteam --max-count 25
	lgrelteamz = lgrelteam --max-count 100
	lgrellastteam = team-command -3 byuserrange-command relativeonelinelog TEAM	; git relativeonelinelog of the last consecutive commit(s) done by my team.
	lgrelby = dashdash-default-command --with-files : authors-command -2 relativeonelinelog AUTHORS : ; One-line topology, selected author(s), dates relative to the previous commit, tags and commit summary done by that user(s) commits.
	lgrelby1 = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 1 AUTHORS :
	lgrelby2 = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 2 AUTHORS :
	lgrelby3 = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 3 AUTHORS :
	lgrelby4 = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 4 AUTHORS :
	lgrelby5 = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 5 AUTHORS :
	lgrelby6 = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 6 AUTHORS :
	lgrelby7 = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 7 AUTHORS :
	lgrelbyx = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 12 AUTHORS :
	lgrelbyq = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 25 AUTHORS :
	lgrelbyz = dashdash-default-command --with-files : authors-command -4 relativeonelinelog --max-count 100 AUTHORS :
	lgrellastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command relativeonelinelog AUTHORS :
	lgrelexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 relativeonelinelog AUTHORS :
	lgrelexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 1 AUTHORS :
	lgrelexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 2 AUTHORS :
	lgrelexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 3 AUTHORS :
	lgrelexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 4 AUTHORS :
	lgrelexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 5 AUTHORS :
	lgrelexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 6 AUTHORS :
	lgrelexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 7 AUTHORS :
	lgrelexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 12 AUTHORS :
	lgrelexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 25 AUTHORS :
	lgrelexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 relativeonelinelog --max-count 100 AUTHORS :
	lgrellastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command relativeonelinelog AUTHORS :

	lgandrefs = onelinelog-and-decorations	; One-line author, date, tags and commit summary for files in <path>, plus any ref names, also of commits not covered.
	lgandtagged = onelinelog-and-decorations --decorate-refs=refs/tags/	; One-line author, date, tags and commit summary for files in <path>, plus any tags, also of commits not covered.
	lgandlocalbr = onelinelog-and-decorations --decorate-refs=refs/heads/	; One-line author, date, tags and commit summary for files in <path>, plus any tips of local branches, also of commits not covered.
	lgandbr = onelinelog-and-decorations --decorate-refs=refs/heads/ --decorate-refs=refs/remotes/	; One-line author, date, tags and commit summary for files in <path>, plus any tips of (local and remote) branches, also of commits not covered.
	lgandremote = onelinelog-and-decorations --decorate-refs=refs/remotes/	; One-line author, date, tags and commit summary for files in <path>, plus any tips of remote branches, also of commits not covered.
	lgandorigin = onelinelog-and-decorations --decorate-refs=refs/remotes/origin/	; One-line author, date, tags and commit summary for files in <path>, plus any tips of branches in my remote GitHub clone, also of commits not covered.
	lgandupstream = onelinelog-and-decorations --decorate-refs=refs/remotes/upstream/	; One-line author, date, tags and commit summary for files in <path>, plus any tips of upstream branches, also of commits not covered.

	lgmineandrefs = "mine-command -4 onelinelog-and-decorations --commit-log-args ME ;"
	lgmineandtagged = "mine-command -5 onelinelog-and-decorations --decorate-refs=refs/tags/ --commit-log-args ME ;"
	lgmineandlocalbr = "mine-command -5 onelinelog-and-decorations --decorate-refs=refs/heads/ --commit-log-args ME ;"
	lgmineandbr = "mine-command -6 onelinelog-and-decorations --decorate-refs=refs/heads/ --decorate-refs=refs/remotes/ --commit-log-args ME ;"
	lgmineandremote = "mine-command -5 onelinelog-and-decorations --decorate-refs=refs/remotes/ --commit-log-args ME ;"
	lgmineandorigin = "mine-command -5 onelinelog-and-decorations --decorate-refs=refs/remotes/origin/ --commit-log-args ME ;"
	lgmineandupstream = "mine-command -5 onelinelog-and-decorations --decorate-refs=refs/remotes/upstream/ --commit-log-args ME ;"

	lgothersandrefs = "others-command -4 onelinelog-and-decorations --commit-log-args OTHERS ;"
	lgothersandtagged = "others-command -5 onelinelog-and-decorations --decorate-refs=refs/tags/ --commit-log-args OTHERS ;"
	lgothersandlocalbr = "others-command -5 onelinelog-and-decorations --decorate-refs=refs/heads/ --commit-log-args OTHERS ;"
	lgothersandbr = "others-command -6 onelinelog-and-decorations --decorate-refs=refs/heads/ --decorate-refs=refs/remotes/ --commit-log-args OTHERS ;"
	lgothersandremote = "others-command -5 onelinelog-and-decorations --decorate-refs=refs/remotes/ --commit-log-args OTHERS ;"
	lgothersandorigin = "others-command -5 onelinelog-and-decorations --decorate-refs=refs/remotes/origin/ --commit-log-args OTHERS ;"
	lgothersandupstream = "others-command -5 onelinelog-and-decorations --decorate-refs=refs/remotes/upstream/ --commit-log-args OTHERS ;"

	lgteamandrefs = "team-command -4 onelinelog-and-decorations --commit-log-args TEAM ;"
	lgteamandtagged = "team-command -5 onelinelog-and-decorations --decorate-refs=refs/tags/ --commit-log-args TEAM ;"
	lgteamandlocalbr = "team-command -5 onelinelog-and-decorations --decorate-refs=refs/heads/ --commit-log-args TEAM ;"
	lgteamandbr = "team-command -6 onelinelog-and-decorations --decorate-refs=refs/heads/ --decorate-refs=refs/remotes/ --commit-log-args TEAM ;"
	lgteamandremote = "team-command -5 onelinelog-and-decorations --decorate-refs=refs/remotes/ --commit-log-args TEAM ;"
	lgteamandorigin = "team-command -5 onelinelog-and-decorations --decorate-refs=refs/remotes/origin/ --commit-log-args TEAM ;"
	lgteamandupstream = "team-command -5 onelinelog-and-decorations --decorate-refs=refs/remotes/upstream/ --commit-log-args TEAM ;"

	lgbyandrefs = "dashdash-default-command --with-files : authors-command -4 onelinelog-and-decorations --commit-log-args AUTHORS ; :"
	lgbyandtagged = "dashdash-default-command --with-files : authors-command -4 onelinelog-and-decorations --decorate-refs=refs/tags/ --commit-log-args AUTHORS ; :"
	lgbyandlocalbr = "dashdash-default-command --with-files : authors-command -4 onelinelog-and-decorations --decorate-refs=refs/heads/ --commit-log-args AUTHORS ; :"
	lgbyandbr = "dashdash-default-command --with-files : authors-command -5 onelinelog-and-decorations --decorate-refs=refs/heads/ --decorate-refs=refs/remotes/ --commit-log-args AUTHORS ; :"
	lgbyandremote = "dashdash-default-command --with-files : authors-command -4 onelinelog-and-decorations --decorate-refs=refs/remotes/ --commit-log-args AUTHORS ; :"
	lgbyandorigin = "dashdash-default-command --with-files : authors-command -4 onelinelog-and-decorations --decorate-refs=refs/remotes/origin/ --commit-log-args AUTHORS ; :"
	lgbyandupstream = "dashdash-default-command --with-files : authors-command -4 onelinelog-and-decorations --decorate-refs=refs/remotes/upstream/ --commit-log-args AUTHORS ; :"

	lgtagged = onelinelog-and-decorations --only-decorations --decorate-refs=refs/tags/	; One-line author, date, tags and commit summary for commits that are tagged.
	lglocalbr = onelinelog-and-decorations --only-decorations --decorate-refs=refs/heads/	; One-line author, date, local branches and commit summary for commits that are at the tip of a local branch.
	lgbr = onelinelog-and-decorations --only-decorations --decorate-refs=refs/heads/ --decorate-refs=refs/remotes/	; One-line author, date, (local and remote) branches and commit summary for commits that are at the tip of a (local or remote) branch.
	lgremote = onelinelog-and-decorations --only-decorations --decorate-refs=refs/remotes/	; One-line author, date, remote branches and commit summary for commits that are at the tip of a remote branch.
	lgorigin = onelinelog-and-decorations --only-decorations --decorate-refs=refs/remotes/origin/	; One-line author, date, origin branches and commit summary for commits that are at the tip of a branch in my remote GitHub clone.
	lgupstream = onelinelog-and-decorations --only-decorations --decorate-refs=refs/remotes/upstream/	; One-line author, date, upstream branches and commit summary for commits that are at the tip of a branch in upstream.
	;; lgtaggedbranches: One-line author, date, tags / branches and commit summary for commits that are both tagged and have tips of (local or remote) branches.

	lgtaggedbyme = mine-command -2 lgtagged ME	; One-line author, date, tags and commit summary for my personal commits that are tagged (not necessarily by me).
	lglocalbrbyme = mine-command -2 lglocalbr ME
	lgbrbyme = mine-command -2 lgbr ME
	lgremotebyme = mine-command -2 lgremote ME
	lgoriginbyme = mine-command -2 lgorigin ME
	lgupstreambyme = mine-command -2 lgupstream ME

	lgtaggedbyothers = others-command -2 lgtagged OTHERS	; One-line author, date, tags and commit summary for others' commits that are tagged (not necessarily by them).
	lglocalbrbyothers = others-command -2 lglocalbr OTHERS
	lgbrbyothers = others-command -2 lgbr OTHERS
	lgremotebyothers = others-command -2 lgremote OTHERS
	lgoriginbyothers = others-command -2 lgorigin OTHERS
	lgupstreambyothers = others-command -2 lgupstream OTHERS

	lgtaggedbyteam = team-command -2 lgtagged TEAM
	lglocalbrbyteam = team-command -2 lglocalbr TEAM
	lgbrbyteam = team-command -2 lgbr TEAM
	lgremotebyteam = team-command -2 lgremote TEAM
	lgoriginbyteam = team-command -2 lgorigin TEAM
	lgupstreambyteam = team-command -2 lgupstream TEAM

	lgtaggedby = "dashdash-default-command --with-files : authors-command -2 lgtagged AUTHORS :"
	lglocalbrby = "dashdash-default-command --with-files : authors-command -2 lglocalbr AUTHORS :"
	lgbrby = "dashdash-default-command --with-files : authors-command -2 lgbr AUTHORS :"
	lgremoteby = "dashdash-default-command --with-files : authors-command -2 lgremote AUTHORS :"
	lgoriginby = "dashdash-default-command --with-files : authors-command -2 lgorigin AUTHORS :"
	lgupstreamby = "dashdash-default-command --with-files : authors-command -2 lgupstream AUTHORS :"

	lgtaggedexceptby = "dashdash-default-command --with-files : authors-command --invert-authors -2 lgtagged AUTHORS :"
	lglocalbrexceptby = "dashdash-default-command --with-files : authors-command --invert-authors -2 lglocalbr AUTHORS :"
	lgbrexceptby = "dashdash-default-command --with-files : authors-command --invert-authors -2 lgbr AUTHORS :"
	lgremoteexceptby = "dashdash-default-command --with-files : authors-command --invert-authors -2 lgremote AUTHORS :"
	lgoriginexceptby = "dashdash-default-command --with-files : authors-command --invert-authors -2 lgorigin AUTHORS :"
	lgupstreamexceptby = "dashdash-default-command --with-files : authors-command --invert-authors -2 lgupstream AUTHORS :"

	;; lgtaggeduntiltag: One-line author, date, tags and commit summary for commits that are tagged until TAGNAME (or nothing and fail if the tag is not reachable from HEAD / the passed <commit>).

	;; lh: One-line list of full commit hashes; useful with --grep.
	lh1 = lh --max-count 1	; Same as rev-parse HEAD. Note that for annotated tags, the tag hash would be returned. You can use TAG~0 or TAG^{commit} to obtain the commit hash.
	lh2 = lh --max-count 2
	lh3 = lh --max-count 3
	lh4 = lh --max-count 4
	lh5 = lh --max-count 5
	lh6 = lh --max-count 6
	lh7 = lh --max-count 7
	lhx = lh --max-count 12
	lhq = lh --max-count 25
	lhz = lh --max-count 100
	lhf = lh --first-parent
	lhf1 = lhf --max-count 1
	lhf2 = lhf --max-count 2
	lhf3 = lhf --max-count 3
	lhf4 = lhf --max-count 4
	lhf5 = lhf --max-count 5
	lhf6 = lhf --max-count 6
	lhf7 = lhf --max-count 7
	lhfx = lhf --max-count 12
	lhfq = lhf --max-count 25
	lhfz = lhf --max-count 100
	lhmine = mine-command -2 lh ME ; git lh, filtered for my personal commits.
	lhmine1 = lhmine --max-count 1
	lhmine2 = lhmine --max-count 2
	lhmine3 = lhmine --max-count 3
	lhmine4 = lhmine --max-count 4
	lhmine5 = lhmine --max-count 5
	lhmine6 = lhmine --max-count 6
	lhmine7 = lhmine --max-count 7
	lhminex = lhmine --max-count 12
	lhmineq = lhmine --max-count 25
	lhminez = lhmine --max-count 100
	lhlastmine = mine-command -3 byuserrange-command lh ME	; git lh of the last consecutive commit(s) done by me.
	lhothers = others-command -2 lh OTHERS ; git lh, filtered for others' commits.
	lhothers1 = lhothers --max-count 1
	lhothers2 = lhothers --max-count 2
	lhothers3 = lhothers --max-count 3
	lhothers4 = lhothers --max-count 4
	lhothers5 = lhothers --max-count 5
	lhothers6 = lhothers --max-count 6
	lhothers7 = lhothers --max-count 7
	lhothersx = lhothers --max-count 12
	lhothersq = lhothers --max-count 25
	lhothersz = lhothers --max-count 100
	lhlastothers = others-command -3 byuserrange-command lh OTHERS	; git lh of the last consecutive commit(s) done by others.
	lhteam = team-command -2 lh TEAM ; git lh, filtered for my team's commits.
	lhteam1 = lhteam --max-count 1
	lhteam2 = lhteam --max-count 2
	lhteam3 = lhteam --max-count 3
	lhteam4 = lhteam --max-count 4
	lhteam5 = lhteam --max-count 5
	lhteam6 = lhteam --max-count 6
	lhteam7 = lhteam --max-count 7
	lhteamx = lhteam --max-count 12
	lhteamq = lhteam --max-count 25
	lhteamz = lhteam --max-count 100
	lhlastteam = team-command -3 byuserrange-command lh TEAM	; git lh of the last consecutive commit(s) done by my team.
	lhby = dashdash-default-command --with-files : authors-command -2 lh AUTHORS : ; git lh, filtered for that user(s)' commits.
	lhby1 = dashdash-default-command --with-files : authors-command -4 lh --max-count 1 AUTHORS :
	lhby2 = dashdash-default-command --with-files : authors-command -4 lh --max-count 2 AUTHORS :
	lhby3 = dashdash-default-command --with-files : authors-command -4 lh --max-count 3 AUTHORS :
	lhby4 = dashdash-default-command --with-files : authors-command -4 lh --max-count 4 AUTHORS :
	lhby5 = dashdash-default-command --with-files : authors-command -4 lh --max-count 5 AUTHORS :
	lhby6 = dashdash-default-command --with-files : authors-command -4 lh --max-count 6 AUTHORS :
	lhby7 = dashdash-default-command --with-files : authors-command -4 lh --max-count 7 AUTHORS :
	lhbyx = dashdash-default-command --with-files : authors-command -4 lh --max-count 12 AUTHORS :
	lhbyq = dashdash-default-command --with-files : authors-command -4 lh --max-count 25 AUTHORS :
	lhbyz = dashdash-default-command --with-files : authors-command -4 lh --max-count 100 AUTHORS :
	lhlastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command lh AUTHORS :	; git lh of the last consecutive commit(s) done by the passed or queried user(s)
	lhexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lh AUTHORS :
	lhexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 1 AUTHORS :
	lhexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 2 AUTHORS :
	lhexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 3 AUTHORS :
	lhexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 4 AUTHORS :
	lhexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 5 AUTHORS :
	lhexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 6 AUTHORS :
	lhexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 7 AUTHORS :
	lhexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 12 AUTHORS :
	lhexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 25 AUTHORS :
	lhexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 lh --max-count 100 AUTHORS :
	lhlastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command lh AUTHORS :

	;; lurl: URLs to passed <remote> of all found commits.
	lourl = lurl origin	; My GitHub clone URLs of all found commits.
	lourl1 = lourl --max-count 1
	lourl2 = lourl --max-count 2
	lourl3 = lourl --max-count 3
	lourl4 = lourl --max-count 4
	lourl5 = lourl --max-count 5
	lourl6 = lourl --max-count 6
	lourl7 = lourl --max-count 7
	lourlx = lourl --max-count 12
	lourlq = lourl --max-count 25
	lourlz = lourl --max-count 100
	lourlf = lourl --first-parent
	lourlf1 = lourlf --max-count 1
	lourlf2 = lourlf --max-count 2
	lourlf3 = lourlf --max-count 3
	lourlf4 = lourlf --max-count 4
	lourlf5 = lourlf --max-count 5
	lourlf6 = lourlf --max-count 6
	lourlf7 = lourlf --max-count 7
	lourlfx = lourlf --max-count 12
	lourlfq = lourlf --max-count 25
	lourlfz = lourlf --max-count 100
	luurl = lurl upstream	; Upstream URLs of all found commits.
	luurl1 = luurl --max-count 1
	luurl2 = luurl --max-count 2
	luurl3 = luurl --max-count 3
	luurl4 = luurl --max-count 4
	luurl5 = luurl --max-count 5
	luurl6 = luurl --max-count 6
	luurl7 = luurl --max-count 7
	luurlx = luurl --max-count 12
	luurlq = luurl --max-count 25
	luurlz = luurl --max-count 100
	luurlf = luurl --first-parent
	luurlf1 = luurlf --max-count 1
	luurlf2 = luurlf --max-count 2
	luurlf3 = luurlf --max-count 3
	luurlf4 = luurlf --max-count 4
	luurlf5 = luurlf --max-count 5
	luurlf6 = luurlf --max-count 6
	luurlf7 = luurlf --max-count 7
	luurlfx = luurlf --max-count 12
	luurlfq = luurlf --max-count 25
	luurlfz = luurlf --max-count 100
	lourlv = lurl origin --summarize-files	; My GitHub clone URLs and changed files of all found commits.
	lourlv1 = lourlv --max-count 1
	lourlv2 = lourlv --max-count 2
	lourlv3 = lourlv --max-count 3
	lourlv4 = lourlv --max-count 4
	lourlv5 = lourlv --max-count 5
	lourlv6 = lourlv --max-count 6
	lourlv7 = lourlv --max-count 7
	lourlvx = lourlv --max-count 12
	lourlvq = lourlv --max-count 25
	lourlvz = lourlv --max-count 100
	luurlv = lurl upstream summarize-files	; Upstream URLs and changed files of all found commits.
	luurlv1 = luurlv --max-count 1
	luurlv2 = luurlv --max-count 2
	luurlv3 = luurlv --max-count 3
	luurlv4 = luurlv --max-count 4
	luurlv5 = luurlv --max-count 5
	luurlv6 = luurlv --max-count 6
	luurlv7 = luurlv --max-count 7
	luurlvx = luurlv --max-count 12
	luurlvq = luurlv --max-count 25
	luurlvz = luurlv --max-count 100
	;; showurl: URLs to passed <remote> for passed / the last commit(s).
	showourl = showurl origin
	showuurl = showurl upstream
	;; treeurl: URLs to passed <remote> of the tree (i.e. the contents of the repository as it existed at that revision, not the actual changes done in that revision) for passed / the last commit(s).
	treeourl = treeurl origin	; My GitHub clone URL of the trees for passed / the last commit(s).
	treeourl1 = treeourl --max-count 1
	treeourl2 = treeourl --max-count 2
	treeourl3 = treeourl --max-count 3
	treeourl4 = treeourl --max-count 4
	treeourl5 = treeourl --max-count 5
	treeourl6 = treeourl --max-count 6
	treeourl7 = treeourl --max-count 7
	treeourlx = treeourl --max-count 12
	treeourlq = treeourl --max-count 25
	treeourlz = treeourl --max-count 100
	treeourlf = treeourl --first-parent
	treeourlf1 = treeourlf --max-count 1
	treeourlf2 = treeourlf --max-count 2
	treeourlf3 = treeourlf --max-count 3
	treeourlf4 = treeourlf --max-count 4
	treeourlf5 = treeourlf --max-count 5
	treeourlf6 = treeourlf --max-count 6
	treeourlf7 = treeourlf --max-count 7
	treeourlfx = treeourlf --max-count 12
	treeourlfq = treeourlf --max-count 25
	treeourlfz = treeourlf --max-count 100
	treeuurl = treeurl upstream	; Upstream URLs of the trees for passed / the last commit(s).
	treeuurl1 = treeuurl --max-count 1
	treeuurl2 = treeuurl --max-count 2
	treeuurl3 = treeuurl --max-count 3
	treeuurl4 = treeuurl --max-count 4
	treeuurl5 = treeuurl --max-count 5
	treeuurl6 = treeuurl --max-count 6
	treeuurl7 = treeuurl --max-count 7
	treeuurlx = treeuurl --max-count 12
	treeuurlq = treeuurl --max-count 25
	treeuurlz = treeuurl --max-count 100
	treeuurlf = treeuurl --first-parent
	treeuurlf1 = treeuurlf --max-count 1
	treeuurlf2 = treeuurlf --max-count 2
	treeuurlf3 = treeuurlf --max-count 3
	treeuurlf4 = treeuurlf --max-count 4
	treeuurlf5 = treeuurlf --max-count 5
	treeuurlf6 = treeuurlf --max-count 6
	treeuurlf7 = treeuurlf --max-count 7
	treeuurlfx = treeuurlf --max-count 12
	treeuurlfq = treeuurlf --max-count 25
	treeuurlfz = treeuurlf --max-count 100

	;; lghighlight: git lg, with lines that match the specified text or /regexp/ highlighted.
	lghi = lghighlight
	;; lgrelhi: git lgrel (dates relative to the previous commit), with lines that match the specified text or /regexp/ highlighted
	lghimine = mine-command --no-option-name -2 lghighlight ME ; git lg, with my personal commits highlighted
	lghiothers = others-command --no-option-name -2 lghighlight OTHERS ; git lg, with others' commits highlighted
	lghiteam = team-command --no-option-name -2 lghighlight TEAM ; git lg, with my team's commits highlighted
	lghiby = dashdash-default-command --with-files : authors-command --name --no-option-name --joined-as-pattern --prefix '/(' --suffix ', /' -2 lghighlight AUTHORS : ; git lg, with that user(s)' commits highlighted
	;; lghiexceptby cannot be implemented because --invert-authors clashes with --joined-as-pattern
	;; lghighlightedcommits: git lg, with passed <commit>(s) / commits that result from GIT-LOG-COMMAND (which will be configured to output just commit hashes) highlighted. That argument and GIT-LOG-ARGUMENTS replace a {} marker in GIT-LOG-COMMAND or will be appended.
	lghicommits = lghighlightedcommits
	lghiadst = selectedannotatediffcommit-command HEAD --all -4 lghighlightedcommits --range-to-last-commit --one-more COMMITS	; git lg with commits affected by lines that have been changed in currently modified files highlighted.
	lghiadi = selectedannotatediffcommit-command --cached --all -4 lghighlightedcommits --range-to-last-commit --one-more COMMITS	; git lg with commits affected by lines that have been changed in currently staged files highlighted.
	lghiad-i = selectedannotatediffcommit-command --all -4 lghighlightedcommits --range-to-last-commit --one-more COMMITS	; git lg with commits affected by lines that have been changed in currently modified but not staged files highlighted.
	;; lghifiles: git lg, with commits that touch the passed <path>s getting highlighted.
	lghist = lghighlightedcommits logst	; git lg, with commits touching currently modified files highlighted.
	lghii = lghighlightedcommits logi	; git lg, with commits touching currently staged files highlighted.
	lghi-i = lghighlightedcommits log-i	; git lg, with commits touching currently modified but not staged files highlighted.
	;; lgghi: git lg, with commits where log messages match the specified text or /regexp/ getting highlighted.

	;; lgmine: git lg, filtered for my personal commits.
	lgmine1 = lgmine --max-count 1
	lgmine2 = lgmine --max-count 2
	lgmine3 = lgmine --max-count 3
	lgmine4 = lgmine --max-count 4
	lgmine5 = lgmine --max-count 5
	lgmine6 = lgmine --max-count 6
	lgmine7 = lgmine --max-count 7
	lgminex = lgmine --max-count 12
	lgmineq = lgmine --max-count 25
	lgminez = lgmine --max-count 100
	lglastmine = mine-command -3 byuserrange-command lg ME	; git lg of the last consecutive commit(s) done by me.
	lgothers = others-command -2 onelinelog OTHERS    ; git lg, filtered for others' commits.
	lgothers1 = lgothers --max-count 1
	lgothers2 = lgothers --max-count 2
	lgothers3 = lgothers --max-count 3
	lgothers4 = lgothers --max-count 4
	lgothers5 = lgothers --max-count 5
	lgothers6 = lgothers --max-count 6
	lgothers7 = lgothers --max-count 7
	lgothersx = lgothers --max-count 12
	lgothersq = lgothers --max-count 25
	lgothersz = lgothers --max-count 100
	lglastothers = others-command -3 byuserrange-command lg OTHERS	; git lg of the last consecutive commit(s) done by others.
	lgteam = team-command -2 onelinelog TEAM    ; git lg, filtered for my team's commits.
	lgteam1 = lgteam --max-count 1
	lgteam2 = lgteam --max-count 2
	lgteam3 = lgteam --max-count 3
	lgteam4 = lgteam --max-count 4
	lgteam5 = lgteam --max-count 5
	lgteam6 = lgteam --max-count 6
	lgteam7 = lgteam --max-count 7
	lgteamx = lgteam --max-count 12
	lgteamq = lgteam --max-count 25
	lgteamz = lgteam --max-count 100
	lglastteam = team-command -3 byuserrange-command lg TEAM	; git lg of the last consecutive commit(s) done by my team.
	lgby = dashdash-default-command --with-files : authors-command -2 onelinelog AUTHORS : ; git lg, filtered for that user(s)' commits.
	lgby1 = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 1 AUTHORS :
	lgby2 = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 2 AUTHORS :
	lgby3 = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 3 AUTHORS :
	lgby4 = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 4 AUTHORS :
	lgby5 = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 5 AUTHORS :
	lgby6 = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 6 AUTHORS :
	lgby7 = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 7 AUTHORS :
	lgbyx = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 12 AUTHORS :
	lgbyq = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 25 AUTHORS :
	lgbyz = dashdash-default-command --with-files : authors-command -4 onelinelog --max-count 100 AUTHORS :
	lglastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command onelinelog AUTHORS :	; git lg of the last consecutive commit(s) done by the passed or queried user(s)
	lgexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 onelinelog AUTHORS :
	lgexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 1 AUTHORS :
	lgexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 2 AUTHORS :
	lgexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 3 AUTHORS :
	lgexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 4 AUTHORS :
	lgexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 5 AUTHORS :
	lgexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 6 AUTHORS :
	lgexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 7 AUTHORS :
	lgexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 12 AUTHORS :
	lgexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 25 AUTHORS :
	lgexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 onelinelog --max-count 100 AUTHORS :
	lglastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command onelinelog AUTHORS :

	lgfmine = lgmine --first-parent ; git lg from the current branch's perspective, skipping commits that come from merged branches, filtered for my personal commits.
	lgfmine1 = lgfmine --max-count 1
	lgfmine2 = lgfmine --max-count 2
	lgfmine3 = lgfmine --max-count 3
	lgfmine4 = lgfmine --max-count 4
	lgfmine5 = lgfmine --max-count 5
	lgfmine6 = lgfmine --max-count 6
	lgfmine7 = lgfmine --max-count 7
	lgfminex = lgfmine --max-count 12
	lgfmineq = lgfmine --max-count 25
	lgfminez = lgfmine --max-count 100
	lgflastmine = mine-command -3 byuserrange-command lgf ME	; git lg from the current branch's perspective, skipping commits that come from merged branches, of the last consecutive commit(s) done by me.
	lgfothers = lgothers --first-parent ; git lg from the current branch's perspective, skipping commits that come from merged branches, filtered for others' commits.
	lgfothers1 = lgfothers --max-count 1
	lgfothers2 = lgfothers --max-count 2
	lgfothers3 = lgfothers --max-count 3
	lgfothers4 = lgfothers --max-count 4
	lgfothers5 = lgfothers --max-count 5
	lgfothers6 = lgfothers --max-count 6
	lgfothers7 = lgfothers --max-count 7
	lgfothersx = lgfothers --max-count 12
	lgfothersq = lgfothers --max-count 25
	lgfothersz = lgfothers --max-count 100
	lgflastothers = others-command -3 byuserrange-command lgf OTHERS	; git lg from the current branch's perspective, skipping commits that come from merged branches, of the last consecutive commit(s) done by others.
	lgfteam = lgteam --first-parent ; git lg from the current branch's perspective, skipping commits that come from merged branches, filtered for my team's commits.
	lgfteam1 = lgfteam --max-count 1
	lgfteam2 = lgfteam --max-count 2
	lgfteam3 = lgfteam --max-count 3
	lgfteam4 = lgfteam --max-count 4
	lgfteam5 = lgfteam --max-count 5
	lgfteam6 = lgfteam --max-count 6
	lgfteam7 = lgfteam --max-count 7
	lgfteamx = lgfteam --max-count 12
	lgfteamq = lgfteam --max-count 25
	lgfteamz = lgfteam --max-count 100
	lgflastteam = team-command -3 byuserrange-command lgf TEAM	; git lo from the current branch's perspective, skipping commits that come from merged branches, of the last consecutive commit(s) done by my team.
	lgfby = dashdash-default-command --with-files : authors-command -2 lgf AUTHORS : ; git lg from the current branch's perspective, skipping commits that come from merged branches, filtered for that user(s)' commits.
	lgfby1 = dashdash-default-command --with-files : authors-command -4 lgf --max-count 1 AUTHORS :
	lgfby2 = dashdash-default-command --with-files : authors-command -4 lgf --max-count 2 AUTHORS :
	lgfby3 = dashdash-default-command --with-files : authors-command -4 lgf --max-count 3 AUTHORS :
	lgfby4 = dashdash-default-command --with-files : authors-command -4 lgf --max-count 4 AUTHORS :
	lgfby5 = dashdash-default-command --with-files : authors-command -4 lgf --max-count 5 AUTHORS :
	lgfby6 = dashdash-default-command --with-files : authors-command -4 lgf --max-count 6 AUTHORS :
	lgfby7 = dashdash-default-command --with-files : authors-command -4 lgf --max-count 7 AUTHORS :
	lgfbyx = dashdash-default-command --with-files : authors-command -4 lgf --max-count 12 AUTHORS :
	lgfbyq = dashdash-default-command --with-files : authors-command -4 lgf --max-count 25 AUTHORS :
	lgfbyz = dashdash-default-command --with-files : authors-command -4 lgf --max-count 100 AUTHORS :
	lgflastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command lgf AUTHORS :
	lgfexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lgf AUTHORS :
	lgfexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 1 AUTHORS :
	lgfexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 2 AUTHORS :
	lgfexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 3 AUTHORS :
	lgfexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 4 AUTHORS :
	lgfexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 5 AUTHORS :
	lgfexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 6 AUTHORS :
	lgfexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 7 AUTHORS :
	lgfexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 12 AUTHORS :
	lgfexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 25 AUTHORS :
	lgfexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 lgf --max-count 100 AUTHORS :
	lgflastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command lgf AUTHORS :

	logmine = mine-command -2 log ME ; git log, filtered for my personal commits.
	logmine1 = logmine --max-count 1
	logmine2 = logmine --max-count 2
	logmine3 = logmine --max-count 3
	logmine4 = logmine --max-count 4
	logmine5 = logmine --max-count 5
	logmine6 = logmine --max-count 6
	logmine7 = logmine --max-count 7
	logminex = logmine --max-count 12
	logmineq = logmine --max-count 25
	logminez = logmine --max-count 100
	loglastmine = mine-command -3 byuserrange-command log ME	; git log of the last consecutive commit(s) done by me.
	logothers = others-command -2 log OTHERS ; git log, filtered for others' commits.
	logothers1 = logothers --max-count 1
	logothers2 = logothers --max-count 2
	logothers3 = logothers --max-count 3
	logothers4 = logothers --max-count 4
	logothers5 = logothers --max-count 5
	logothers6 = logothers --max-count 6
	logothers7 = logothers --max-count 7
	logothersx = logothers --max-count 12
	logothersq = logothers --max-count 25
	logothersz = logothers --max-count 100
	loglastothers = others-command -3 byuserrange-command log OTHERS	; git log of the last consecutive commit(s) done by others.
	logteam = team-command -2 log TEAM ; git log, filtered for my team's commits.
	logteam1 = logteam --max-count 1
	logteam2 = logteam --max-count 2
	logteam3 = logteam --max-count 3
	logteam4 = logteam --max-count 4
	logteam5 = logteam --max-count 5
	logteam6 = logteam --max-count 6
	logteam7 = logteam --max-count 7
	logteamx = logteam --max-count 12
	logteamq = logteam --max-count 25
	logteamz = logteam --max-count 100
	loglastteam = team-command -3 byuserrange-command log TEAM	; git log of the last consecutive commit(s) done by my team.
	logby = dashdash-default-command --with-files : authors-command -2 log AUTHORS : ; git log, filtered for that user(s)' commits.
	logby1 = dashdash-default-command --with-files : authors-command -4 log --max-count 1 AUTHORS :
	logby2 = dashdash-default-command --with-files : authors-command -4 log --max-count 2 AUTHORS :
	logby3 = dashdash-default-command --with-files : authors-command -4 log --max-count 3 AUTHORS :
	logby4 = dashdash-default-command --with-files : authors-command -4 log --max-count 4 AUTHORS :
	logby5 = dashdash-default-command --with-files : authors-command -4 log --max-count 5 AUTHORS :
	logby6 = dashdash-default-command --with-files : authors-command -4 log --max-count 6 AUTHORS :
	logby7 = dashdash-default-command --with-files : authors-command -4 log --max-count 7 AUTHORS :
	logbyx = dashdash-default-command --with-files : authors-command -4 log --max-count 12 AUTHORS :
	logbyq = dashdash-default-command --with-files : authors-command -4 log --max-count 25 AUTHORS :
	logbyz = dashdash-default-command --with-files : authors-command -4 log --max-count 100 AUTHORS :
	loglastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command log AUTHORS :	; git log of the last consecutive commit(s) done by the passed or queried user(s)
	logexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 log AUTHORS :
	logexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 1 AUTHORS :
	logexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 2 AUTHORS :
	logexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 3 AUTHORS :
	logexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 4 AUTHORS :
	logexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 5 AUTHORS :
	logexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 6 AUTHORS :
	logexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 7 AUTHORS :
	logexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 12 AUTHORS :
	logexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 25 AUTHORS :
	logexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 log --max-count 100 AUTHORS :
	loglastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command log AUTHORS :

	logfmine = mine-command -2 logf ME ; Logs from the current branch's perspective, skipping commits that come from merged branches, filtered for my personal commits.
	logfmine1 = logfmine --max-count 1
	logfmine2 = logfmine --max-count 2
	logfmine3 = logfmine --max-count 3
	logfmine4 = logfmine --max-count 4
	logfmine5 = logfmine --max-count 5
	logfmine6 = logfmine --max-count 6
	logfmine7 = logfmine --max-count 7
	logfminex = logfmine --max-count 12
	logfmineq = logfmine --max-count 25
	logfminez = logfmine --max-count 100
	logflastmine = mine-command -3 byuserrange-command logf ME	; Logs from the current branch's perspective, skipping commits that come from merged branches of the last consecutive commit(s) done by me.
	logfothers = others-command -2 logf OTHERS ; Logs from the current branch's perspective, skipping commits that come from merged branches, filtered for others' commits.
	logfothers1 = logfothers --max-count 1
	logfothers2 = logfothers --max-count 2
	logfothers3 = logfothers --max-count 3
	logfothers4 = logfothers --max-count 4
	logfothers5 = logfothers --max-count 5
	logfothers6 = logfothers --max-count 6
	logfothers7 = logfothers --max-count 7
	logfothersx = logfothers --max-count 12
	logfothersq = logfothers --max-count 25
	logfothersz = logfothers --max-count 100
	logflastothers = others-command -3 byuserrange-command logf OTHERS	; Logs from the current branch's perspective, skipping commits that come from merged branches of the last consecutive commit(s) done by others.
	logfteam = team-command -2 logf TEAM ; Logs from the current branch's perspective, skipping commits that come from merged branches, filtered for my team's commits.
	logfteam1 = logfteam --max-count 1
	logfteam2 = logfteam --max-count 2
	logfteam3 = logfteam --max-count 3
	logfteam4 = logfteam --max-count 4
	logfteam5 = logfteam --max-count 5
	logfteam6 = logfteam --max-count 6
	logfteam7 = logfteam --max-count 7
	logfteamx = logfteam --max-count 12
	logfteamq = logfteam --max-count 25
	logfteamz = logfteam --max-count 100
	logflastteam = team-command -3 byuserrange-command logf TEAM	; Logs from the current branch's perspective, skipping commits that come from merged branches of the last consecutive commit(s) done by my team.
	logfby = dashdash-default-command --with-files : authors-command -2 logf AUTHORS : ; Logs from the current branch's perspective, skipping commits that come from merged branches, filtered for that user(s)' commits.
	logfby1 = dashdash-default-command --with-files : authors-command -4 logf --max-count 1 AUTHORS :
	logfby2 = dashdash-default-command --with-files : authors-command -4 logf --max-count 2 AUTHORS :
	logfby3 = dashdash-default-command --with-files : authors-command -4 logf --max-count 3 AUTHORS :
	logfby4 = dashdash-default-command --with-files : authors-command -4 logf --max-count 4 AUTHORS :
	logfby5 = dashdash-default-command --with-files : authors-command -4 logf --max-count 5 AUTHORS :
	logfby6 = dashdash-default-command --with-files : authors-command -4 logf --max-count 6 AUTHORS :
	logfby7 = dashdash-default-command --with-files : authors-command -4 logf --max-count 7 AUTHORS :
	logfbyx = dashdash-default-command --with-files : authors-command -4 logf --max-count 12 AUTHORS :
	logfbyq = dashdash-default-command --with-files : authors-command -4 logf --max-count 25 AUTHORS :
	logfbyz = dashdash-default-command --with-files : authors-command -4 logf --max-count 100 AUTHORS :
	logflastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command logf AUTHORS :
	logfexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 logf AUTHORS :
	logfexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 1 AUTHORS :
	logfexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 2 AUTHORS :
	logfexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 3 AUTHORS :
	logfexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 4 AUTHORS :
	logfexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 5 AUTHORS :
	logfexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 6 AUTHORS :
	logfexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 7 AUTHORS :
	logfexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 12 AUTHORS :
	logfexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 25 AUTHORS :
	logfexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 logf --max-count 100 AUTHORS :
	logflastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command logf AUTHORS :

	logvmine = mine-command -2 logv ME ; logmine including filenames
	logvmine1 = logvmine --max-count 1
	logvmine2 = logvmine --max-count 2
	logvmine3 = logvmine --max-count 3
	logvmine4 = logvmine --max-count 4
	logvmine5 = logvmine --max-count 5
	logvmine6 = logvmine --max-count 6
	logvmine7 = logvmine --max-count 7
	logvminex = logvmine --max-count 12
	logvmineq = logvmine --max-count 25
	logvminez = logvmine --max-count 100
	logvfmine = mine-command -2 logvf ME
	logvflastmine = mine-command -3 byuserrange-command logvf ME	; git logvf of the last consecutive commit(s) done by me.
	logvothers = others-command -2 logv OTHERS ; logothers including filenames
	logvothers1 = logvothers --max-count 1
	logvothers2 = logvothers --max-count 2
	logvothers3 = logvothers --max-count 3
	logvothers4 = logvothers --max-count 4
	logvothers5 = logvothers --max-count 5
	logvothers6 = logvothers --max-count 6
	logvothers7 = logvothers --max-count 7
	logvothersx = logvothers --max-count 12
	logvothersq = logvothers --max-count 25
	logvothersz = logvothers --max-count 100
	logvfothers = others-command -2 logvf OTHERS
	logvflastothers = others-command -3 byuserrange-command logvf OTHERS	; git logvf of the last consecutive commit(s) done by others.
	logvteam = team-command -2 logv TEAM ; logteam including filenames
	logvteam1 = logvteam --max-count 1
	logvteam2 = logvteam --max-count 2
	logvteam3 = logvteam --max-count 3
	logvteam4 = logvteam --max-count 4
	logvteam5 = logvteam --max-count 5
	logvteam6 = logvteam --max-count 6
	logvteam7 = logvteam --max-count 7
	logvteamx = logvteam --max-count 12
	logvteamq = logvteam --max-count 25
	logvteamz = logvteam --max-count 100
	logvfteam = team-command -2 logvf TEAM
	logvflastteam = team-command -3 byuserrange-command logvf TEAM	; git logvf of the last consecutive commit(s) done by my team.
	logvby = dashdash-default-command --with-files : authors-command -2 logv AUTHORS : ; logby including filenames
	logvby1 = dashdash-default-command --with-files : authors-command -4 logv --max-count 1 AUTHORS :
	logvby2 = dashdash-default-command --with-files : authors-command -4 logv --max-count 2 AUTHORS :
	logvby3 = dashdash-default-command --with-files : authors-command -4 logv --max-count 3 AUTHORS :
	logvby4 = dashdash-default-command --with-files : authors-command -4 logv --max-count 4 AUTHORS :
	logvby5 = dashdash-default-command --with-files : authors-command -4 logv --max-count 5 AUTHORS :
	logvby6 = dashdash-default-command --with-files : authors-command -4 logv --max-count 6 AUTHORS :
	logvby7 = dashdash-default-command --with-files : authors-command -4 logv --max-count 7 AUTHORS :
	logvbyx = dashdash-default-command --with-files : authors-command -4 logv --max-count 12 AUTHORS :
	logvbyq = dashdash-default-command --with-files : authors-command -4 logv --max-count 25 AUTHORS :
	logvbyz = dashdash-default-command --with-files : authors-command -4 logv --max-count 100 AUTHORS :
	logvlastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command logv AUTHORS :	; loglastby including filenames
	logvfby = dashdash-default-command --with-files : authors-command -2 logvf AUTHORS : ; logby including filenames
	logvexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 logv AUTHORS :
	logvexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 1 AUTHORS :
	logvexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 2 AUTHORS :
	logvexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 3 AUTHORS :
	logvexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 4 AUTHORS :
	logvexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 5 AUTHORS :
	logvexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 6 AUTHORS :
	logvexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 7 AUTHORS :
	logvexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 12 AUTHORS :
	logvexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 25 AUTHORS :
	logvexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 logv --max-count 100 AUTHORS :
	logvlastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command logv AUTHORS :
	logvfexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 logvf AUTHORS :

	logfilesmine = mine-command -2 logfiles ME
	logfilesmine1 = logfilesmine --max-count 1
	logfilesmine2 = logfilesmine --max-count 2
	logfilesmine3 = logfilesmine --max-count 3
	logfilesmine4 = logfilesmine --max-count 4
	logfilesmine5 = logfilesmine --max-count 5
	logfilesmine6 = logfilesmine --max-count 6
	logfilesmine7 = logfilesmine --max-count 7
	logfilesminex = logfilesmine --max-count 12
	logfilesmineq = logfilesmine --max-count 25
	logfilesminez = logfilesmine --max-count 100
	logfileslastmine = mine-command -3 byuserrange-command logfiles ME	; git logfiles of the last consecutive commit(s) done by me.
	logfilesothers = others-command -2 logfiles OTHERS
	logfilesothers1 = logfilesothers --max-count 1
	logfilesothers2 = logfilesothers --max-count 2
	logfilesothers3 = logfilesothers --max-count 3
	logfilesothers4 = logfilesothers --max-count 4
	logfilesothers5 = logfilesothers --max-count 5
	logfilesothers6 = logfilesothers --max-count 6
	logfilesothers7 = logfilesothers --max-count 7
	logfilesothersx = logfilesothers --max-count 12
	logfilesothersq = logfilesothers --max-count 25
	logfilesothersz = logfilesothers --max-count 100
	logfileslastothers = others-command -3 byuserrange-command logfiles OTHERS	; git logfiles of the last consecutive commit(s) done by others.
	logfilesteam = team-command -2 logfiles TEAM
	logfilesteam1 = logfilesteam --max-count 1
	logfilesteam2 = logfilesteam --max-count 2
	logfilesteam3 = logfilesteam --max-count 3
	logfilesteam4 = logfilesteam --max-count 4
	logfilesteam5 = logfilesteam --max-count 5
	logfilesteam6 = logfilesteam --max-count 6
	logfilesteam7 = logfilesteam --max-count 7
	logfilesteamx = logfilesteam --max-count 12
	logfilesteamq = logfilesteam --max-count 25
	logfilesteamz = logfilesteam --max-count 100
	logfileslastteam = team-command -3 byuserrange-command logfiles TEAM	; git logfiles of the last consecutive commit(s) done by my team.
	logfilesby = dashdash-default-command --with-files : authors-command -2 logfiles AUTHORS :
	logfilesby1 = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 1 AUTHORS :
	logfilesby2 = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 2 AUTHORS :
	logfilesby3 = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 3 AUTHORS :
	logfilesby4 = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 4 AUTHORS :
	logfilesby5 = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 5 AUTHORS :
	logfilesby6 = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 6 AUTHORS :
	logfilesby7 = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 7 AUTHORS :
	logfilesbyx = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 12 AUTHORS :
	logfilesbyq = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 25 AUTHORS :
	logfilesbyz = dashdash-default-command --with-files : authors-command -4 logfiles --max-count 100 AUTHORS :
	logfileslastby = dashdash-default-command --with-files : authors-command -3 byuserrange-command logfiles AUTHORS :
	logfilesexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 logfiles AUTHORS :
	logfilesexceptby1 = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 1 AUTHORS :
	logfilesexceptby2 = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 2 AUTHORS :
	logfilesexceptby3 = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 3 AUTHORS :
	logfilesexceptby4 = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 4 AUTHORS :
	logfilesexceptby5 = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 5 AUTHORS :
	logfilesexceptby6 = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 6 AUTHORS :
	logfilesexceptby7 = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 7 AUTHORS :
	logfilesexceptbyx = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 12 AUTHORS :
	logfilesexceptbyq = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 25 AUTHORS :
	logfilesexceptbyz = dashdash-default-command --with-files : authors-command --invert-authors -4 logfiles --max-count 100 AUTHORS :
	logfileslastexceptby = dashdash-default-command --with-files : authors-command --invert-authors -3 byuserrange-command logfiles AUTHORS :

	lgst = stfiles-command lg	; One-line topology, author, date, tags and commit summary of currently modified files.
	logst = stfiles-command log	; Commit logs of currently modified files.
	logvst = stfiles-command logv	; Verbose commit logs (including filenames) of currently modified files.
	logfilesst = stfiles-command logfiles	; One-line author, date, tags and commit summary, plus the list of changed files of currently modified files.
	lcst = stfiles-command lc	; Logs together with diff between commits, of currently modified files.
	lgstmine = mine-command -2 lgst ME
	logstmine = mine-command -2 logst ME
	lcstmine = mine-command -2 lcst ME
	lgstothers = others-command -2 lgst OTHERS
	logstothers = others-command -2 logst OTHERS
	lcstothers = others-command -2 lcst OTHERS
	lgteam = team-command -2 lgst TEAM
	logteam = team-command -2 logst TEAM
	lcteam = team-command -2 lcst TEAM
	logstby = dashdash-default-command --with-files : authors-command -2 logst AUTHORS :
	lgstby = dashdash-default-command --with-files : authors-command -2 lgst AUTHORS :
	lcstby = dashdash-default-command --with-files : authors-command -2 lcst AUTHORS :
	logstexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 logst AUTHORS :
	lgstexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lgst AUTHORS :
	lcstexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lcst AUTHORS :

	lgi = stifiles-command lg	; One-line topology, author, date, tags and commit summary of currently staged files.
	logi = stifiles-command log	; Commit logs of currently staged files.
	logvi = stifiles-command logv	; One-line author, date, tags and commit summary, plus the list of changed files of currently staged files.
	logfilesi = stifiles-command logfiles	; Verbose commit logs (including filenames) of currently staged files.
	lci = stifiles-command lc	; Logs together with diff between commits, of currently staged files.
	lgimine = mine-command -2 lgi ME
	logimine = mine-command -2 logi ME
	lcimine = mine-command -2 lci ME
	lgiothers = others-command -2 lgi OTHERS
	logiothers = others-command -2 logi OTHERS
	lciothers = others-command -2 lci OTHERS
	lgteam = team-command -2 lgi TEAM
	logteam = team-command -2 logi TEAM
	lcteam = team-command -2 lci TEAM
	logiby = dashdash-default-command --with-files : authors-command -2 logi AUTHORS :
	lgiby = dashdash-default-command --with-files : authors-command -2 lgi AUTHORS :
	lciby = dashdash-default-command --with-files : authors-command -2 lci AUTHORS :
	logiexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 logi AUTHORS :
	lgiexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lgi AUTHORS :
	lciexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lci AUTHORS :

	lg-i = stIfiles-command lg	; One-line topology, author, date, tags and commit summary of modified but not staged files.
	log-i = stIfiles-command log	; Commit logs of modified but not staged files.
	logv-i = stIfiles-command logv	; Verbose commit logs (including filenames) of modified but not staged files.
	logfiles-i = stIfiles-command logfiles	; One-line author, date, tags and commit summary, plus the list of changed files of modified but not staged files.
	lc-i = stIfiles-command lc	; Logs together with diff between commits, of modified but not staged files.
	lg-imine = mine-command -2 lg-i ME
	log-imine = mine-command -2 log-i ME
	lc-imine = mine-command -2 lc-i ME
	lg-iothers = others-command -2 lg-i OTHERS
	log-iothers = others-command -2 log-i OTHERS
	lc-iothers = others-command -2 lc-i OTHERS
	lgteam = team-command -2 lg-i TEAM
	logteam = team-command -2 log-i TEAM
	lcteam = team-command -2 lc-i TEAM
	log-iby = dashdash-default-command --with-files : authors-command -2 log-i AUTHORS :
	lg-iby = dashdash-default-command --with-files : authors-command -2 lg-i AUTHORS :
	lc-iby = dashdash-default-command --with-files : authors-command -2 lc-i AUTHORS :
	log-iexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 log-i AUTHORS :
	lg-iexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lg-i AUTHORS :
	lc-iexceptby = dashdash-default-command --with-files : authors-command --invert-authors -2 lc-i AUTHORS :

	lglastfiles = showfiles-command lg	; One-line topology, author, date, tags and commit summary of files in the last commit / passed -r|--revision REVISION.
	loglastfiles = showfiles-command log	; Commit logs of files in the last commit / passed -r|--revision REVISION.
	logvlastfiles = showfiles-command logv	; Verbose commit logs (including filenames) of files in the last commit / passed -r|--revision REVISION.
	logfileslastfiles = showfiles-command logfiles	; One-line author, date, tags and commit summary, plus the list of changed files of files in the last commit / passed -r|--revision REVISION.
	lclastfiles = showfiles-command lc	; Logs together with diff between commits, of files in the last commit / passed -r|--revision REVISION.
	lglastfilesmine = mine-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lg ME RANGE	; One-line topology, author, date, tags and commit summary of the files of the commit last done by me [since -r|--revision REVISION].
	loglastfilesmine = mine-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE log ME RANGE	; Commit logs of the files of the commit last done by me [since -r|--revision REVISION].
	lclastfilesmine = mine-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lc ME RANGE
	lglastfilesothers = others-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lg OTHERS RANGE	; One-line topology, author, date, tags and commit summary of the files of the commit last done by others [since -r|--revision REVISION].
	loglastfilesothers = others-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE log OTHERS RANGE	; Commit logs of the files of the commit last done by others [since -r|--revision REVISION].
	lclastfilesothers = others-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lc OTHERS RANGE
	lglastfilesteam = team-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lg TEAM RANGE	; One-line topology, author, date, tags and commit summary of the files of the commit last done by my team [since -r|--revision REVISION].
	loglastfilesteam = team-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE log TEAM RANGE	; Commit logs of the files of the commit last done by my team [since -r|--revision REVISION].
	lclastfilesteam = team-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lc TEAM RANGE
	lglastfilesby = dashdash-default-command --with-files : authors-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lg AUTHORS RANGE :	; One-line topology, author, date, tags and commit summary of the files of the commit last done by the passed or queried user(s) [since -r|--revision REVISION].
	loglastfilesby = dashdash-default-command --with-files : authors-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE log AUTHORS RANGE :	; Commit logs of the files of the commit last done by the passed or queried user(s) [since -r|--revision REVISION].
	lclastfilesby = dashdash-default-command --with-files : authors-command -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lc AUTHORS RANGE :
	lglastfilesexceptby = dashdash-default-command --with-files : authors-command --invert-authors -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lg AUTHORS RANGE :
	loglastfilesexceptby = dashdash-default-command --with-files : authors-command --invert-authors -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE log AUTHORS RANGE :
	lclastfilesexceptby = dashdash-default-command --with-files : authors-command --invert-authors -8 byuserrange-command --last-only --keep-position showfiles-command --revision RANGE lc AUTHORS RANGE :

	lgs = selected-command --filter '' lg	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to log one-line topology, author, date, tags and commit summary by number.
	lgs1 = lgs 1
	lgs2 = lgs 2
	lgs3 = lgs 3
	lgs4 = lgs 4
	lgs5 = lgs 5
	lgs6 = lgs 6
	lgs7 = lgs 7
	lgsx = lgs 12
	lgsq = lgs 25
	lgsz = lgs 100
	logs = selected-command --filter '' log	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) commit logs by number.
	logs1 = logs 1
	logs2 = logs 2
	logs3 = logs 3
	logs4 = logs 4
	logs5 = logs 5
	logs6 = logs 6
	logs7 = logs 7
	logsx = logs 12
	logsq = logs 25
	logsz = logs 100
	logvs = selected-command --filter '' logv	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) verbose commit logs (including filenames) by number.
	logvs1 = logvs 1
	logvs2 = logvs 2
	logvs3 = logvs 3
	logvs4 = logvs 4
	logvs5 = logvs 5
	logvs6 = logvs 6
	logvs7 = logvs 7
	logvsx = logvs 12
	logvsq = logvs 25
	logvsz = logvs 100
	logfiless = selected-command --filter '' logfiles	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) one-line author, date, tags and commit summary, plus the list of changed files by number.
	logfiless1 = logfiless 1
	logfiless2 = logfiless 2
	logfiless3 = logfiless 3
	logfiless4 = logfiless 4
	logfiless5 = logfiless 5
	logfiless6 = logfiless 6
	logfiless7 = logfiless 7
	logfilessx = logfiless 12
	logfilessq = logfiless 25
	logfilessz = logfiless 100
	lcs = selected-command --filter '' lc	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to log commits together with diff between commits by number.
	lcs1 = lcs 1
	lcs2 = lcs 2
	lcs3 = lcs 3
	lcs4 = lcs 4
	lcs5 = lcs 5
	lcs6 = lcs 6
	lcs7 = lcs 7
	lcsx = lcs 12
	lcsq = lcs 25
	lcsz = lcs 100

	emaillg = email-command lg	; Start composing an email with one-line topology, author, date, tags and commit summary output to the originators of the covered commits.
	emaillg1 = email-command lg --max-count 1
	emaillg2 = email-command lg --max-count 2
	emaillg3 = email-command lg --max-count 3
	emaillg4 = email-command lg --max-count 4
	emaillg5 = email-command lg --max-count 5
	emaillg6 = email-command lg --max-count 6
	emaillg7 = email-command lg --max-count 7
	emaillgx = email-command lg --max-count 12
	emaillgq = email-command lg --max-count 25
	emaillgz = email-command lg --max-count 100
	emaillog = email-command log	; Start composing an email with log output to the originators of the covered commits.
	emaillog1 = email-command log --max-count 1
	emaillog2 = email-command log --max-count 2
	emaillog3 = email-command log --max-count 3
	emaillog4 = email-command log --max-count 4
	emaillog5 = email-command log --max-count 5
	emaillog6 = email-command log --max-count 6
	emaillog7 = email-command log --max-count 7
	emaillogx = email-command log --max-count 12
	emaillogq = email-command log --max-count 25
	emaillogz = email-command log --max-count 100
	emaillc = email-command lc	; Start composing an email with logs together with diff output to the originators of the covered commits.
	emailshow = email-command show	; Start composing an email with log + diff output to the originators of the covered commits.

	;; rev-parse: Resolve commit id from various passed ref types.
	;; commitid: Resolve commit id from the passed commit ref, with error message (unless -n|--no-error). With -q|--quiet, just performs the check without any output.
	;; equals: Check whether all passed refs refer to the same commit.
	rootcommits = wrapper log --max-parents=0 HEAD ; Show the first commit(s) in the repo.
	;; commitage: Show the age of the passed commit in seconds / compare the age against AGE / TIMESLOT.
	;; issigned: Test whether the last commit / <commit> is signed with a GPG key. / Print the GPG signing information of the last commit / <commit>.


	;; tagtype: List only those tags of the passed (annotated or lightweight) type.
	taglist = tagtype all
	taglist-annotated = tagtype annotated
	taglist-lightweight = tagtype lightweight
	;;; latesttag: Show the most recent tag (only one if a commit has multiple tags) [starting from <commit>].
	;; tagage: List tags by age (descending, starting with old tags). By default, uses the tag creation date; with -r|--resolve, uses the date of the tagged commit.
	tagrecent = tagage --newer 2w
	;; existstag: Check whether [all of] the passed <tagname> exists.
	;; describe: Show the most recent tag that is reachable from a commit, in the format <annotated tag>-g<commits on top>-<commit-hash>.
	;; desc: Show current / passed revision relative to the most recent ref that is reachable from a commit, in the format <tag|ref>[-<commits on top>-g<commit-hash>][-dirty].
	;; describe-version: Show (only the) most recent annotated tag (used for official versions etc.) that the current / passed revision is based on.
	;; decorated: Show the (short) ref names of the current / passed revision(s).
	containedbranch = contained-command '' ; Show relation to the first branch [that matches GLOB(s)] that comes after the passed revision, and thus contains it.
	annotate-contained-branch = annotate-contained-command branch
	containedversion = contained-command annotated ; Show (only the) first annotated tag (used for official versions etc.) [that matches GREP-ARGS] that comes after the passed revision, and thus contains it; i.e. in which versions this was shipped. (Or fall back to a branch name or the commit SHA.)
	annotate-contained-version = annotate-contained-command version
	;; describe-tag: Show relation to the most recent, also lightweight (used for archiving) tag name for the current / passed revision.
	containedtag = contained-command describe ; Show relation to the first tag (also lightweight, used for archiving) [that matches GLOB(s)] that comes after the passed revision, and thus contains it; i.e. in which versions this was shipped. (Or fall back to a branch name or the commit SHA.)
	annotate-contained-tag = annotate-contained-command tag
	;; timestamp: Print current build identifier containing the host, relation to previous tag, and build time.
	;; contains: List branch(es) and tag(s) that are reachable from the passed <commit> / HEAD. / Test whether BRANCHNAME|TAG is reachable from the passed <commit>.
	;; containsbranch: List branch(es) that are reachable from the passed <commit> / HEAD. / Test whether BRANCHNAME is reachable from the passed <commit>.
	;; containstag: List tag(s) that are reachable from the passed <commit> / HEAD. / Test whether TAG is reachable from the passed <commit>.

	picks = cherrypicks -v --abbrev=7	; See which changes from the current branch (e.g. feature) are already present in the passed branch (e.g. master).
	;; reflog: Show recorded changes to the tip of a branch, mostly to restore unreachable old commits via head@{1}.
	;; reflogselectedbranch: Show the reflog for branch [matching <glob>] that is interactively selected from existing branches.
	reflogsbr = reflogselectedbranch

	;; inout: Show incoming and outgoing commit logs between current / passed <branch> and its remote tracked branch / passed <other-branch> / passed <commit> and <other-commit> / corresponding remote branch of passed <remote>.
	iofiles = inout --files
	iosubmodules = inout --submodules
	io = inout --stat	; Show a one-line chronological summary of incoming and outgoing changes from oldest commit to newest between current / passed <branch> and its remote tracked branch / passed <other-branch> / passed <commit> and <other-commit> / corresponding remote branch of passed <remote>.
	ab = inout --ahead-behind	; Show a one-line ahead/behind summary of incoming and outgoing changes from oldest commit to newest between current / passed <branch> and its remote tracked branch / passed <other-branch> / passed <commit> and <other-commit> / corresponding remote branch of passed <remote>.

	cleanall = clean -d -x	; Remove all untracked files and directories, restoring a pristine working copy.
	;; lsprivate: Show all non-ignored files not under version control.
	;; rmprivate: Remove all non-ignored files not under version control.

	;; staged: Test whether there are / list staged files in index.
	;; editstage: Directly edit file(s) in the index without modifying the corresponding files in the working copy.
	ei = editstage
	;; editstageselected: Interactively select (from staged files or passed list of files) files (or directly pass N, M, ... selections) to directly edit in the index by number.
	eis = editstageselected
	eis1 = eis 1
	eis2 = eis 2
	eis3 = eis 3
	eis4 = eis 4
	eis5 = eis 5
	eis6 = eis 6
	eis7 = eis 7
	eisx = eis 12
	eisq = eis 25
	eisz = eis 100
	;; editlastcommit: Edit the file(s) that were changed in the last commit in the index without modifying the corresponding file(s) in the working copy.
	el = editlastcommit
	;; editlastcommitselected: Interactively select (from files changed in the last commit) files (or directly pass N, M, ... selections) from the last commit by number to edit in the index without modifying the corresponding files in the working copy.
	els = editlastcommitselected
	els1 = els 1
	els2 = els 2
	els3 = els 3
	els4 = els 4
	els5 = els 5
	els6 = els 6
	els7 = els 7
	elsx = els 12
	elsq = els 25
	elsz = els 100
	;; swapstage: Swap staged and unstaged (just updated; pass -A|--all to also include untracked files) changes.
	ii = swapstage
	undelete = wrapper-nocolor checkout HEAD -- ; Undo "git rm <file>"; puts the file back into working copy.
	unstage = reset HEAD --	; Undo "git add <file>"; removes the file from the index, so that it isn't committed. (Alternatively, you can commit a few files via "git commit <file>" directly, bypassing the index.)
	unstagehunk = reset --patch HEAD --	; Interactively select and remove individual hunks from the index.
	unstageh = unstagehunk
	;; unstageselected ; Interactively select (from staged files or passed list of files) files (or directly pass N, M, ... selections) to remove from the index by number.
	unstages = unstageselected
	unstages1 = unstages 1
	unstages2 = unstages 2
	unstages3 = unstages 3
	unstages4 = unstages 4
	unstages5 = unstages 5
	unstages6 = unstages 6
	unstages7 = unstages 7
	unstagesx = unstages 12
	unstagesq = unstages 25
	unstagesz = unstages 100
	unstageselectedhunk = unstageselected --patch ; Interactively select (from staged files or passed list of files) files (or directly pass N, M, ... selections) to remove individual hunks of from the index by number.
	unstagesh = unstageselectedhunk
	unstagesh1 = unstagesh 1
	unstagesh2 = unstagesh 2
	unstagesh3 = unstagesh 3
	unstagesh4 = unstagesh 4
	unstagesh5 = unstagesh 5
	unstagesh6 = unstagesh 6
	unstagesh7 = unstagesh 7
	unstageshx = unstagesh 12
	unstageshq = unstagesh 25
	unstageshz = unstagesh 100

	;; uncommit: Cancel the last / N commit(s) / up to and including REVISION; keep working copy and index. / Remove <path>s / selected hunks from the last commit.
	uncommithunk = uncommit --patch	; Interactively select and remove individual hunks from the last commit.
	uncommits = uncommitselected
	uncommits1 = uncommits 1
	uncommits2 = uncommits 2
	uncommits3 = uncommits 3
	uncommits4 = uncommits 4
	uncommits5 = uncommits 5
	uncommits6 = uncommits 6
	uncommits7 = uncommits 7
	uncommitsx = uncommits 12
	uncommitsq = uncommits 25
	uncommitsz = uncommits 100
	uncommitselectedhunk = uncommitselected --patch
	uncommitsh = uncommitselectedhunk
	uncommitsh1 = uncommitsh 1
	uncommitsh2 = uncommitsh 2
	uncommitsh3 = uncommitsh 3
	uncommitsh4 = uncommitsh 4
	uncommitsh5 = uncommitsh 5
	uncommitsh6 = uncommitsh 6
	uncommitsh7 = uncommitsh 7
	uncommitshx = uncommitsh 12
	uncommitshq = uncommitsh 25
	uncommitshz = uncommitsh 100

	;; uncommit-to-stash: Undo the last / N commit(s) / up to and including REVISION and stash those changes (in a single stash) instead. / Move changes to <path>s from the last commit to the stash. / Move changes [to <path>s] from passed COMMIT(s) to the stash (individually, via rebasing).
	uncommithunk-to-stash = uncommit-to-stash --patch	; Interactively select individual hunks from the last commit and move them to stash.
	uncommitselected-to-stash = "selectedcommit-command --pass-file-args -4 uncommit-to-stash --commits COMMITS ;"	; Undo commit(s) interactively chosen from the commits in the passed <range> and stash those commits.
	uncommit1-to-stash = uncommitselected-to-stash --max-count 1
	uncommit2-to-stash = uncommitselected-to-stash --max-count 2
	uncommit3-to-stash = uncommitselected-to-stash --max-count 3
	uncommit4-to-stash = uncommitselected-to-stash --max-count 4
	uncommit5-to-stash = uncommitselected-to-stash --max-count 5
	uncommit6-to-stash = uncommitselected-to-stash --max-count 6
	uncommit7-to-stash = uncommitselected-to-stash --max-count 7
	uncommitg-to-stash = "selectedgcommit-command --pass-file-args -4 uncommit-to-stash --commits COMMITS ;"
	uncommitchanged-to-stash = "selectedchangedcommit-command --pass-file-args -4 uncommit-to-stash --commits COMMITS ;"
	uncommittouched-to-stash = "selectedtouchedcommit-command --pass-file-args -4 uncommit-to-stash --commits COMMITS ;"

	;; uncommit-to-branch: Undo the last commit / N commits / commits up to <commit> of the current branch, and check it out in a newly created <branch> instead.
	uncommitselected-to-branch = selectedcommit-command --single-only -3 uncommit-to-branch --from COMMITS	; Undo commits of the current branch up to the commit interactively chosen from the commits in the passed <range>, and check it out in a newly created <branch> instead.
	uncommit1-to-branch = uncommitselected-to-branch --max-count 1
	uncommit2-to-branch = uncommitselected-to-branch --max-count 2
	uncommit3-to-branch = uncommitselected-to-branch --max-count 3
	uncommit4-to-branch = uncommitselected-to-branch --max-count 4
	uncommit5-to-branch = uncommitselected-to-branch --max-count 5
	uncommit6-to-branch = uncommitselected-to-branch --max-count 6
	uncommit7-to-branch = uncommitselected-to-branch --max-count 7
	uncommitg-to-branch = selectedgcommit-command --single-only -3 uncommit-to-branch --from COMMITS	; Undo commits of the current branch up to the commit interactively chosen from the commits where log messages match the specified text or /regexp/, and check it out in a newly created <branch> instead.
	uncommitchanged-to-branch = selectedchangedcommit-command --single-only -3 uncommit-to-branch --from COMMITS	; Undo commits of the current branch up to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	uncommittouched-to-branch = selectedtouchedcommit-command --single-only -3 uncommit-to-branch --from COMMITS	; Undo commits of the current branch up to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	;; peel: Cancel the last / N commit(s) / REVISION also from index; keep only the working copy.
	;; wipecommit: Completely remove the last / N commit(s) / up to and including REVISION, also from working copy and index. If a merge commit is wiped, asks which merge parent to pick up.
	;; wipe: Reset HEAD, working copy and index [to <branch>] [<paths>...]. Ensures that the current branch isn't dirty.
	wipes = wipeselected	; Interactively select (from modified files or passed list of files) files (or directly pass N, M, ... selections) to reset HEAD, working copy and index for.

	wipetoselected = selectedcommit-command --single-only --pass-file-args -2 wipe COMMITS	; Reset HEAD, working copy and index to the commit interactively chosen from the commits in the passed <range>.
	wipeto1 = wipetoselected --max-count 1
	wipeto2 = wipetoselected --max-count 2
	wipeto3 = wipetoselected --max-count 3
	wipeto4 = wipetoselected --max-count 4
	wipeto5 = wipetoselected --max-count 5
	wipeto6 = wipetoselected --max-count 6
	wipeto7 = wipetoselected --max-count 7
	wipetox = wipetoselected --max-count 12
	wipetoq = wipetoselected --max-count 25
	wipetoz = wipetoselected --max-count 100
	wipetog = selectedgcommit-command --single-only -2 wipe COMMITS	; Reset HEAD, working copy and index to the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	wipetochanged = selectedchangedcommit-command --single-only -2 wipe COMMITS	; Reset HEAD, working copy and index to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	wipetotouched = selectedtouchedcommit-command --single-only -2 wipe COMMITS	; Reset HEAD, working copy and index to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	wipetoselectedref = selectedref-command --single-only -2 wipe COMMITS	; Reset HEAD, working copy and index to the commit interactively chosen from the (recent | N) refs [that cover FILE ...] from the reflog.
	wipetoref1 = wipetoselectedref --max-count 1
	wipetoref2 = wipetoselectedref --max-count 2
	wipetoref3 = wipetoselectedref --max-count 3
	wipetoref4 = wipetoselectedref --max-count 4
	wipetoref5 = wipetoselectedref --max-count 5
	wipetoref6 = wipetoselectedref --max-count 6
	wipetoref7 = wipetoselectedref --max-count 7
	wipetorefx = wipetoselectedref --max-count 12
	wipetorefq = wipetoselectedref --max-count 25
	wipetorefz = wipetoselectedref --max-count 100

	wipetoselectedcommitref = selectedref-command --commits-only --single-only -2 wipe COMMITS	; Reset HEAD, working copy and index to the commit interactively chosen from the (recent | N) commits [that cover FILE ...] from the reflog.
	wipetocommitref1 = wipetoselectedcommitref --max-count 1
	wipetocommitref2 = wipetoselectedcommitref --max-count 2
	wipetocommitref3 = wipetoselectedcommitref --max-count 3
	wipetocommitref4 = wipetoselectedcommitref --max-count 4
	wipetocommitref5 = wipetoselectedcommitref --max-count 5
	wipetocommitref6 = wipetoselectedcommitref --max-count 6
	wipetocommitref7 = wipetoselectedcommitref --max-count 7
	wipetocommitrefx = wipetoselectedcommitref --max-count 12
	wipetocommitrefq = wipetoselectedcommitref --max-count 25
	wipetocommitrefz = wipetoselectedcommitref --max-count 100
	wipetolastcommitref = lastcommitref-command -2 wipe COMMITS	; Reset HEAD, working copy and index to the last commit found in the reflog.
	wipetopreviouscommitref = previouscommitref-command -2 wipe COMMITS	; Reset HEAD, working copy and index to the previous commit found in the reflog.

	softresettoselectedref = selectedref-command --single-only -3 reset --soft COMMITS	; Reset only HEAD to the commit interactively chosen from the (recent | N) refs [that cover FILE ...] from the reflog.
	softresettoref1 = softresettoselectedref --max-count 1
	softresettoref2 = softresettoselectedref --max-count 2
	softresettoref3 = softresettoselectedref --max-count 3
	softresettoref4 = softresettoselectedref --max-count 4
	softresettoref5 = softresettoselectedref --max-count 5
	softresettoref6 = softresettoselectedref --max-count 6
	softresettoref7 = softresettoselectedref --max-count 7
	softresettorefx = softresettoselectedref --max-count 12
	softresettorefq = softresettoselectedref --max-count 25
	softresettorefz = softresettoselectedref --max-count 100

	softresettoselectedcommitref = selectedref-command --commits-only --single-only -3 reset --soft COMMITS	; Reset only HEAD to the commit interactively chosen from the (recent | N) commits [that cover FILE ...] from the reflog.
	softresettocommitref1 = softresettoselectedcommitref --max-count 1
	softresettocommitref2 = softresettoselectedcommitref --max-count 2
	softresettocommitref3 = softresettoselectedcommitref --max-count 3
	softresettocommitref4 = softresettoselectedcommitref --max-count 4
	softresettocommitref5 = softresettoselectedcommitref --max-count 5
	softresettocommitref6 = softresettoselectedcommitref --max-count 6
	softresettocommitref7 = softresettoselectedcommitref --max-count 7
	softresettocommitrefx = softresettoselectedcommitref --max-count 12
	softresettocommitrefq = softresettoselectedcommitref --max-count 25
	softresettocommitrefz = softresettoselectedcommitref --max-count 100
	softresettolastcommitref = lastcommitref-command -3 reset --soft COMMITS	; Reset only HEAD to the last commit found in the reflog.
	softresettopreviouscommitref = previouscommitref-command -3 reset --soft COMMITS	; Reset only HEAD to the previous commit found in the reflog.

	;; hardreset = reset --hard ; Reset HEAD, working copy and index to <branch>. Destructive without safety check (but needs a passed <commit>)!
	;; reset-to-tracked: Reset my current branch to the HEAD of the tracked branch. Use this when the local branch has been pointed elsewhere (e.g. due to an attempted rebase), and you want to restore the original state. The working copy is left intact.
	reset-back = reset ORIG_HEAD	; Undo a previous git reset; allows you to go back into the future after moving the HEAD to the past.
	track = branch --set-upstream-to	; Change the remote the current branch is tracking.
	;; tracks: Show which remote branch is tracked by the current branch.
	;; trackedremote: Show which remote is tracked by the current / passed branch.

	;; pushall: Push all branches, tags, and notes (if exist).
	;; up: Pull and rebase the current branch from passed <remote>. (By default, pull prefers merges over rebasing). Handles a dirty working copy by temporarily stashing it. Shows a log of pulled changes.
	;; fetchonly: Only fetch changes (no update of local branches) in REMOTE, and show a log of the changes.
	;; pull: Get and fast-forward changes; don't merge or rebase. Let's do that explicitly via the corresponding commands.
	;; rtrack: Make the current branch track in the passed <remote> the passed <branch> / eponymous branch.

	; rebasing
	;; isrebasing: Test whether a rebase (conflict resolution) is under way.
	rbcheckadst = toadst rbcheck ; Check for problems with rebasing all commits affected by lines that have been changed in currently modified files.
	rbcheckadi = toadi rbcheck	; Check for problems with rebasing all commits affected by lines that have been changed in currently staged files.
	rbcheckad-i = toadI rbcheck	; Check for problems with rebasing all commits affected by lines that have been changed in currently modified but not staged files.

	rb = wrapper-nocolor rebase
	rball = wrapper-nocolor rebase --root	; Rebase all commits including the very first one.
	rbselected = selectedpermanentcommit-command --single-only -4 previouscommit-command --commit COMMITS rebase	; Interactive rebase up to the commit interactively chosen from the commits in the passed <range>.
	rb1 = rbselected HEAD~1..
	rb2 = rbselected HEAD~2..
	rb3 = rbselected HEAD~3..
	rb4 = rbselected HEAD~4..
	rb5 = rbselected HEAD~5..
	rb6 = rbselected HEAD~6..
	rb7 = rbselected HEAD~7..
	rbx = rbselected HEAD~12..
	; No rbq due to clash with "quit rebasing" alias.
	rbz = rbselected HEAD~100..
	rbg = selectedgcommit-command --single-only -4 previouscommit-command --commit COMMITS rebase	; Rebase up to the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	rbchanged = selectedchangedcommit-command --single-only -4 previouscommit-command --commit COMMITS rebase	; Rebase up to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	rbtouched = selectedtouchedcommit-command --single-only -4 previouscommit-command --commit COMMITS rebase	; Rebase up to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	rbi = wrapper-nocolor rebase --interactive
	rbiall = wrapper-nocolor rebase --interactive --root	; Interactively rebase all commits including the very first one.
	rbiselected = selectedpermanentcommit-command --single-only -4 previouscommit-command --commit COMMITS rbi	; Interactive rebase up to the commit interactively chosen from the commits in the passed <range>.
	rbi1 = rbiselected HEAD~1..
	rbi2 = rbiselected HEAD~2..
	rbi3 = rbiselected HEAD~3..
	rbi4 = rbiselected HEAD~4..
	rbi5 = rbiselected HEAD~5..
	rbi6 = rbiselected HEAD~6..
	rbi7 = rbiselected HEAD~7..
	rbix = rbiselected HEAD~12..
	rbiq = rbiselected HEAD~25..
	rbiz = rbiselected HEAD~100..
	rbig = selectedgcommit-command --single-only -4 previouscommit-command --commit COMMITS rbi	; Interactive rebase up to the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	rbichanged = selectedchangedcommit-command --single-only -4 previouscommit-command --commit COMMITS rbi	; Interactive rebase up to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	rbitouched = selectedtouchedcommit-command --single-only -4 previouscommit-command --commit COMMITS rbi	; Interactive rebase up to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	;; rbni: Interactive rebase without invoking the editor. Use for trivial rebases like squash/fixup commits.
	rbniall = rbni --root	; Interactively rebase without invoking the editor all commits including the very first one.
	rbniselected = selectedpermanentcommit-command --single-only -4 previouscommit-command --commit COMMITS rbni	; Interactive rebase without invoking the editor up to the commit interactively chosen from the commits in the passed <range>.
	rbni1 = rbniselected HEAD~1..
	rbni2 = rbniselected HEAD~2..
	rbni3 = rbniselected HEAD~3..
	rbni4 = rbniselected HEAD~4..
	rbni5 = rbniselected HEAD~5..
	rbni6 = rbniselected HEAD~6..
	rbni7 = rbniselected HEAD~7..
	rbnix = rbniselected HEAD~12..
	rbniq = rbniselected HEAD~25..
	rbniz = rbniselected HEAD~100..
	rbnig = selectedgcommit-command --single-only -4 previouscommit-command --commit COMMITS rbni	; Interactive rebase without invoking the editor up to the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	rbnichanged = selectedchangedcommit-command --single-only -4 previouscommit-command --commit COMMITS rbni	; Interactive rebase without invoking the editor up to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	rbnitouched = selectedtouchedcommit-command --single-only -4 previouscommit-command --commit COMMITS rbni	; Interactive rebase without invoking the editor up to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	rbc = wrapper-nocolor rebase --continue	; Commit (after adding resolved conflicts) and continue with any subsequent commits to be rebased.
	rbnc = wrapper-nocolor -c core.editor=true rebase --continue	; Commit without re-editing the message and continue with any subsequent commits to be rebased.
	;; rbcu: addu + rbc: Stage modified files (i.e. those with resolved conflicts) and continue rebasing.
	;; rbcnu: addu + rbnc: Stage modified files (i.e. those with resolved conflicts) and continue rebasing without re-editing the commit message.
	rbs = wrapper-nocolor rebase --skip	; Skip the current patch (as if you had deleted the line).
	rbq = wrapper-nocolor rebase --abort	; Cancel the operation and return to the pre-sequence state.
	rbe = wrapper-nocolor rebase --edit-todo	; Edit the todo list during an interactive rebase.
	rbu = reset @{1}	; Undo the last rebase commit. Effectively squashes this patch with the previous one.
	rbl = wrapper-nocolor rebase --show-current-patch	; Show the current patch in an interactive rebase or when rebase is stopped because of conflicts.
	;; rebaselocalbr: Rebase all / the last committed N local branches (except for the current branch and master (and base branch if defined)) to the updated passed (or configured in branch.<name>.remote and branch.<name>.merge) upstream head.
	rblast = previouscommitnumber-command rebase	; Rebase the last / -n|--count N commit(s).
	rbilast = rblast --interactive
	rbnilast = previouscommitnumber-command rbni
	;; rblastfixup: Rebase the last [<number>, useful when there are forgotten commits that cannot be rewritten any more] fixup / amend / squash commit(s) to, well, incorporate the fixes / squash the commits into the current branch.
	rblastfixup1 = rblastfixup --max-count=1
	rblastfixup2 = rblastfixup --max-count=2
	rblastfixup3 = rblastfixup --max-count=3
	rblastfixup4 = rblastfixup --max-count=4
	rblastfixup5 = rblastfixup --max-count=5
	rblastfixup6 = rblastfixup --max-count=6
	rblastfixup7 = rblastfixup --max-count=7
	rblastfixupx = rblastfixup --max-count=12
	rblastfixupq = rblastfixup --max-count=25
	rblastfixupz = rblastfixup --max-count=100


	;; rebaseselectedbranch: Rebase the branch [matching <glob>] that is interactively selected from existing branches.
	rbsbr = rebaseselectedbranch
	;; rrebaseselectedbranch: Rebase the branch [matching <glob>] that is interactively selected from existing branches in the passed REMOTE.

	;; rebase-todo-list-command: Rebase with the original interactive rebase todo list programmatically manipulated by the passed COMMAND(s).
	;;; rebasepicklast: Rebase and just pick the last [N] commits; all preceding commits will be discarded.

	; No rbsedreword; we cannot place the <upstream> argument before the sed arguments.
	rbsedrewordselected = selectedpermanentcommit-command --single-only --range-is-last --no-file-args --keep-position previouscommit-command --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword	; Reword the commit messages through manipulation via SED-ARGUMENTs up to the commit interactively chosen from the commits in the passed <range>.
	rbsedreword1 = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~1.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedreword2 = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~2.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedreword3 = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~3.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedreword4 = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~4.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedreword5 = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~5.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedreword6 = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~6.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedreword7 = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~7.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedrewordx = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~12.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedrewordq = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~25.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedrewordz = selectedpermanentcommit-command --single-only --no-file-args --keep-position previouscommit-command HEAD~100.. --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword
	rbsedrewordg = selectedgcommit-command --single-only --no-file-args --keep-position previouscommit-command --range=--relative-date --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword	; Reword the commit messages through manipulation via SED-ARGUMENTs up to the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	rbsedrewordchanged = selectedchangedcommit-command --single-only --no-file-args --keep-position previouscommit-command --range=--relative-date --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword	; Reword the commit messages through manipulation via SED-ARGUMENTs up to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	rbsedrewordtouched = selectedtouchedcommit-command --single-only --no-file-args --keep-position previouscommit-command --range=--relative-date --commit COMMITS --keep-position rebase PREVIOUSCOMMIT -- sedreword	; Reword the commit messages through manipulation via SED-ARGUMENTs up to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	;; segregatecommit: Split the last commit into separate commits for files matching PATH-GLOB / whose contents match PATTERN; each separate commit's message may be modified as well.
	;; segregatecommits: Split the individual commits in the current branch that are not in <upstream> via rebasing into separate commits for files matching PATH-GLOB / whose contents match PATTERN and optionally put TEXT before / after the commit subject (to allow easier recognition in a following git rebase / bifurcation).
	segregatecommitsselected = selectedpermanentcommit-command --single-only -4 previouscommit-command --commit COMMITS segregatecommits	; Split up to the commit interactively chosen from the commits in the passed <range>.
	segregatecommits1 = segregatecommitsselected HEAD~1..
	segregatecommits2 = segregatecommitsselected HEAD~2..
	segregatecommits3 = segregatecommitsselected HEAD~3..
	segregatecommits4 = segregatecommitsselected HEAD~4..
	segregatecommits5 = segregatecommitsselected HEAD~5..
	segregatecommits6 = segregatecommitsselected HEAD~6..
	segregatecommits7 = segregatecommitsselected HEAD~7..
	segregatecommitsx = segregatecommitsselected HEAD~12..
	segregatecommitsq = segregatecommitsselected HEAD~25..
	segregatecommitsz = segregatecommitsselected HEAD~100..
	segregatecommitsg = selectedgcommit-command --single-only -4 previouscommit-command --commit COMMITS segregatecommits	; Split up to the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	segregatecommitschanged = selectedchangedcommit-command --single-only -4 previouscommit-command --commit COMMITS segregatecommits	; Split up to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	segregatecommitstouched = selectedtouchedcommit-command --single-only -4 previouscommit-command --commit COMMITS segregatecommits	; Split up to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	segregateandbifurcate = segregatecommits --and-bifurcate
	segregateandbifurcateselected = selectedpermanentcommit-command --single-only -4 previouscommit-command --commit COMMITS segregateandbifurcate
	segregateandbifurcate1 = segregateandbifurcateselected HEAD~1..
	segregateandbifurcate2 = segregateandbifurcateselected HEAD~2..
	segregateandbifurcate3 = segregateandbifurcateselected HEAD~3..
	segregateandbifurcate4 = segregateandbifurcateselected HEAD~4..
	segregateandbifurcate5 = segregateandbifurcateselected HEAD~5..
	segregateandbifurcate6 = segregateandbifurcateselected HEAD~6..
	segregateandbifurcate7 = segregateandbifurcateselected HEAD~7..
	segregateandbifurcatex = segregateandbifurcateselected HEAD~12..
	segregateandbifurcateq = segregateandbifurcateselected HEAD~25..
	segregateandbifurcatez = segregateandbifurcateselected HEAD~100..
	segregateandbifurcateg = selectedgcommit-command --single-only -4 previouscommit-command --commit COMMITS segregateandbifurcate
	segregateandbifurcatechanged = selectedchangedcommit-command --single-only -4 previouscommit-command --commit COMMITS segregateandbifurcate
	segregateandbifurcatetouched = selectedtouchedcommit-command --single-only -4 previouscommit-command --commit COMMITS segregateandbifurcate

	;; bifurcate: Distribute commits in the current branch that are not in <upstream> onto different branches by repeatedly rebasing (likely disjunct) sequences of commits. Works like rebase, but in the editor you'll segregate commits via empty lines and optionally put rebase or branch naming arguments before each sequence.
	bifurcateselected = selectedpermanentcommit-command --single-only -4 previouscommit-command --commit COMMITS bifurcate	; Bifurcate up to the commit interactively chosen from the commits in the passed <range>.
	bifurcate1 = bifurcateselected HEAD~1..
	bifurcate2 = bifurcateselected HEAD~2..
	bifurcate3 = bifurcateselected HEAD~3..
	bifurcate4 = bifurcateselected HEAD~4..
	bifurcate5 = bifurcateselected HEAD~5..
	bifurcate6 = bifurcateselected HEAD~6..
	bifurcate7 = bifurcateselected HEAD~7..
	bifurcatex = bifurcateselected HEAD~12..
	bifurcateq = bifurcateselected HEAD~25..
	bifurcatez = bifurcateselected HEAD~100..
	bifurcateg = selectedgcommit-command --single-only -4 previouscommit-command --commit COMMITS bifurcate	; Bifurcate up to the commit interactively chosen from the commits where log messages match the specified text or /regexp/.
	bifurcatechanged = selectedchangedcommit-command --single-only -4 previouscommit-command --commit COMMITS bifurcate	; Bifurcate up to the commit interactively chosen from the commits where the actual diff; i.e. those filepairs whose preimage and postimage have different number of occurrences of the text or /regexp/.
	bifurcatetouched = selectedtouchedcommit-command --single-only -4 previouscommit-command --commit COMMITS bifurcate	; Bifurcate up to the commit interactively chosen from the commits where in the diff the text or /regexp/ matches, without necessarily changing the number of occurrences themselves.

	; merging
	;; ismerging: Test whether a merge (conflict resolution) is currently under way.
	;; ismerge: Test whether the last commit / <commit> has been created by a merge. / Print all parent commits of the last commit / <commit>.
	;; hasmerge: Test whether the <revision-range> contains any merge commit(s). / Print all merge commits inside <revision-range>.
	;; conflicts: List files with merge conficts.
	cx = conflicts
	addconflicts = conflicted-command add	; Stage files with merge conflicts.
	addcx = addconflicts
	mergetoolselected = selectedconflicted-command mergetool   ; Merge selected files.
	mts = mergetoolselected
	mts1 = mts 1
	mts2 = mts 2
	mts3 = mts 3
	mts4 = mts 4
	mts5 = mts 5
	mts6 = mts 6
	mts7 = mts 7
	mtsx = mts 12
	mtsq = mts 25
	mtsz = mts 100
	;; conflictunresolve: Bring back merged FILE(s) into their conflicted state.
	cxunresolve = conflictunresolve
	;; conflictunresolves: Interactively select (from resolved conflicted files [in <path>]) files (or directly pass N, M, ... selections) file(s) to bring back into their conflicted state.
	cxunresolves = conflictunresolves
	;; conflictwipe: Abort the merge conflicts and MERGING / CHERRYPICKING state, e.g. when you want to wipe / change the working copy, anyway, and currently can't because of "error: you need to resolve your current index first".
	cxwipe = conflictwipe
	;; conflictpick: Take the contents of conflicted files / <path>(s) from <ref> to resolve current conflicts. Useful if you've already successfully done a merge (in <ref>) but now try to rebase the branch instead.
	cxpick = conflictpick
	;; rerere: Extension of rerere, with the following additional subcommands: list|delete|wipe
	; Source: http://akahn.net/2011/10/12/working-through-git-conflicts-in-vim.html
	; Source: https://medium.com/@porteneuve/fix-conflicts-only-once-with-git-rerere-7d116b2cec67
	;; cob: Keep "base", the common ancestor in case of merge conflicts.
	;; cobs: Interactively select (from conflicted files or passed list of files) files (or directly pass N, M, ... selections) and "base", the common ancestor.
	;; coo: Keep "ours", the original one we had (ORIG_HEAD), or the one we're rebasing onto, in case of merge conflicts.
	;; coos: Interactively select (from conflicted files [in <path>]) files (or directly pass N, M, ... selections) and keep "ours", the original one we had (ORIG_HEAD), or the one we're rebasing onto.
	;; cot: Keep "theirs", the version merged in (MERGE_HEAD), or the one from the branch we're rebasing, in case of merge conflicts.
	;; cots: Interactively select (from conflicted files [in <path>]) files (or directly pass N, M, ... selections) and keep "theirs", the version merged in (MERGE_HEAD), or the one from the branch we're rebasing.
	mergeo = wrapper-nocolor merge --ours	; merge that forces conflicting hunks to be auto-resolved cleanly by favoring our version. Changes from the other tree that do not conflict with our side are reflected in the merge result.
	merget = wrapper-nocolor merge --theirs	; merge that forces conflicting hunks to be auto-resolved cleanly by favoring the other tree's version. Changes from our side that do not conflict with the other tree are reflected in the merge result.
	mergerecordonly = wrapper-nocolor merge --record-only	; no-op merge that always uses the current branch head and ignores all changes from all other branches, effectively just recording that a merge has happened.
	;; mergedryrun: Test whether a merge will do through or cause conflicts without actually doing the merge.
	;; mergeancestor: Join the development history of an earlier <commit> into a dedicated merge commit on the current branch. On its own, "git merge --no-ff will refuse such with "Already up to date."
	mergebl = wrapper-nocolor merge @{-1}
	mergedrbl = mergedryrun @{-1}
	;; mergeto: Merge the current branch to <target-branch>.
	;; mergelocalbr: Merge all / the last committed N local branches (except for the current branch and master (and base branch if defined)).
	;; mergelocalbrc: Merge all / the last committed N local branches (except for the current branch and master (and base branch if defined)) ordered by date of first commit.
	mergelatest = mergelocalbr --count 1
	mergelatestc = mergelocalbrc --count 1
	;; mergeselectedbranch: Merge the branch(es) [matching <glob>] that is interactively selected from existing branches.
	mergesbr = mergeselectedbranch
	mergedryrunsbr = mergedryrunselectedbranch
	;; rmergeselectedbranch: Merge the branch(es) [matching <glob>] that is interactively selected from existing branches in the passed REMOTE.
	mt = mergetool
	;; merge-base: Identify branch point (common ancestor).
	; The fast-forward command does the second part of git pull, it merges the
	; remote tracking branch. Use this when you've already fetched the changes
	; (to avoid the superfluous network exchange), and you get the message "Your
	; branch is behind 'origin/tracked-branch', and can be fast-forwarded."
	; after switching to a branch.
	fast-forward = -c merge.defaultToUpstream=true wrapper-nocolor merge --ff-only
	ff = -c merge.defaultToUpstream=true wrapper-nocolor merge --ff-only
	ffbl = ff @{-1}
	ffto = -c merge.defaultToUpstream=true wrapper-nocolor mergeto --ff-only	; Merge the current branch to <target-branch>.
	;; mergesummary: Show enriched log (for passed remote) of the passed merge commit, including URLs to the merge commit, the merged changes, full commit message, and changed files.
	omergesummary = mergesummary origin
	umergesummary = mergesummary upstream
	;; unmerge: Undo the merge done in the last commit of the current branch, and checkout the original unmerged branch again.
	;; mergeamend: Commit the staged changes to the (revived) branch that was merged into the last commit of the current branch, and merge it again.
	;; swapmergeparents: Swap the order of the two parents of the merge done in the last commit of the current branch.

	noff = wrapper-nocolor merge --no-ff
	noffbl =noff @{-1}
	noffto = mergeto --no-ff
	;; mergecheck: Check whether the conditions for a merge are good.
	;; reintegrate: Merge / rebase <branch> to the current branch, then delete it from the local repository as well as a tracked remote (if it exists there). HUB
	;; reintegratelb: Merge / rebase the last checked-out branch to the current branch, then delete it from the local repository as well as a tracked remote (if it exists there). HUB
	;; reintegrateto: Merge / rebase the current branch to the passed <branch>, then delete it from the local repository as well as a tracked remote (if it exists there). HUB
	;; reintegratetoselected: Merge / rebase the current branch to the branch that is interactively selected from existing branches, then delete it from the local repository as well as a tracked remote (if it exists there). HUB
	;; ffintegrateto: Merge / rebase the current branch to the passed <branch> via a reverse integration; i.e. the passed <branch> is merged / rebased to the current branch first so that the reintegration is a simple fast-forward. HUB
	;; ffintegratetoselected: Merge / rebase the current branch to the branch that is interactively selected from existing branches via a reverse integration; i.e. the selected branch is merged / rebased to the current branch first so that the reintegration is a simple fast-forward. HUB
	;; reffintegrate: Reattempt a merge / rebase of the passed <branch> to the current target branch via a reverse integration after the push of the target branch was rejected because the remote contains work that you do not have locally. It undoes a previous merge and then fast-forward merges / rebases <branch> again.
	;; pull-requesttoselected: Create a GitHub pull request for the current branch to the branch that is interactively selected from existing branches.
	;; pull-requestforselected: Create a GitHub pull request for the branch that is interactively selected from existing branches.

	;; ...toa: to the preceding branch (as tagged or referenced anywhere in the history (also by remotes))
	mergechecktoa = previousbranch-command --any --keep-position mergecheck --merge-to BRANCH
	reintegratetoa = previousbranch-command --any --keep-position reintegrateto --branch BRANCH ; HUB
	ffintegratetoa = previousbranch-command --any --keep-position ffintegrateto --branch BRANCH ; HUB
	;; pull-requesttoa
	;; No pull-requestfora, as that may or may not be a branch.

	;; ...tob: to the preceding branch
	mergechecktob = previousbranch-command --keep-position mergecheck --merge-to BRANCH
	reintegratetob = previousbranch-command --keep-position reintegrateto --branch BRANCH ; HUB
	ffintegratetob = previousbranch-command --keep-position ffintegrateto --branch BRANCH ; HUB
	;; pull-requesttob
	;; pull-requestforb

	;; ...b2: to the two preceding branches
	mergechecktob2 = previousbranch-command --branch-number 2 --keep-position mergecheck --merge-to BRANCH
	reintegratetob2 = previousbranch-command --branch-number 2 --keep-position reintegrateto --branch BRANCH ; HUB
	ffintegratetob2 = previousbranch-command --branch-number 2 --keep-position ffintegrateto --branch BRANCH ; HUB
	;; pull-requesttob2
	;; pull-requestforb2

	;; ...b3: to the three preceding branches
	mergechecktob3 = previousbranch-command --branch-number 3 --keep-position mergecheck --merge-to BRANCH
	reintegratetob3 = previousbranch-command --branch-number 3 --keep-position reintegrateto --branch BRANCH ; HUB
	ffintegratetob3 = previousbranch-command --branch-number 3 --keep-position ffintegrateto --branch BRANCH ; HUB
	;; pull-requesttob3
	;; pull-requestforb3

	;; ...tops: to the previous stacked branch
	mergechecktops = rev-range-to-previous-stack --no-range --keep-position mergecheck --merge-to RANGE
	reintegratetops = rev-range-to-previous-stack --no-range --keep-position reintegrateto --branch RANGE ; HUB
	ffintegratetops = rev-range-to-previous-stack --no-range --keep-position ffintegrateto --branch RANGE ; HUB
	;; pull-requesttops
	;; pull-requestforps

	;; ...m: to the master branch
	mergechecktom = master-command --keep-position mergecheck --merge-to MASTER
	reintegratetom = master-command --keep-position reintegrateto --branch MASTER ; HUB
	ffintegratetom = master-command --keep-position ffintegrateto --branch MASTER ; HUB
	;; pull-requesttom
	;; No pull-requestform, as pull requests shouldn't be made for the master branch, and if they are, there shouldn't be any other branches so no branch selection is needed.

	;; ...n: to the base branch
	mergecheckton = base-command --keep-position mergecheck --merge-to BASE
	reintegrateton = base-command --keep-position reintegrateto --branch BASE ; HUB
	ffintegrateton = base-command --keep-position ffintegrateto --branch BASE ; HUB
	;; pull-requestton
	;; pull-requestforn

	;; ...bl: to the last checked-out branch (typically the one it was branched off)
	mergechecktobl = previousbranch-command --last-checkout --keep-position mergecheck --merge-to BRANCH
	reintegratetobl = previousbranch-command --last-checkout --keep-position reintegrateto --branch BRANCH ; HUB
	ffintegratetobl = previousbranch-command --last-checkout --keep-position ffintegrateto --branch BRANCH ; HUB
	;; pull-requesttobl
	;; pull-requestforbl

	;; ...b2l: to the second-last checked out branch
	mergechecktob2l = previousbranch-command --last-checkout --branch-number 2 --keep-position mergecheck --merge-to BRANCH
	reintegratetob2l = previousbranch-command --last-checkout --branch-number 2 --keep-position reintegrateto --branch BRANCH ; HUB
	ffintegratetob2l = previousbranch-command --last-checkout --branch-number 2 --keep-position ffintegrateto --branch BRANCH ; HUB
	;; pull-requesttob2l
	;; pull-requestforb2l

	;; ...bp: to where the tip of the branch was previously
	mergechecktobp = previousbranch-command --previous --keep-position mergecheck --merge-to BRANCH
	reintegratetobp = previousbranch-command --previous --keep-position reintegrateto --branch BRANCH ; HUB
	ffintegratetobp = previousbranch-command --previous --keep-position ffintegrateto --branch BRANCH ; HUB
	;; pull-requesttobp
	;; No pull-requestforbp, as that may or may not be a branch.

	;; ...b2p: to where the tip of the branch was second-last
	mergechecktob2p = previousbranch-command --previous --branch-number 2 --keep-position mergecheck --merge-to BRANCH
	reintegratetob2p = previousbranch-command --previous --branch-number 2 --keep-position reintegrateto --branch BRANCH ; HUB
	ffintegratetob2p = previousbranch-command --previous --branch-number 2 --keep-position ffintegrateto --branch BRANCH ; HUB
	;; pull-requesttob2p
	;; No pull-requestforb2p, as that may or may not be a branch.


	fl = git-rev-fetch-command l --reverse ; l of fetched commits
	flc = git-rev-fetch-command lc --reverse ; lc of fetched commits
	flg = git-rev-fetch-command lg --reverse ; lg of fetched commits
	flog = git-rev-fetch-command log --reverse ; log of fetched commits
	fetched = diff --stat ..FETCH_HEAD	; Summary of all fetched commits.
	;; remote show <repo>: Remote repository info, including tracked remote branches.
	fetchall = remote update	; Fetch all configured remotes (except when remote.<name>.skipDefaultUpdate is configured).
	;; fetchdate: Show when REMOTE was last fetched.
	ofetchdate = fetchdate --remote origin
	ufetchdate = fetchdate --remote upstream
	;; syncdate: Show when the local repository was last synchronized (fetch, pull, or push) with REMOTE(s).
	osyncdate = syncdate origin
	usyncdate = syncdate upstream
	;; uptodate: Check remote whether the current branch is on the same commit as the tracked remote branch / passed remote (or whether a pull / push is needed). Check remote whether there are tags with higher version numbers than the currently checked out tag.
	ouptodate = uptodate --tracked origin	; Check remote whether the tracked origin branch is on the same commit as the remote itself (or whether a fetch / push is needed). Check remote whether there are tags with higher version numbers than the current tag at the tracked origin branch.
	uuptodate = uptodate --tracked upstream	; Check remote whether the tracked upstream branch is on the same commit as the remote itself (or whether a fetch / push is needed). Check remote whether there are tags with higher version numbers than the current tag at the tracked upstream branch.

	tco = rev-tracked-command checkout ; checkout tracked branch HEAD
	td = rev-tracked-command diff ; diff with tracked branch
	; tdl would conflict with one-line commit summaries for today.
	tdt = rev-tracked-command difftool
	tdr = rev-tracked-command dr
	tdrl = rev-tracked-command drl
	tl = rev-tracked-command l ; l of tracked branch
	tlc = rev-tracked-command lc ; lc of tracked branch
	tlg = rev-tracked-command lg ; lg of tracked branch
	tlog = rev-tracked-command log ; log of tracked branch
	treset = reset-to-tracked --must-be-origin	; Reset my current branch (and working tree with --hard) to the HEAD of tracked branch of origin. Use this when the local branch has been pointed elsewhere (e.g. due to an attempted rebase), and you want to restore the original state. The working copy is left intact.
	tmerge = rev-tracked-command merge ; Merge changes in tracked branch with my local repo.
	tmergedr = rev-tracked-command mergedryrun ; Test merge of changes in tracked branch with my local repo.
	trmove-to-branch = rev-tracked-command -- uncommit-to-branch --exclude-commit
	trb = rev-tracked-command rebase ; Rebase my commits on top of the tracked branch (this is the same as a plain "git rebase").
	trbi = rev-tracked-command rebase --interactive
	trbni = rev-tracked-command rbni


	obrowse = rbrowse origin
	oexists = existsremote origin
	obr = rbr origin ; List all branches in my GitHub clone [matching <glob>].
	obrv = rbrv origin
	obrurl = brurl obr	; List URLs of all branches in my GitHub clone [matching <glob>].
	obrc = brc --remote origin
	obrage = brage --remote origin
	obrrecent = brrecent --remote origin
	olbr = rlbr origin	; List all branches that exist both as local branches and also in my GitHub clone [matching <branch-glob>].
	ostalebr = stalebr --remote origin	; List branches in my GitHub clone that have not been updated in a while.
	oarchiveselectedbr = rarchiveselectedbr origin	; Archive selected branches in my GitHub clone.
	oarchivestalebr = archivestalebr --remote origin	; Archive branches in my GitHub clone that have not been updated in a while.
	opicks = rev-remote-command origin cherrypicks -v --abbrev=7 ; See which changes from the current branch are already present in my GitHub clone.
	;; ocreatelocalbr: Create (and track) local branches for all branches in origin (matching PATTERN).
	oprune = rprune origin	; Remove old local branches that do not exist in origin any more.
	oprunesub = subdo-core --subdo-command-name oprunesub --include-superproject --single-success --status-99-is-noop oprune	; Remove old local branches that do not exist in origin any more, also in submodules.
	oprunesubr = subdo-core --recursive --subdo-command-name oprunesubr --include-superproject --single-success --status-99-is-noop oprune
	ofetch = wrapper-nocolor fetch origin ; Get changes done to my GitHub clone through another Git repository, e.g. from another system. Use this, followed by git owipe, when origin has been reset (e.g. to an updated upstream).
	ofetchonly = fetchonly origin; Only fetch in my GitHub clone changes (no update of local branches) and show a log of the changes.
	;; ofetchonly-hushed: Only fetch changes in my GitHub clone (no update of local branches) and show a log of the changes, suppressing standard fetch information and messages when there are no changes in origin. Useful when updating many repositories e.g. with git-wcdo.
	opull = wrapper-nocolor pull --ff-only origin ; Get and fast-forward changes done to my GitHub clone through another Git repository, e.g. from another system. This allows to either merge or rebase (recommended) when local commits have been done to an outdated local branch.
	oup = up origin
	omerge = rev-remote-command origin merge ; Merge changes done to my GitHub clone through another Git repository with my local repo.
	omergedr = rev-remote-command origin mergedryrun ; Test merge of changes done to my GitHub clone through another Git repository with my local repo.
	omergesbr = rev-remote-command origin rmergeselectedbranch
	omergedryrunsbr = rev-remote-command origin rmergedryrunselectedbranch
	omove-to-branch = rev-remote-command origin uncommit-to-branch --exclude-commit
	orb = rev-remote-command origin rebase ; Rebase my commits on top of the corresponding branch in my GitHub clone (or passed <branch>).
	orbi = rev-remote-command origin rebase --interactive
	orbni = rev-remote-command origin rbni
	orbsbr = rev-remote-command origin rrebaseselectedbranch
	opa = remote-mutate origin --message 'Push branches, tags, and notes' pushall origin	; Push all branches, tags, and notes (if exist) to origin.
	;; opush ; Re-publish of current / passed <branch> to my GitHub clone to get them pulled into upstream.
	opublish = rpublish origin ; Initial publish of current / passed <branch> to my GitHub clone to get them pulled into upstream.
	; ... and set upstream tracking reference so that future pushes can omit the branch name (when push.default=tracking).
	; Instead, I could probably also setup automatic tracking, but:
	; - would lose the warning when trying to opush a branch that I haven't
	;   published yet.
	; - would default to pushing to foreign branches from someone (which I'm
	;   not allowed), instead of being forced to publish to my own GitHub
	;   clone.
	;
	;   git config branch.autosetupmerge true
	; tells git-branch and git-checkout to setup new branches so that git-pull(1)
	; will appropriately merge from that remote branch.  Recommended.  Without this,
	; you will have to add --track to your branch command or manually merge remote
	; tracking branches with "fetch" and then "merge".
	odeletebr = rdeletebr origin ; Delete the current / passed <branch> in my GitHub clone. Older git must use "push origin :BRANCHNAME"
	odeleteselectedbranch = deleteselectedrbranch origin ; Delete remote branches that are interactively selected from existing branches in my GitHub clone.
	odeletemergedbranches = deletemergedrbranches origin ; Delete remote branches that are interactively selected from branches in my GitHub clone that have already been merged into HEAD / the passed COMMIT(s).
	odeletetag = rdeletetag origin	; Delete remote TAGNAME(s) in my GitHub clone.
	oldeletebr = rldeletebr origin ; Delete the current branch (and detach) / passed <branch> from the local repository as well as origin.
	oldeletebl = rldeletebr origin @{-1} ; Delete the last checked-out branch from the local repository as well as origin.
	oldeleteselectedbranch = deleteselectedrlbranch origin ; Delete remote branches that are interactively selected from existing branches in my GitHub clone there and from the local repository as well.
	oldeletemergedbranches = deletemergedrlbranches origin ; Delete branches that are interactively selected from branches in my GitHub clone and from the local repository as well that have already been merged into HEAD / the passed COMMIT(s).
	olrenamebr = rlrenamebr origin ; Rename the current branch / <oldbranch> to <newbranch> in both local repository and in my GitHub clone.
	oremotebr = remotebr origin	; Print corresponding origin/branch for the current / passed branch(es) (or return error).
	otaglist = rtagtype origin all	; List all tags in my GitHub clone.
	otaglist-annotated = rtagtype origin annotated	; List annotated tags in my GitHub clone.
	otaglist-lightweight = rtagtype origin lightweight	; List lightweight tags in my GitHub clone.
	otagdiff = rtagdiff origin all	; Show the differences between all local tags and ones in my GitHub clone.
	otagdiff-annotated = rtagdiff origin annotated	; Show the differences between annotated local tags and ones in my GitHub clone.
	otagdiff-lightweight = rtagdiff origin lightweight	; Show the differences between lightweight local tags and ones in my GitHub clone.
	otagurl = rtagurl origin	; List the URLs of all tags in my GitHub clone.
	otrack = rtrack origin	; Make the current branch track the eponymous branch in origin.
	owhowhen = whowhen --remote origin	; Show the earliest and latest commit dates (descending, starting with longest commit timespans) of any branch in my GitHub clone by name.
	owhowheni = whowheni --remote origin
	owhowhenst = whowhenst --remote origin
	ominewhen = minewhen --remote origin
	ominewheni = minewheni --remote origin
	ominewhenst = minewhenst --remote origin
	oteamwhen = teamwhen --remote origin
	oteamwheni = teamwheni --remote origin
	oteamwhenst = teamwhenst --remote origin
	owhofirst = whofirst --remote origin	; Show the earliest commit dates (descending, starting with oldest commits) of any branch in my GitHub clone by name.
	owhofirsti = whofirsti --remote origin
	owhofirstst = whofirstst --remote origin
	ominefirst = minefirst --remote origin
	ominefirsti = minefirsti --remote origin
	ominefirstst = minefirstst --remote origin
	oteamfirst = teamfirst --remote origin
	oteamfirsti = teamfirsti --remote origin
	oteamfirstst = teamfirstst --remote origin
	owholast = wholast --remote origin	; Show the latest commit dates (descending, starting with oldest commits) of any branch in my GitHub clone by name.
	owholasti = wholasti --remote origin
	owholastst = wholastst --remote origin
	ominelast = minelast --remote origin
	ominelasti = minelasti --remote origin
	ominelastst = minelastst --remote origin
	oteamlast = teamlast --remote origin
	oteamlasti = teamlasti --remote origin
	oteamlastst = teamlastst --remote origin
	owipe = rev-remote-command origin wipe ; Reset my current branch to the HEAD of the corresponding / passed branch of origin. Use this after an ureset done in another repository. Ensures that the current branch isn't dirty.
	;; oup-hushed: Variant of oup that suppresses standard fetch / rebase information and messages when there are no changes in origin. Useful when updating many repositories e.g. with git-wcdo.
	;; ofetchup: ofetch + oup; Fetch all changes in my GitHub clone, then pull and rebase (onto potentially dirty working copy).
	;; ofetchup-hushed: Variant of ofetchup that suppresses standard fetch / rebase information and messages when there are no changes in origin. Useful when updating many repositories e.g. with git-wcdo.
	;; ofetchup-branch: Variant of ofetchup-hushed that fetches all changes in my GitHub clone and always pulls the passed branch (using a separate worktree if the branch isn't the current one, suppressing standard fetch / rebase information and messages when there are no changes in origin). Useful when updating many repositories e.g. with git-wcdo.
	ofetchupm = master-command ofetchup-branch	; Fetch all changes in my GitHub clone and then rebase the master branch (using a separate worktree if a different is checked out, suppressing standard fetch / rebase information and messages when there are no changes in origin).

	;; oadd: Add origin repository at URL / my GitHub clone of upstream / passed REMOTE and fetch it. Offers to rename original origin to upstream.
	oderelict = rderelict origin
	oco = rco origin ; Checkout local branch from origin.
	ocosub = oco --submodules	; Checkout local branch from origin, also checkout eponymous remote branches in submodules.
	ocosbr = rcheckoutselectedbranch origin
	ocosubsbr = rcheckoutselectedbranch origin --submodules
	ocossbr = ocosubsbr
	ocorecentsbr = ocosbr --newer 2w
	ocosubrecentsbr = ocorecentsbr --submodules
	ocorecentsbrc = rcheckoutselectedbranchc origin --newer 2w
	ocosubrecentsbrc = ocorecentsbrc --submodules
	ocolatest = rcolatest origin ; Checkout a local branch from the latest (by last commit age) branch in my GitHub clone [matching pattern].
	ocolatestc = rcolatestc origin ; Checkout a local branch from my GitHub clone's branch [matching pattern] that was created last (except the current branch and master (and base branch if defined)).
	ocosublatest = ocolatest --submodules
	ocosublatestc = ocolatestc --submodules
	odetach = oco --detach	; Detach HEAD at the local branch from origin.
	odetachsbr = ocosbr --detach
	odetachrecentsbr = ocorecentsbr --detach
	odetachrecentsbrc = ocorecentsbrc --detach
	odetachlatest = rcolatest origin --detach ; Detach HEAD at the latest (by last commit age) branch in my GitHub clone [matching pattern].
	; No ocom.
	oreset = rev-remote-command origin reset ; Reset my current branch to the HEAD of the corresponding / passed branch of origin. The working copy is left intact, so you can effectively rebase any outstanding differences with a follow-up commit.
	ohardreset = oreset --hard ; Reset my current branch to the HEAD of the corresponding / passed branch of my GitHub clone.
	od = rev-remote-command origin diff ; Show differences to my GitHub clone.
	odfiles = rev-remote-command origin dfiles
	odsta = rev-remote-command origin dsta
	odstas = rev-remote-command origin dstas
	odstat = rev-remote-command origin dstat
	odstats = rev-remote-command origin dstats
	odl = rev-remote-command origin dl
	odt = rev-remote-command origin difftool ; Show differences to my GitHub clone.
	odr = rev-remote-command origin dr
	odrl = rev-remote-command origin drl
	odh = rev-remote-command origin dh -R
	odi = rev-remote-command origin di -R
	ol = rev-remote-command origin l
	ologmod = rev-remote-command origin logmod
	ologadded = rev-remote-command origin logadded
	ologdeleted = rev-remote-command origin logdeleted
	ologrenamed = rev-remote-command origin logrenamed
	ologmodfiles = rev-remote-command origin logmodfiles
	ologaddedfiles = rev-remote-command origin logaddedfiles
	ologdeletedfiles = rev-remote-command origin logdeletedfiles
	ologrenamedfiles = rev-remote-command origin logrenamedfiles
	orevive = rev-remote-command origin revive --all
	olc = rev-remote-command origin lc
	olg = rev-remote-command origin lg
	olghi = rev-remote-command origin lghi
	olghist = rev-remote-command origin lghist
	olghii = rev-remote-command origin lghii
	olghi-i = rev-remote-command origin lghi-i
	olgmine = rev-remote-command origin lgmine
	olog = rev-remote-command origin log
	ologf = rev-remote-command origin logf
	ologv = rev-remote-command origin logv
	ologfiles = rev-remote-command origin logfiles; One-line author, date, tags and commit summary, plus the list of changed files of my GitHub clone.
	oinout = inout --base origin
	oiofiles = inout --base origin --files
	oiosubmodules = inout --base origin --submodules
	oio = io origin
	oab = ab origin
	obrinout = rbrrefdo-wrapper origin inout --ignore-nonexisting --base origin {}
	obriofiles = rbrrefdo-wrapper origin inout --files --ignore-nonexisting --base origin {}
	obriosubmodules = rbrrefdo-wrapper origin inout --submodules --ignore-nonexisting --base origin {}
	obrio = rbrrefdo-wrapper origin --no-header io --ignore-nonexisting origin {}
	obrab = rbrrefdo-wrapper origin --no-header ab --ignore-nonexisting origin {}


	; How to add the upstream repository to my own repository:
	;	git remote add upstream http://repo.or.cz/r/vcscommand.vim.git
	; Note: HTTPS is the default, but I've seen failures behind the corporate
	; firewall. On there other hand, I got a 403 when using HTTP.
	ubrowse = rbrowse upstream
	uexists = existsremote upstream
	ubr = rbr upstream ; List all branches in upstream [matching <glob>].
	ubrv = rbrv upstream
	ubrurl = brurl ubr	; List URLs of all branches in upstream [matching <glob>].
	ubrc = brc --remote upstream
	ubrage = brage --remote upstream
	ubrrecent = brrecent --remote upstream
	ulbr = rlbr upstream	; List all branches that exist both as local branches and also in upstream [matching <branch-glob>].
	ustalebr = stalebr --remote upstream	; List branches in upstream that have not been updated in a while.
	uarchiveselectedbr = rarchiveselectedbr upstream	; Archive selected branches in upstream.
	uarchivestalebr = archivestalebr --remote upstream	; Archive branches in upstream that have not been updated in a while.
	upicks = rev-remote-command upstream cherrypicks -v --abbrev=7 ; See which changes from the current branch are already present upstream.
	;; No ucreatelocalbr.
	uprune = rprune upstream	; Remove old local branches that do not exist in upstream any more.
	uprunesub = subdo-core --subdo-command-name uprunesub --include-superproject --single-success --status-99-is-noop uprune	; Remove old local branches that do not exist in upstream any more, also in submodules.
	uprunesubr = subdo-core --recursive --subdo-command-name uprunesubr --include-superproject --single-success --status-99-is-noop uprune
	ufetch = wrapper-nocolor fetch upstream	; Get upstream changes.
	ufetchonly = fetchonly upstream; Only fetch upstream changes (no update of local branches) and show a log of the changes.
	;; ufetchonly-hushed: Only fetch upstream changes (no update of local branches) and show a log of the changes, suppressing standard fetch information and messages when there are no changes in upstream. Useful when updating many repositories e.g. with git-wcdo.
	;; upull: Get and fast-forward upstream changes. (With proper use of other branches for patches, there should not be a need to merge upstream.) Use for direct checkouts of upstream, without my own origin. Else, prefer ucatchup.
	;; uup: up upstream
	umerge = rev-remote-command upstream merge ; Merge upstream changes with my local repo.
	umergedr = rev-remote-command upstream mergedryrun ; Test merge of upstream changes with my local repo.
	umergesbr = rev-remote-command upstream rmergeselectedbranch
	umergedryrunsbr = rev-remote-command upstream rmergedryrunselectedbranch
	umove-to-branch = rev-remote-command upstream uncommit-to-branch --exclude-commit
	urb = rev-remote-command upstream rebase ; Rebase my commits on top of the corresponding branch in upstream (or passed <branch>).
	urbi = rev-remote-command upstream rbi
	urbni = rev-remote-command upstream rbni
	urbsbr = rev-remote-command upstream rrebaseselectedbranch
	upa = remote-mutate upstream --message 'Push branches, tags, and notes' pushall upstream	; Push all branches, tags, and notes (if exist) to upstream.
	;; upush: push upstream ; Directly push current / passed <branch> to upstream.
	upublish = rpublish upstream ; Initial publish of current / passed <branch> directly to upstream (without using an origin clone (for now)).
	;; uopush: push upstream + origin; Directly push current / passed <branch> to upstream and (if successful) push it to the tracking GitHub clone, too.
	;; urebaselocalbr: Rebase all / the last committed N local branches (except for the current branch and master (and base branch if defined)) to the updated upstream head. After that, merge again via git uwipem && git mergelocalbrc; then use git opush -f --all to send the rebased branches to origin.
	; To make pull default to rebase instead of merge, can use these:
	; # make "git pull" on master always use rebase
	; $ git config branch.master.rebase true
	; You can also set up a global option to set the last property for every
	; new tracked branch:
	; # setup rebase for every tracking branch
	; $ git config --global branch.autosetuprebase always
	; Source: http://mislav.uniqpath.com/2010/07/git-tips/
	;; ufetchup-localbr: Fetch all upstream changes and then rebase all / the last committed N local branches (using a separate worktree we're not on master, suppressing standard fetch / rebase information and messages when there are no changes in upstream).
	udeletebr = rdeletebr upstream ; Delete the current / passed <branch> in upstream. Older git must use "push origin :BRANCHNAME"
	udeleteselectedbranch = deleteselectedrbranch upstream ; Delete remote branches that are interactively selected from existing upstream branches.
	udeletemergedbranches = deletemergedrbranches upstream ; Delete remote branches that are interactively selected from upstream branches that have already been merged into HEAD / the passed COMMIT(s).
	udeletetag = rdeletetag upstream	; Delete remote TAGNAME(s) in upstream.
	uldeletebr = rldeletebr upstream ; Delete the current branch (and detach) / passed <branch> from the local repository as well as upstream.
	uldeletebl = rldeletebr upstream @{-1} ; Delete the last checked-out branch from the local repository as well as upstream.
	uldeleteselectedbranch = deleteselectedrlbranch upstream ; Delete remote branches that are interactively selected from existing upstream branches and from the local repository as well.
	uldeletemergedbranches = deletemergedrlbranches upstream ; Delete branches that are interactively selected from upstream branches and from the local repository as well that have already been merged into HEAD / the passed COMMIT(s).
	ulrenamebr = rlrenamebr upstream ; Rename the current branch / <oldbranch> to <newbranch> in both local repository and upstream.
	uremotebr = remotebr upstream	; Print corresponding upstream/branch for the current / passed branch(es) (or return error).
	utaglist = rtagtype upstream all	; List all tags in upstream.
	utaglist-annotated = rtagtype upstream annotated	; List annotated tags in upstream.
	utaglist-lightweight = rtagtype upstream lightweight	; List lightweight tags in upstream.
	utagdiff = rtagdiff upstream all	; Show the differences between all local tags and ones in upstream.
	utagdiff-annotated = rtagdiff upstream annotated	; Show the differences between annotated local tags and ones in upstream.
	utagdiff-lightweight = rtagdiff upstream lightweight	; Show the differences between lightweight local tags and ones in upstream.
	utagurl = rtagurl upstream	; List the URLs of all tags in upstream.
	utrack = rtrack upstream	; Make the current branch track the eponymous branch in upstream.
	uwhowhen = whowhen --remote upstream	; Show the earliest and latest commit dates (descending, starting with longest commit timespans) of any branch in upstream by name.
	uwhowheni = whowheni --remote upstream
	uwhowhenst = whowhenst --remote upstream
	uminewhen = minewhen --remote upstream
	uminewheni = minewheni --remote upstream
	uminewhenst = minewhenst --remote upstream
	uteamwhen = teamwhen --remote upstream
	uteamwheni = teamwheni --remote upstream
	uteamwhenst = teamwhenst --remote upstream
	uwhofirst = whofirst --remote upstream	; Show the earliest commit dates (descending, starting with oldest commits) of any branch in upstream by name.
	uwhofirsti = whofirsti --remote upstream
	uwhofirstst = whofirstst --remote upstream
	uminefirst = minefirst --remote upstream
	uminefirsti = minefirsti --remote upstream
	uminefirstst = minefirstst --remote upstream
	uteamfirst = teamfirst --remote upstream
	uteamfirsti = teamfirsti --remote upstream
	uteamfirstst = teamfirstst --remote upstream
	uwholast = wholast --remote upstream	; Show the latest commit dates (descending, starting with oldest commits) of any branch in upstream by name.
	uwholasti = wholasti --remote upstream
	uwholastst = wholastst --remote upstream
	uminelast = minelast --remote upstream
	uminelasti = minelasti --remote upstream
	uminelastst = minelastst --remote upstream
	uteamlast = teamlast --remote upstream
	uteamlasti = teamlasti --remote upstream
	uteamlastst = teamlastst --remote upstream
	uwipe = rev-remote-command upstream wipe ; Reset my current branch to the HEAD of the corresponding / passed branch of upstream. Ensures that the current branch isn't dirty.
	;; uwipem: Switch to my master branch and reset it to the HEAD of the upstream/master.
	;; uwipen: Switch to my base branch and reset it to the HEAD of the upstream/base.
	;; urestore: Reset my current branch to the HEAD of the current / passed branch of upstream, and push this to my GitHub clone. Use this after my pull requests have been accepted into upstream (but cherry-picked, in a different order, or intermingled with other requests, so that the commit history deviates from mine). Ensures that the current branch isn't dirty.
	;; ucatchup: uup + urestore; Pull and rebase upstream changes (onto potentially dirty working copy), and push this to my GitHub clone. Use this when you directly follow upstream, and want to update your repo to its most recent version.
	;; ucatchup-hushed: Variant of ucatchup that suppresses standard fetch / rebase information and messages when there are no changes in upstream. Useful when updating many repositories e.g. with git-wcdo.
	;; ufetchup: ufetch + uup + urestore; Fetch all upstream changes, then pull and rebase (onto potentially dirty working copy), and push this to my GitHub clone. Use this when you directly follow all concurrent activity in upstream, and want to update your repo to its most recent version.
	;; ufetchup-hushed: Variant of ufetchup that suppresses standard fetch / rebase information and messages when there are no changes in upstream. Useful when updating many repositories e.g. with git-wcdo.
	;; ufetchup-branch: Variant of ufetchup-hushed that fetches all upstream changes and always pulls the passed branch (using a separate worktree if the branch isn't the current one, suppressing standard fetch / rebase information and messages when there are no changes in upstream) and then pushes this branch to my GitHub clone. Useful when updating many repositories e.g. with git-wcdo.
	ufetchupm = master-command ufetchup-branch	; Fetch all upstream changes and then rebase the master branch (using a separate worktree if a different is checked out, suppressing standard fetch / rebase information and messages when there are no changes in upstream) and then push this to my GitHub clone.

	;; uadd:	Add upstream repository and fetch it.
	uderelict = rderelict upstream
	uco = rco upstream ; Checkout local branch from upstream.
	ucosub = uco --submodules	; Checkout local branch from upstream, also checkout eponymous remote branches in submodules.
	ucosbr = rcheckoutselectedbranch upstream
	ucosubsbr = rcheckoutselectedbranch upstream --submodules
	ucossbr = ucosubsbr
	ucorecentsbr = ucosbr --newer 2w
	ucosubrecentsbr = ucorecentsbr --submodules
	ucorecentsbrc = rcheckoutselectedbranchc upstream --newer 2w
	ucosubrecentsbrc = ucorecentsbrc --submodules
	ucolatest = rcolatest upstream ; Checkout a local branch from the latest (by last commit age) branch in upstream [matching pattern].
	ucolatestc = rcolatestc upstream ; Checkout a local branch from upstream's branch [matching pattern] that was created last (except the current branch and master (and base branch if defined)).
	ucosublatest = ucolatest --submodules
	ucosublatestc = ucolatestc --submodules
	udetach = uco upstream --detach	; Detach HEAD at the local branch from upstream.
	udetachsbr = ucosbr --detach
	udetachrecentsbr = ucorecentsbr --detach
	udetachrecentsbrc = ucorecentsbrc --detach
	udetachlatest = rcolatest upstream --detach ; Detach HEAD at the latest (by last commit age) branch in upstream [matching pattern].
	; No ucom.
	ureset = rev-remote-command upstream reset ; Reset my current branch to the HEAD of the corresponding / passed branch of upstream. Use this after my pull requests have been accepted into upstream (but cherry-picked, in a different order, or intermingled with other requests, so that the commit history deviates from mine), but there are still pending changes. The working copy is left intact, so you can effectively rebase any outstanding differences with a follow-up commit.
	uhardreset = ureset --hard ; Reset my current branch to the HEAD of the corresponding / passed branch of upstream.
	ud = rev-remote-command upstream diff ; Show differences to upstream.
	udfiles = rev-remote-command upstream diff --name-only ; Show changed files to upstream.
	udsta = rev-remote-command upstream dsta
	udstas = rev-remote-command upstream dstas
	udstat = rev-remote-command upstream dstat
	udstats = rev-remote-command upstream dstats
	udl = rev-remote-command upstream dl
	udt = rev-remote-command upstream difftool ; Show differences to upstream.
	udr = rev-remote-command upstream dr
	udrl = rev-remote-command upstream drl
	udh = rev-remote-command upstream dh -R
	udi = rev-remote-command upstream di -R
	ul = rev-remote-command upstream l
	ulogmod = rev-remote-command upstream logmod
	ulogadded = rev-remote-command upstream logadded
	ulogdeleted = rev-remote-command upstream logdeleted
	ulogrenamed = rev-remote-command upstream logrenamed
	ulogmodfiles = rev-remote-command upstream logmodfiles
	ulogaddedfiles = rev-remote-command upstream logaddedfiles
	ulogdeletedfiles = rev-remote-command upstream logdeletedfiles
	ulogrenamedfiles = rev-remote-command upstream logrenamedfiles
	urevive = rev-remote-command upstream revive --all
	ulc = rev-remote-command upstream lc
	ulg = rev-remote-command upstream lg
	ulghi = rev-remote-command upstream lghi
	ulghist = rev-remote-command upstream lghist
	ulghii = rev-remote-command upstream lghii
	ulghi-i = rev-remote-command upstream lghi-i
	ulgmine = rev-remote-command upstream lgmine
	ulog = rev-remote-command upstream log
	ulogf = rev-remote-command upstream logf
	ulogv = rev-remote-command upstream logv
	ulogfiles = rev-remote-command upstream logfiles; One-line author, date, tags and commit summary, plus the list of changed files of upstream.
	uinout = inout --base upstream
	uiofiles = inout --files --base upstream
	uiosubmodules = inout --submodules --base upstream
	uio = io upstream
	uab = ab upstream
	ubrinout = rbrrefdo-wrapper upstream inout --ignore-nonexisting --base upstream {}
	ubriofiles = rbrrefdo-wrapper upstream inout --files --ignore-nonexisting --base upstream {}
	ubriosubmodules = rbrrefdo-wrapper upstream inout --submodules --ignore-nonexisting --base upstream {}
	ubrio = rbrrefdo-wrapper upstream --no-header io --ignore-nonexisting upstream {}
	ubrab = rbrrefdo-wrapper upstream --no-header ab --ignore-nonexisting upstream {}


	radd = remote add -f	; Add remote repository and fetch it.
	; other foreign repositories
	; To import someone's repository and work on it, do this:
	;   # Import.
	;   git remote add -f <someone> https://github.com/<someone>/<project>.git
	;   # The -f already did: git fetch <someone>
	;   # What has changed in his branch?
	;   git diff upstream/master..<someone>/<branch>
	;   git co -b <branch> <someone>/<branch>
	;   # Do changes ...
	;   # Publish to your GitHub clone to make the changes accessible to someone.
	;   git opublish <branch>
	;; derelict: List any remote that is older than 1y or [offer to] rename it to derelict-{owner} / delete it if it is.
	;; rderelict: Check whether the REMOTE is older than 1y [and [offer to] rename it to derelict-{owner} / delete it if it is].

	;; describe-fork: Show relation of my tracking GitHub clone in ORIGIN to the UPSTREAM GitHub repository.

	; How to create a new GitHub repository:
	; 1. git init myproject
	; 2. On GitHub, create a new repository.
	; 3. git remote add origin git@github.com:inkarkat/myproject.git
	; 4. git push -u origin master
	;
	; with the hub extension:
	; 2. [git cd]
	; 3. git create -d "description"
	; 4. git opublish
	;
	; How to fork a non-GitHub repository:
	; 1. git clone --origin=upstream http://repo.or.cz/r/vcscommand.vim.git
	; 2. On GitHub, create a new repository.
	; 3. cd vcscommand.git
	; 4. git remote add origin git@github.com:inkarkat/vcscommand.vim.git
	; 5. git push -u origin master

	;; writebackup-import: Import a directory hierarchy into Git, using existing backup files with a current date file extension as history.
	;; writebackup-ingo-import: Import a directory hierarchy into Git, extracting the commit messages from ingo's custom changelog file header from existing backup files with a current date file extension as history.

	;; url: Print the URL of a GitHub repository.
	;; userrepo: Print the user/repository part and a possible issue / pull request ID of a GitHub repository / passed URL.
	;; repo: Print only the repository name and a possible issue / pull request ID of a GitHub repository / passed URL.
	;; remotes: Show remotes with URLs.
	;; remote-url: Show URL of <name> (as HTTPS, even if SSH access is configured). ("hub browse -u" apparently only can do this for origin.)
	ourl = remote-url origin
	uurl = remote-url upstream
	;; remote-isreadonly: Test whether there's a push URL for <name>, or whether that remote is read-only (i.e. there's only a fetch URL).
	uisreadonly = remote-isreadonly upstream
	;; remote-setreadonly: Removes the push URL for <name>, which disables pushes to it. It can only be fetched from, until the push URL is restored to the fetch URL.
	usetreadonly = remote-setreadonly upstream
	;; existsremote: Check whether the passed remote has been configured in the working copy.
	;; existsremoteurl: Check whether the passed remote name / URL offers a remote repository.
	;; existsremotebr: Check whether the passed <branch> currently exists in REMOTE (by actually contacting the repository).
	;; remote-protocol: Change the protocol for remote <name> to either https or git.

	; Submodule handling; partially taken from http://git-scm.com/book/en/v2/Git-Tools-Submodules
	;; submodule-uninitialized: Test whether there are uninitialized submodules.
	sub-set-recursive-fetch = config --local fetch.recurseSubmodules true	; Configure this repository to always fetch all submodules, not just on-demand when the superproject updates a reference. This is useful for projects where the superproject is just collecting the actual development subprojects into a consistent whole.
	;; hassubmodules: Test whether the current repository has any submodules.
	;; issubmodule: Test whether the current working copy is a submodule of another repository.
	superproject = issubmodule --print	; Show root dir of the Git superproject (or fail if not in a submodule).
	superroot = issubmodule --print-toplevel	; Show dir of the topmost repository root (or fail if not in a submodule).
	;; subdo-core: Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule. An alternative to "git submodule foreach".
	;; subdo: Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule, with special synthesized commands.
	subdor = subdo --recursive --subdo-command-name subdor
	subsamebrdo = subdo --subdo-command-name subsamebrdo --same-branch	; Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule that is on the same branch as the superproject.
	subsamebrdor = subsamebrdo --recursive
	subuntrackeddo = subdo --subdo-command-name subuntrackeddo --untracked	; Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule that contains new files not yet added to version control (and not covered by the ignore patterns).
	subuntrackeddor = subuntrackeddo --subdo-command-name subuntrackeddor --recursive
	subdirtydo = subdo --subdo-command-name subdirtydo --dirty	; Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule that contains modified content.
	subdirtydor = subdirtydo --subdo-command-name subdirtydor --recursive
	substageabledo = subdo --subdo-command-name substageabledo --stageable	; Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule that contains new files not yet added to version control (and not covered by the ignore patterns) and/or files with an unstaged modification.
	substageabledor = substageabledo --subdo-command-name substageabledor --recursive
	;; subst: Show a list of submodules that are modified but not committed in the superproject.
	;; subi: Show a list of submodules that are currently staged in the superproject.
	;; sub-i: Show a list of submodules that are currently modified but not staged in the superproject.
	;; substdo: Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule that is currently modified but not committed in the superproject.
	;; subido: Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule that is currently staged in the superproject.
	;; sub-ido: Execute "git SIMPLECOMMAND" and/or COMMANDLINE in each Git submodule that is currently modified but not staged in the superproject.

	;; superchanges: List changes (i.e. commit titles) in the superproject (omitting commits that just cover submodules) done in the commits in the passed <range>. HUB
	superchanges1 = superchanges --max-count 1
	superchanges2 = superchanges --max-count 2
	superchanges3 = superchanges --max-count 3
	superchanges4 = superchanges --max-count 4
	superchanges5 = superchanges --max-count 5
	superchanges6 = superchanges --max-count 6
	superchanges7 = superchanges --max-count 7
	superchangesx = superchanges --max-count 12
	superchangesq = superchanges --max-count 25
	superchangesz = superchanges --max-count 100
	; No superchangesg because it works on commit ranges.
	; No superchangeschanged because it works on commit ranges.
	; No superchangestouched because it works on commit ranges.

	;; subchanges: List changes (i.e. commit titles) in submodules done in the commits [that cover SUBMODULE(s)] in the passed <range>. HUB
	subchanges1 = subchanges --max-count 1
	subchanges2 = subchanges --max-count 2
	subchanges3 = subchanges --max-count 3
	subchanges4 = subchanges --max-count 4
	subchanges5 = subchanges --max-count 5
	subchanges6 = subchanges --max-count 6
	subchanges7 = subchanges --max-count 7
	subchangesx = subchanges --max-count 12
	subchangesq = subchanges --max-count 25
	subchangesz = subchanges --max-count 100
	; No subchangesg because it works on commit ranges.
	; No subchangeschanged because it works on commit ranges.
	; No subchangestouched because it works on commit ranges.

	;; subdiff: Show diff only of submodules (one submodule after the other; excluding changes in the current superproject).
	subd = subdiff
	subdsta = subdiff --shortstat
	subdstat = subdiff --stat --compact-summary
	subdh = subdiff HEAD	; Show diff of both staged or unstaged changes since the last commit, only of submodules (excluding changes in the current superproject).
	subdi = subdiff --cached	; Show diff of staged changes in the index only of submodules (excluding changes in the current superproject).

	;; subdiffl: Show separate diff of each file (instead of concatenating all changes) only of submodules (excluding changes in the current superproject).
	subdl = subdiffl
	subdhl = subdiffl HEAD
	subdil = subdiffl --cached
	subld = subdiff --each-submodule	; Show separate diff of each submodule, only of submodules (excluding changes in the current superproject).
	subldh = subld HEAD
	subldi = subld --cached

	;; superrev-command: Execute GIT-COMMAND in the submodule's superproject for / print each superproject commit where the HEAD commit / passed -r|--revision SUBREV has been referenced (directly or as part of a submodule commit range)
	superrevdiff = superrev-command --first-only dp	; Diff of the most recent superproject commit where the the HEAD commit / passed -r|--revision SUBREV has been referenced.
	superrevlog = superrev-command --separate log1	; Show commit logs of the superproject commit(s) where the the HEAD commit / passed -r|--revision SUBREV has been referenced.
	superrevlg = superrev-command lg1	; One-line topology, author, date, tags and commit summary of the superproject commit(s) where the the HEAD commit / passed -r|--revision SUBREV has been referenced.
	superrevlc = superrev-command --separate show	; Logs together with diff between commits of the superproject commit(s) where the the HEAD commit / passed -r|--revision SUBREV has been referenced.
	superrevshow = superrev-command --first-only show ; Logs together with diff of the most recent superproject commit where the the HEAD commit / passed -r|--revision SUBREV has been referenced.

	superremoverevdiff = superrev-command --removals --first-only dp	; Diff of the most recent superproject commit where the the HEAD commit / passed -r|--revision SUBREV references has been dropped (moved away from).
	superremoverevlog = superrev-command --removals --separate log1	; Show commit logs of the superproject commit(s) where the the HEAD commit / passed -r|--revision SUBREV references has been dropped (moved away from).
	superremoverevlg = superrev-command --removals lg1	; One-line topology, author, date, tags and commit summary of the superproject commit(s) where the the HEAD commit / passed -r|--revision SUBREV references has been dropped (moved away from).
	superremoverevlc = superrev-command --removals --separate show	; Logs together with diff between commits of the superproject commit(s) where the the HEAD commit / passed -r|--revision SUBREV references has been dropped (moved away from).
	superremoverevshow = superrev-command --removals --first-only show ; Logs together with diff of the most recent superproject commit where the the HEAD commit / passed -r|--revision SUBREV references has been dropped (moved away from).

	;; subrev-command: Execute GIT-COMMAND inside all affected submodules / passed SUBMODULE(s), with a superproject's <ref> [and N-1 previous commits] or <ref>..[.]<ref> replaced by the submodule's revisions. With this, you can use tags, branches, commit IDs from the superproject to reference submodule revisions.
	subrevdiff = subrev-command diff	; Diff of content in all affected submodules / passed SUBMODULE(s) with a range of superproject's <ref>..<ref>.
	subrevlog = subrev-command log	; Show commit logs inside all affected submodules / passed SUBMODULE(s) with a range of superproject's <ref>..<ref>.
	subrevlg = subrev-command lg	; One-line topology, author, date, tags and commit summary inside all affected submodules / passed SUBMODULE(s) with a range of superproject's <ref>..<ref>.
	subrevlc = subrev-command lc	; Logs together with diff between commits inside all affected submodules / passed SUBMODULE(s) with a range of superproject's <ref>..<ref>.

	;; subpredrev-command: Execute GIT-COMMAND inside all affected submodules / passed SUBMODULE(s), with a superproject's <ref> replaced by the submodule's revisions that are affected by <ref> [and its N-1 previous commits]. With this, you can use tags, branches, commit IDs from the superproject to reference submodule revisions.
	subpredrevdiff = subpredrev-command diff	; Diff of content in all affected submodules / passed SUBMODULE(s) affected by superproject's <ref> (and N-1 previous commits).
	subpredrevdiffselected = selectedcommit-command --single-only --pass-file-args -2 subpredrevdiff COMMITS
	subpredrevdiff1 = subpredrevdiffselected --max-count 1
	subpredrevdiff2 = subpredrevdiffselected --max-count 2
	subpredrevdiff3 = subpredrevdiffselected --max-count 3
	subpredrevdiff4 = subpredrevdiffselected --max-count 4
	subpredrevdiff5 = subpredrevdiffselected --max-count 5
	subpredrevdiff6 = subpredrevdiffselected --max-count 6
	subpredrevdiff7 = subpredrevdiffselected --max-count 7
	subpredrevdiffx = subpredrevdiffselected --max-count 12
	subpredrevdiffq = subpredrevdiffselected --max-count 25
	subpredrevdiffz = subpredrevdiffselected --max-count 100
	subpredrevdiffg = selectedgcommit-command --last-only -2 subpredrevdiffselected COMMITS
	subpredrevdiffchanged = selectedchangedcommit-command --last-only -2 subpredrevdiffselected COMMITS
	subpredrevdifftouched = selectedtouchedcommit-command --last-only -2 subpredrevdiffselected COMMITS

	subpredrevlog = subpredrev-command log	; Show commit logs inside all affected submodules / passed SUBMODULE(s) affected by superproject's <ref> (and N-1 previous commits).
	subpredrevlogselected = selectedcommit-command --single-only --pass-file-args -2 subpredrevlog COMMITS
	subpredrevlog1 = subpredrevlogselected --max-count 1
	subpredrevlog2 = subpredrevlogselected --max-count 2
	subpredrevlog3 = subpredrevlogselected --max-count 3
	subpredrevlog4 = subpredrevlogselected --max-count 4
	subpredrevlog5 = subpredrevlogselected --max-count 5
	subpredrevlog6 = subpredrevlogselected --max-count 6
	subpredrevlog7 = subpredrevlogselected --max-count 7
	subpredrevlogx = subpredrevlogselected --max-count 12
	subpredrevlogq = subpredrevlogselected --max-count 25
	subpredrevlogz = subpredrevlogselected --max-count 100
	subpredrevlogg = selectedgcommit-command --last-only -2 subpredrevlogselected COMMITS
	subpredrevlogchanged = selectedchangedcommit-command --last-only -2 subpredrevlogselected COMMITS
	subpredrevlogtouched = selectedtouchedcommit-command --last-only -2 subpredrevlogselected COMMITS

	subpredrevlg = subpredrev-command lg	; One-line topology, author, date, tags and commit summary inside all affected submodules / passed SUBMODULE(s) affected by superproject's <ref> (and N-1 previous commits).
	subpredrevlgselected = selectedcommit-command --single-only --pass-file-args -2 subpredrevlg COMMITS
	subpredrevlg1 = subpredrevlgselected --max-count 1
	subpredrevlg2 = subpredrevlgselected --max-count 2
	subpredrevlg3 = subpredrevlgselected --max-count 3
	subpredrevlg4 = subpredrevlgselected --max-count 4
	subpredrevlg5 = subpredrevlgselected --max-count 5
	subpredrevlg6 = subpredrevlgselected --max-count 6
	subpredrevlg7 = subpredrevlgselected --max-count 7
	subpredrevlgx = subpredrevlgselected --max-count 12
	subpredrevlgq = subpredrevlgselected --max-count 25
	subpredrevlgz = subpredrevlgselected --max-count 100
	subpredrevlgg = selectedgcommit-command --last-only -2 subpredrevlgselected COMMITS
	subpredrevlgchanged = selectedchangedcommit-command --last-only -2 subpredrevlgselected COMMITS
	subpredrevlgtouched = selectedtouchedcommit-command --last-only -2 subpredrevlgselected COMMITS

	subpredrevlc = subpredrev-command lc	; Logs together with diff between commits inside all affected submodules / passed SUBMODULE(s) affected by superproject's <ref> (and N-1 previous commits).
	subpredrevlcselected = selectedcommit-command --single-only --pass-file-args -2 subpredrevlc COMMITS
	subpredrevlc1 = subpredrevlcselected --max-count 1
	subpredrevlc2 = subpredrevlcselected --max-count 2
	subpredrevlc3 = subpredrevlcselected --max-count 3
	subpredrevlc4 = subpredrevlcselected --max-count 4
	subpredrevlc5 = subpredrevlcselected --max-count 5
	subpredrevlc6 = subpredrevlcselected --max-count 6
	subpredrevlc7 = subpredrevlcselected --max-count 7
	subpredrevlcx = subpredrevlcselected --max-count 12
	subpredrevlcq = subpredrevlcselected --max-count 25
	subpredrevlcz = subpredrevlcselected --max-count 100
	subpredrevlcg = selectedgcommit-command --last-only -2 subpredrevlcselected COMMITS
	subpredrevlcchanged = selectedchangedcommit-command --last-only -2 subpredrevlcselected COMMITS
	subpredrevlctouched = selectedtouchedcommit-command --last-only -2 subpredrevlcselected COMMITS


	;; sublc: Logs together with diff between commits only of submodules (one submodule after the other; excluding changes in the current superproject).
	;; sublcl: Logs together with diff between commits of each commit (instead of concatenating all changes) only of submodules (one submodule after the other; excluding changes in the current superproject).
	sublcl1 = sublcl --max-count 1
	sublcl2 = sublcl --max-count 2
	sublcl3 = sublcl --max-count 3
	sublcl4 = sublcl --max-count 4
	sublcl5 = sublcl --max-count 5
	sublcl6 = sublcl --max-count 6
	sublcl7 = sublcl --max-count 7
	sublclx = sublcl --max-count 12
	sublclq = sublcl --max-count 25
	sublclz = sublcl --max-count 100
	;; sublcg: Logs together with diff between commits where log messages match the specified text or /regexp/ only of submodules (one submodule after the other; excluding changes in the current superproject).
	;; sublclg: Logs together with diff between commits where log messages match the specified text or /regexp/ only of submodules (one submodule after the other; excluding changes in the current superproject).
	sublclg1 = sublclg --max-count 1
	sublclg2 = sublclg --max-count 2
	sublclg3 = sublclg --max-count 3
	sublclg4 = sublclg --max-count 4
	sublclg5 = sublclg --max-count 5
	sublclg6 = sublclg --max-count 6
	sublclg7 = sublclg --max-count 7
	sublclgx = sublclg --max-count 12
	sublclgq = sublclg --max-count 25
	sublclgz = sublclg --max-count 100

	;; showsubmodules: Show only the submodules that were modified in the passed commit or commit range.
	showsubdo = "files-command --source-command showsubmodules --keep-position subdo --for FILES ;"
	showsubdor = "files-command --source-command showsubmodules --keep-position subdor --for FILES ;"

	subinout = subdo --subdo-command-name subinout inout
	subinoutr = subdo --recursive --subdo-command-name subinoutr inout
	subiofiles = subdo --subdo-command-name subinout inout --files
	subiofilesr = subdo --recursive --subdo-command-name subinoutr inout --files
	subiosubmodules = subdo --subdo-command-name subinout inout --submodules
	subiosubmodulesr = subdo --recursive --subdo-command-name subinoutr inout --submodules
	subio = subdo --subdo-command-name subinout io
	subior = subdo --recursive --subdo-command-name subinoutr io
	subab = subdo --subdo-command-name subinout ab
	subabr = subdo --recursive --subdo-command-name subinoutr ab
	;; subbrinout: For each submodule, show incoming and outgoing commit logs between the current revision and the local tracking branch (as per .gitmodules submodule.<name>.branch configuration; if such branch exists).
	subbrinoutr = subbrinout --recursive
	subbriofiles = subbrinout --files
	subbriofilesr = subbrinoutr --files
	subbriosubmodules = subbrinout --submodules
	subbriosubmodulesr = subbrinoutr --submodules
	subbrio = subbrinout --stat
	subbrior = subbrinoutr --stat
	;; subtinout: For each submodule, show incoming and outgoing commit logs between the current revision and the tracked remote branch (as per .gitmodules submodule.<name>.branch configuration).
	subtinoutr = subtinout --recursive
	subtio = subtinout --stat
	subtior = subtinoutr --stat
	subminout = subdo master-command inout --subdo-command-name subminout
	subminoutr = subdo --recursive master-command inout --subdo-command-name subminoutr
	submiofiles = subdo master-command inout --subdo-command-name subminout --files
	submiofilesr = subdo --recursive master-command inout --subdo-command-name subminoutr --files
	submiosubmodules = subdo master-command inout --subdo-command-name subminout --submodules
	submiosubmodulesr = subdo --recursive master-command inout --subdo-command-name subminoutr --submodules
	submio = subdo master-command io --subdo-command-name subminout
	submior = subdo --recursive master-command io --subdo-command-name subminoutr
	submab = subdo master-command ab --subdo-command-name subminout
	submabr = subdo --recursive master-command ab --subdo-command-name subminoutr
	subninout = subdo base-command inout --subdo-command-name subninout
	subninoutr = subdo --recursive base-command inout --subdo-command-name subninoutr
	subniofiles = subdo base-command inout --subdo-command-name subninout --files
	subniofilesr = subdo --recursive base-command inout --subdo-command-name subninoutr --files
	subniosubmodules = subdo base-command inout --subdo-command-name subninout --submodules
	subniosubmodulesr = subdo --recursive base-command inout --subdo-command-name subninout --subdo-command-name subninoutr --submodules
	subnio = subdo base-command io --subdo-command-name subninout
	subnior = subdo --recursive base-command io --subdo-command-name subninoutr
	subnab = subdo base-command ab --subdo-command-name subninout
	subnabr = subdo --recursive base-command ab --subdo-command-name subninoutr

	;; subname: Show the name of the current submodule, as it's configured in the submodule configuration. This is NOT the name of the directory in the superproject ($sm_path).
	;; sublist: Show a list of all (initialized and at least once updated) submodules.
	sublistr = sublist --recursive ; Show a list of all (initialized and at least once updated) submodules, also nested within submodules.
	;; subuntracked: Show a list of all submodules that contain untracked files.
	;; subdirty: Show a list of all submodules that contain modified content.
	; No substageable because even the porcelain format only distingishes between untracked and modifications.

	;; subhash: Show the commit ID recorded in the superproject [in <ref>] for passed <submodule>.
	;; subhashes: Show a list of commit IDs recorded in the superproject [in <ref>], for all submodules.
	subhashesr = subhashes --recursive	; Show a list of commit IDs recorded in the superproject [in <ref>], for all submodules, also nested within submodules.
	;; supersubhash: Find the latest commit in the current superproject that references the current commit of all submodules / of the passed SUBMODULE(s) [that are on BRANCH].

	;; subaddu: Stage modified submodules, and show status.

	;; subtrackedbr: Print the tracked branch (submodule.<name>.branch) from .gitmodules [for SUBMODULE(s)].
	subll = submodule status ; Show the commit of each submodule that is currently checked out.
	subllr = submodule status --recursive	; Show the commit of each submodule that is currently checked, also nested within submodules.
	sublli = submodule status --cached ; Show the commit of each submodule as recorded in the superproject.
	subllir = submodule status --cached --recursive	; Show the commit of each submodule as recorded in the superproject, also nested within submodules.

	subpush = wrapper-nocolor push --recurse-submodules=on-demand	; Goes into each submodule and manually pushes to the remotes to make sure they're externally available.

	subwipe = submodule update --init --checkout --recursive	; Reset all registered submodules with the commit recorded in the superproject. Local changes to a submodule are discarded; the submodule will be detached from those commits. Do this to update all / passed submodules to the superproject state in a bulk operation. Alternatively, you can also "git checkout SUBMODULE" individual submodules.
	subco = submodule update --init --rebase --recursive	; Update all registered submodules with the commit recorded in the superproject. If a submodule has a branch checked out, any changes there are rebased onto the commit recorded in the superproject. Do this to update all / passed submodules to the superproject state in a bulk operation.
	subup = submodule update --init --remote --no-fetch --rebase --recursive	; Integrate changes from the remote subprojects of all registered submodules. If a submodule has a branch checked out, any changes there are rebased onto the commit recorded in the superproject. Do this to update all / passed submodules to the submodules's remote tracking branch / master in a bulk operation. Alternatively, you can also "git up" individual submodules and then commit the superproject.
	subwipeup = submodule update --init --remote --no-fetch --checkout --recursive	; Apply changes from the remote subprojects of all registered submodules. Local changes to a submodule are discarded; the submodule will be detached from those commits. Do this to update all / passed submodules to the submodules's remote tracking branch / master in a bulk operation. Alternatively, you can also "git reset" individual submodules and then commit the superproject.
	subfetchup = submodule update --init --remote --rebase --recursive	; Fetch and integrate changes from the remote subprojects of all registered submodules. If a submodule has a branch checked out, any changes there are rebased onto the commit recorded in the superproject. Do this to update all / passed submodules to the submodules's remote tracking branch / master in a bulk operation. Alternatively, you can also "git fetchup" individual submodules and then commit the superproject.

	;; subcobr: For each configured submodule / passed SUBMODULE(s), check out the branch specified in the .gitmodules file (or master) if the superproject currently references the tip of either the existing local branch or remote branch. Don't touch submodules that don't directly reference such a branch.
	subconewbr = subcobr --checkout	; For each configured submodule / passed SUBMODULE(s), check out / create a new local branch.
	subcobrto = subcobr --start-point	; For each configured submodule / passed SUBMODULE(s), check out / create a new local branch and reset it to / start it at REV.
	submco = master-command --keep-position subcobr --start-point MASTER	; For each configured submodule / passed SUBMODULE(s), check out / create a new local branch and reset it to / start it at master.
	subomco = master-command --keep-position subcobr --start-point origin/MASTER	; For each configured submodule / passed SUBMODULE(s), check out / create a new local branch and reset it to / start it at my GitHub clone's master.
	subumco = master-command --keep-position subcobr --start-point upstream/MASTER	; For each configured submodule / passed SUBMODULE(s), check out / create a new local branch and reset it to / start it at upstream's master.
	subnco = base-command --keep-position subcobr --start-point BASE	; For each configured submodule / passed SUBMODULE(s), check out / create a new local branch and reset it to / start it at the base branch.
	subonco = base-command --keep-position subcobr --start-point origin/BASE	; For each configured submodule / passed SUBMODULE(s), check out / create a new local branch and reset it to / start it at my GitHub clone's base branch.
	subunco = base-command --keep-position subcobr --start-point upstream/BASE	; For each configured submodule / passed SUBMODULE(s), check out / create a new local branch and reset it to / start it at upstream's base branch.
	subcolocalbr = subcobr --existing-local	; For each configured submodule / passed SUBMODULE(s), check out an existing local branch.
	subcoremotebr = subcobr --existing-remote	; For each configured submodule / passed SUBMODULE(s), check out an existing remote branch.
	subupbr = subcobr --update	; For each configured submodule / passed SUBMODULE(s), update the local branch to the tracked remote, and show a log of the changes

	;; supersubpath: Show the path of the current submodule as it's recorded in the superproject; i.e. $sm_path.
	;; supersubinout: Show incoming and outgoing commit logs between the commit recorded in the superproject [in SUPER-COMMIT] for each submodule and that submodule's master branch [or SUB-BRANCH].
	osupersubinout = supersubinout --remote origin	; Show incoming and outgoing commit logs between the commit recorded in the superproject [in SUPER-COMMIT] for each submodule and that submodule's master branch [or SUB-BRANCH] in my GitHub clone.
	usupersubinout = supersubinout --remote upstream	; Show incoming and outgoing commit logs between the commit recorded in the superproject [in SUPER-COMMIT] for each submodule and that submodule's master branch [or SUB-BRANCH] in upstream.
	osuperhaspendingsubintegrations = master-command --keep-position osupersubinout --message 'Found pending submodule changes to be incorporated into the superproject:' --super-base origin/MASTER	; Ensure that the master branch in my GitHub clone records the latest master branch revisions of its submodules in my GitHub clones (or else print incoming or outgoing commit logs).
	usuperhaspendingsubintegrations = master-command --keep-position usupersubinout --message 'Found pending submodule changes to be incorporated into the superproject:' --super-base upstream/MASTER	; Ensure that the master branch in upstream records the latest master branch revisions of its submodules in upstream (or else print incoming or outgoing commit logs).
	;; supersubdo: Execute "git SIMPLECOMMAND" and/or COMMANDLINE in both the current submodule and its superproject.
	superandallsubdo = subdo --include-superproject	; Execute "git SIMPLECOMMAND" and/or COMMANDLINE in all existing submodules and the superproject.
	;; superdo: Execute "git SIMPLECOMMAND" and/or COMMANDLINE in this submodule's superproject.
	;; supersubpublish: Publish this submodule's branch to REMOTE when in a submodule / when in the superproject: publish all dirty submodules / all submodules that are on the same branch, and (if necessary) create a commit in the superproject and publish its branch to REMOTE, too.
	osupersubpublish = supersubpublish origin
	usupersubpublish = supersubpublish upstream
	osupersubpush = supersubdo --interactive opush
	usupersubpush = supersubdo --interactive upush
	;; superamensubpush: Reference this submodule's current revision / all submodules that are on the same branch as the superproject and amend that to the superproject's last commit without re-editing the message, then push both / all [to REMOTE].
	osuperamensubpush = superamensubpush origin
	usuperamensubpush = superamensubpush upstream
	;; superamendsubpush: Reference this submodule's current revision / all submodules that are on the same branch as the superproject and amend that to the superproject's last commit, then push both / all [to REMOTE].
	osuperamendsubpush = superamendsubpush origin
	usuperamendsubpush = superamendsubpush upstream
	;; superamenpush: Reference this submodule's current revision and amend that to the superproject's last commit without re-editing the message and push it [to REMOTE].
	osuperamenpush = superamenpush origin
	usuperamenpush = superamenpush upstream
	;; superamendpush: Reference this submodule's current revision and amend that to the superproject's last commit and push it [to REMOTE].
	osuperamendpush = superamendpush origin
	usuperamendpush = superamendpush upstream

	;; superonlyreintegratetom: Merge / rebase the current branch of the superproject (without affected submodules) to the master branch via a reverse integration of the superproject; i.e. master is merged / rebased to the current branch first so that the reintegration is a simple fast-forward.
	;; supersubreintegratetom: Merge / rebase the current branch of a superproject + submodule(s) to the master branch via a reverse integration of the superproject; i.e. master is merged / rebased to the current branch first so that the reintegration is a simple fast-forward.
	;; supersubffintegratetom: Merge / rebase the current branch of a superproject + submodule(s) to the master branch via a reverse integration of superproject and submodule(s); i.e. master branches are merged / rebased to the current branch first, those branches are pushed (allowing remote verification by CI/CD), and the final reintegration is a simple fast-forward that can then be quickly pushed for submodule(s) and superproject, minimizing the time of discrepancies between latest submodule state and recorded superproject commit to seconds.

	;; supercommit: Reference this submodule's current revision and commit that in the superproject.
	superamen = supercommit --amend --reuse-message=HEAD	; Reference this submodule's current revision and amend that to the superproject's last commit without re-editing the message.
	superamend = supercommit --amend --reedit-message=HEAD	; Reference this submodule's current revision and amend that to the superproject's last commit.

	;; Git Flow
	feat = flow feature
	;; feat-start: Finish feature <name> / the feature that was developed on the current feature branch.
	;; feat-fromcommit: Start a new feature <name>, and incorporate the last commit / all commits up to and including <commit>, which is/are then removed from the current branch so that it/they will exclusively reside on the new feature branch.
	;; feat-co: Abbreviation of "feature checkout".
	;; release: flow release
	;; release-commit: Do the release commit (that updates the changelog etc.) with an auto-generated commit message for the current release.
	;; release-version: Print the version about to be released.
	bug = flow bugfix
	hf = flow hotfix


	;; hub GitHub commands
	;; urepo: Print the parent repository that this repository was forked from (based on the origin remote).
	;; collaborators: List all collaborators and their role (and corresponding permissions) for the current repository.
	;; repostats: Print statistics about all repositories owned by the current / passed user or organization.
	;; settings: List / get / update / clear GitHub settings for the current GitHub repository [in REMOTE].
	;; labels: List / Add / update / delete labels for the current GitHub repository.
	;; autolinks: List / Add / update / delete autolinks for the current GitHub repository.
	;; reposwhere: Print repository names / URLs for all repositories owned by the current / passed user or organization that have WHAT enabled / disabled.

	;; cr: Show GitHub issues and pull requests (separately).
	;; crrecent: Show recently (default 2 weeks) updated GitHub issues and pull requests (separately), including the relative creation date.
	;; crstatus: Show number of issues and pull requests.

	;; myissues: Show a list of issues assigned to me in the current repository.
	;; issuesfromme: Show a list of issues that I've created in the current repository.
	;; issuesaboutme: Show a list of issues in the current repository where I am mentioned.

	;; mycrs: Show a list of issues and pull requests that are assigned to me in the current repository.
	;; crsfromme: Show a list of issues and pull requests that I've created in the current repository.
	;; crsaboutme: Show a list of issues and pull requests in the current repository where I am mentioned.

	;; myprs: Show a list of pull requests assigned to me in the current repository.
	;; prsfromme: Show a list of pull requests that I've created in the current repository.
	;; prsaboutme: Show a list of pull requests in the current repository where I am mentioned.

	;; reviews: Show pull requests with open reviews.
	;; myreviews: Show a list of pull requests that I need to review in the current repository.
	;; reviewsofprsfromme: Show a list of pull requests that I've created with open reviews in the current repository.
	;; reviewsofmyprs: Show a list of pull requests assigned to me with open reviews in the current repository.

	;; existspr: Check whether a pull-request for the current commit / passed HEAD [to BASE] exists.
	;; prtitle: Obtain corresponding GitHub pull request(s) that have HEAD / COMMIT(s) / PR-IDENTIFIER(s) as the branch's HEAD, and print its title(s); on separate lines, with a summary header listing the PR numbers followed by an empty line) then.
	prtitlebl = previousbranch-command --last-checkout prtitle ; HUB
	;; superprtitle: Obtain corresponding GitHub pull request(s) of the submodule's superproject, and print its title(s); on separate lines, with a summary header listing the PR numbers followed by an empty line) then.
	;; superpr: Obtain corresponding GitHub pull request(s) of the submodule's superproject in a format suitable for a pull request with USER/REPO.
	;; browse-pr: Obtain corresponding GitHub pull request(s) that have HEAD / <commit>(s) as the branch's HEAD, and open in the browser / print its URL(s).
	;; prapproval: Print review comments and approvals from GitHub pull request(s) with #ID / that have HEAD / <commit>(s) as the branch's HEAD.
	;; prcomments: Print unresolved review comments from pull request(s) with #ID / that have HEAD / <commit>(s) as the branch's HEAD.
	;; workflow-status: Print / check the status of a GitHub workflow.
	;; pr-rebase: Change the base branch of pull requests targeting the current / passed BRANCH to point to master / the passed NEW_BASE branch.

	;; chp-dependency-updates: Cherry-pick all open PRs with the label 'dependencies' into the current branch, marking them as closed by the cherry-picked commits.

[difftool "diffbin"]
	cmd = git-diffbin --as-difftool "$LOCAL" "$REMOTE"
[difftool "diffc"]
	cmd = git-diffc --as-difftool "$LOCAL" "$REMOTE"
[difftool "diffe"]
	cmd = git-diffe --as-difftool "$LOCAL" "$REMOTE"
[difftool "diffea"]
	cmd = git-diffe --added --as-difftool "$LOCAL" "$REMOTE"
[difftool "diffed"]
	cmd = git-diffe --deleted --as-difftool "$LOCAL" "$REMOTE"
[difftool "diffws"]
	cmd = git-diffws --as-difftool "$LOCAL" "$REMOTE"
[difftool "diffy"]
	cmd = git-diffY --as-difftool --suppress-common-lines "$LOCAL" "$REMOTE"
[difftool "diffY"]
	cmd = git-diffY --as-difftool "$LOCAL" "$REMOTE"
[difftool "difflines"]
	cmd = git-difflines --as-difftool "$LOCAL" "$REMOTE"

[pull-request]
	; Both print and open the new pull request in a web browser by default (courtesy of my hub-pull-request wrapper).
	defaultArg = --browse
	defaultArg = --print

# Define trailers for the various {commitwith,credit}* aliases
[trailer.ack]
	key = Acked-by
	ifexists = addIfDifferent
[trailer.help]
	key = Helped-by
	ifexists = addIfDifferent
[trailer.mentor]
	key = Mentored-by
	ifexists = addIfDifferent
[trailer.report]
	key = Reported-by
	ifexists = addIfDifferent
[trailer.review]
	key = Reviewed-by
	ifexists = addIfDifferent
[trailer.sign]
	key = Signed-off-by
	ifexists = addIfDifferent
[trailer.suggest]
	key = Suggested-by
	ifexists = addIfDifferent
[trailer.test]
	key = Tested-by
	ifexists = addIfDifferent

# git-commit extension: Automatically add trailers containing system and/or platform information.
[trailer.system]
	key = System-info
	ifexists = addIfDifferent
	where = after
[trailer.platform]
	key = Platform-info
	ifexists = addIfDifferent
	where = after

[uptodate]
	excludedTags = "archive/*"

[include]
	path = gitconfig-br-variants
	path = gitconfig-local-bases
	path = gitconfig-origin-bases
	path = gitconfig-upstream-bases
